syntax = "proto3";

import "data.proto";
import "peer.proto";
import "user.proto";

// Require Go Package
option go_package = "/models";

// Request to Create or Return Username
message AuthenticationRequest {
  Type type = 1;
  string mnemonic = 2; // Required Frontend Mnemonic
  string sName = 3;    // Required Frontend SName
  Device device = 4;   // Required Field for Handling Keys/ID
  APIKeys apiKeys = 5; // Client Keys

  enum Type {
    EXISTING = 0;
    CHECK_NAME = 1;
    SAVE_NAME = 2;
  }
}

// Response for Create or Return Username
message AuthenticationResponse {
  bool isValid = 1;
  bool isSaved = 2;
  User.Crypto crypto = 3;
}

// Initial Connection Message to Establish Sonr
message ConnectionRequest {
  Type type = 1;         // Connection Request Type
  Location location = 2; // Current Runtime Location
  Device device = 3;     // Users Device
  Contact contact = 4;   // Users Contact Card
  APIKeys apiKeys = 5;   // Client Keys

  // Connection Request Type
  enum Type {
    CONNECT = 0;
    STORJ = 1;
    LINK = 2;
  }
}

// Response to Connection Request
message ConnectionResponse {
  User user = 1;
  Peer.ID id = 2;
}

// Invitation Message sent on RPC
message InviteRequest {
  Payload payload = 1; // Type of Transfer
  Peer from = 2;       // Users Peer Data
  Peer to = 3;         // Receivers Peer Data
  Transfer data = 4;   // Attached Data
}

// Reply Message sent on RPC
message InviteResponse {
  Type type = 1;     // Cancel Reply
  Peer from = 2;     // Users Peer Data
  Peer to = 3;       // Receivers Peer Data
  bool decision = 4; // Users Decision for the Invitation
  Transfer data = 5; // Card contains all Data Info, Transfer Info

  enum Type {
    None = 0;
    Transfer = 1;
    Contact = 2;
    FlatContact = 3;
    Cancel = 4;
  }
}

// REST API Request over HTTP
message RestRequest {
  RestMethodType type = 1;
  string method = 2;
  map<string, string> parameters = 3;
  oneof host {
    Peer peer = 4;
    string id = 5;
    string sName = 6;
  }
}

// REST API Response over HTTP
message RestResponse {
  RestMethodType type = 1;
  string method = 2;
  int32 code = 3;
  map<string, string> body = 4;
}

enum RestMethodType {
  DEFAULT = 0;
  GET = 1;
  PUT = 2;
  POST = 3;
}

// Message for Status Update
message StatusUpdate {
  Status value = 1;
  User user = 2;
}

// Updated Peer Info Request
message UpdateRequest {
  oneof data {
    Peer.Properties properties = 1; // Updated Peer Properties
    Contact contact = 2;            // Users Updated Contact Card
    Position position = 3;          // Users updated Position
  }
}
