syntax = "proto3";

// Node
package sonrio.highway.v1;
import "channel/channel.proto";
import "channel/tx.proto";
import "bucket/tx.proto";
import "object/tx.proto";
import "registry/tx.proto";
import "highway/v1/request.proto";
import "highway/v1/response.proto";
import "google/api/annotations.proto";
option go_package = "github.com/sonr-io/sonr/highway/v1";

// Highway
//
// Provides is a RPC service for interfacing over the Highway node.
service Highway {
  // Create New Channel
  //
  // Creates a new Publish/Subscribe topic channel for the given service.
  // The calling node must have already registered a service for the channel.
  rpc CreateChannel(sonrio.sonr.channel.MsgCreateChannel) returns (sonrio.sonr.channel.MsgCreateChannelResponse) {
    option (google.api.http) = {
      post: "/create/channel"
    };
  }

  // Update a Channel
  //
  // Updates the configuration of the given channel.
  rpc UpdateChannel(sonrio.sonr.channel.MsgUpdateChannel) returns (sonrio.sonr.channel.MsgUpdateChannelResponse) {
    option (google.api.http) = {
      put: "/update/channel/{did}"
    };
  }

  // Listen to a Channel
  //
  // Subscribes the calling node to the given channel and returns all publish events
  // as a stream.
  rpc ListenChannel(sonrio.highway.v1.MsgListenChannel) returns (stream sonrio.sonr.channel.ChannelMessage) {
    option (google.api.http) = {
      post: "/listen/channel/{did}"
    };
  }

  // Upload Blob
  //
  // Uploads a file or buffer to the calling node's service IPFS storage.
  rpc UploadBlob(sonrio.highway.v1.MsgUploadBlob) returns (stream sonrio.highway.v1.MsgUploadBlobResponse) {
    option (google.api.http) = {
      post: "/upload/blob"
    };
  }

  // Download a Blob
  //
  // Downloads a file or buffer from the calling node's service IPFS storage.
  rpc DownloadBlob(sonrio.highway.v1.MsgDownloadBlob) returns (stream sonrio.highway.v1.MsgDownloadBlobResponse) {
    option (google.api.http) = {
      get: "/download/blob/{did}"
    };
  }

  // Synchronize Blob
  //
  // Synchronizes a local file from the calling node to the given service's IPFS storage.
  rpc SyncBlob(sonrio.highway.v1.MsgSyncBlob) returns (stream sonrio.highway.v1.MsgSyncBlobResponse) {
    option (google.api.http) = {
      put: "/sync/blob/{did}"
    };
  }

  // Delete a Blob
  //
  // Deletes the given blob from the calling node's service IPFS storage.
  rpc DeleteBlob(sonrio.highway.v1.MsgDeleteBlob) returns (sonrio.highway.v1.MsgDeleteBlobResponse) {
    option (google.api.http) = {
      delete: "/delete/blob/{did}"
    };
  }
}
