syntax = "proto3";

import "data.proto";
import "user.proto";

// Require Go Package
option go_package = ".;proto";

// Message Sent when User is connected and calls GetUser()
message ConnectedMessage {
  string hostId = 1;
  Profile profile = 2;
  Contact contact = 3;
}

// [CORE]
// Message Sent when peer has direction update to Lobby Topic
message LobbyMessage {
  string event = 1;
  string sender = 2;
  PeerInfo data = 3;
}

// Message Sent when peers returned from lobby
message RefreshMessage {
  int32 count = 1;
  string olc = 2;
  repeated PeerInfo availablePeers = 3;
}

// Processed File to be stored in Badger Store
message ProcessedMessage {
  Metadata metadata = 1;
  bytes thumbnail = 2;
}

// [CORE]
// Authorization being sent from
message AuthMessage {
  // Define Root Message
  PeerInfo peer = 1;
  Subject subject = 2;
  Metadata metadata = 3;
  bytes thumbnail = 4;

  // Define Subject
  enum Subject {
    NONE = 0;
    REQUEST = 1;
    ACCEPT = 2;
    DECLINE = 3;
  }
}

// Define Error Occurance
message ErrorMessage {
  Kind kind = 1;
  string message = 2;
  Level level = 3;

  // Level of Error Issue
  enum Level {
    NONE = 0;
    MINOR = 1;
    WARNING = 2;
    MAJOR = 3;
    CRITICAL = 4;
    PANIC = 5;
  }

  // Kind of Error Issue
  enum Kind {
    NETWORK = 0;
    LOBBY = 1;
    DISCOVERY = 2;
    PROTO = 3;
    BYTES = 4;
    JSON = 5;
    PEER = 6;
    BADGER = 7;
    INFO = 8;
    BUFFER = 9;
  }
}

// Defining Callback structure for Uniform Handling
message Callback {
  Type callbackType = 1;
  oneof type {
    ConnectedMessage connected = 2;
    RefreshMessage refreshed = 3;
    ProcessedMessage processed = 4;
    AuthMessage invited = 5;
    AuthMessage responded = 6;
    bytes transferring = 7; // TODO
    bytes completed = 8;    // TODO
    ErrorMessage error = 9;
  }

  // Define Subject
  enum Type {
    NONE = 0;
    CONNECTED = 1;
    REFRESHED = 2;
    PROCESSED = 3;
    INVITED = 4;
    RESPONDED = 5;
    TRANFERRING = 6;
    COMPLETED = 7;
    ERROR = 8;
  }
}