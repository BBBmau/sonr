name: Core Workflow

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the release branch
  push:
    tags:
      - v*

  pull_request:
    branches: [release]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Runs the `gomobile bind -android` job
  build-android:
    name: "Android AAR  üîó "

    # Env Variables for the job
    env:
      GO111MODULE: on
      GOMOD: ${{ github.workspace }}/go.mod

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Setup Go Enviornment
      - name: Setup Go Env
        uses: ibrt/golang-github-action@v1
        with:
          go-version: 1.16.6
          go-packages: |
            golang.org/x/mobile/cmd/gomobile

      # Bind Android Framework to Plugin
      - name: Setup and Bind AAR
        run: |
          mkdir -p ${{ github.workspace }}/build/android
          go get golang.org/x/mobile
          gomobile init
          cd ${{ github.workspace }}/bind
          gomobile bind -ldflags='-s -w' -v -target=android -o ${{ github.workspace }}/build/android/io.sonr.core.aar

      # Upload AAR to Artifacts
      - uses: actions/upload-artifact@master
        with:
          name: io.sonr.core.aar
          path: build/android/io.sonr.core.aar

  # Runs the `gomobile bind -ios` job
  build-ios:
    name: "iOS Framework  üîó "

    # Env Variables for the job
    env:
      GO111MODULE: on
      GOMOD: ${{ github.workspace }}/go.mod

    # The type of runner that the job will run on
    runs-on: macos-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Setup Go Enviornment
      - name: Setup Go Environment
        uses: ibrt/golang-github-action@v1
        with:
          go-version: 1.16.6
          go-packages: |
            golang.org/x/mobile/cmd/gomobile

      # Bind iOS Framework to Plugin
      - name: Setup and Bind
        run: |
          mkdir -p ${{ github.workspace }}/build/ios
          go get golang.org/x/mobile
          gomobile init
          cd ${{ github.workspace }}/bind
          gomobile bind -ldflags='-s -w' -v -target=ios -bundleid=io.sonr.core -o ${{ github.workspace }}/build/ios/Core.framework

      # Upload AAR to Artifacts
      - uses: actions/upload-artifact@master
        with:
          name: Core.framework
          path: build/ios/Core.framework

  # Runs the `go-releaser` job
  build-rpc:
    name: "RPC Daemon  üî® "

    # The type of runner that the job will run on
    runs-on: macos-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Setup Go Enviornment
      - name: Setup Go Environment
        uses: ibrt/golang-github-action@v1
        with:
          go-version: 1.16.6

      # Build Cmd with Goreleaser
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          workdir: ${{ github.workspace }}/cmd
          distribution: goreleaser
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload Artifact - rpc_darwin_amd64
      - uses: actions/upload-artifact@master
        with:
          name: sonr-rpc_darwin_amd64
          path: cmd/dist/sonr-rpc_darwin_amd64/sonr-rpc

      # Upload Artifact - rpc_darwin_arm64
      - uses: actions/upload-artifact@master
        with:
          name: sonr-rpc_darwin_arm64
          path: cmd/dist/sonr-rpc_darwin_arm64/sonr-rpc

      # Upload Artifact - rpc_linux_amd64
      - uses: actions/upload-artifact@master
        with:
          name: sonr-rpc_linux_amd64
          path: cmd/dist/sonr-rpc_linux_amd64/sonr-rpc

      # Upload Artifact - rpc_linux_arm64
      - uses: actions/upload-artifact@master
        with:
          name: sonr-rpc_linux_arm64
          path: cmd/dist/sonr-rpc_linux_arm64/sonr-rpc

      # Upload Artifact - rpc_windows_amd64
      - uses: actions/upload-artifact@master
        with:
          name: sonr-rpc_windows_amd64
          path: cmd/dist/sonr-rpc_windows_amd64/sonr-rpc

  # Upload Artifacts as Releases
  release:
    # Await for Other Jobs to Complete
    needs: [build-rpc, build-ios, build-android]

    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Configure Builds
        run: |
          mkdir -p ${{ github.workspace }}/build

      # Download All Artifacts
      - name: "Download Artifacts ‚¨áÔ∏è"
        uses: actions/download-artifact@v2
        with:
          path: build

      # Release All Artifacts
      - name: "Package Release üì¶ "
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            - build/Core.framework
            - build/io.sonr.core.aar
            - build/sonr-rpc_darwin_amd64
            - build/sonr-rpc_darwin_arm64
            - build/sonr-rpc_linux_amd64
            - build/sonr-rpc_linux_arm64
            - build/sonr-rpc_windows_amd64
