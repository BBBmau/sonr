// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: user.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// KeyPair Encryption Type
type KeyType int32

const (
	KeyType_RSA       KeyType = 0
	KeyType_Ed25519   KeyType = 1
	KeyType_Secp256k1 KeyType = 2
	KeyType_ECDSA     KeyType = 3
)

// Enum value maps for KeyType.
var (
	KeyType_name = map[int32]string{
		0: "RSA",
		1: "Ed25519",
		2: "Secp256k1",
		3: "ECDSA",
	}
	KeyType_value = map[string]int32{
		"RSA":       0,
		"Ed25519":   1,
		"Secp256k1": 2,
		"ECDSA":     3,
	}
)

func (x KeyType) Enum() *KeyType {
	p := new(KeyType)
	*p = x
	return p
}

func (x KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_user_proto_enumTypes[0].Descriptor()
}

func (KeyType) Type() protoreflect.EnumType {
	return &file_user_proto_enumTypes[0]
}

func (x KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyType.Descriptor instead.
func (KeyType) EnumDescriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{0}
}

// Status is User Node Situation
type Status int32

const (
	Status_DEFAULT   Status = 0 // Default Status on Launch
	Status_IDLE      Status = 1 // Node has not been Authenticated
	Status_CONNECTED Status = 2 // Status after starting Host
	Status_AVAILABLE Status = 3 // Bootstrapped and Visible Locally
	Status_PENDING   Status = 4 // Awaiting Peer Authorization
	Status_INVITED   Status = 5 // Has received Invitation
	Status_TRANSFER  Status = 6 // In Progress of Transfer
	Status_STANDBY   Status = 7 // Away from Sonr Application
	Status_FAILED    Status = 8 // Failed to Connect Host
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "DEFAULT",
		1: "IDLE",
		2: "CONNECTED",
		3: "AVAILABLE",
		4: "PENDING",
		5: "INVITED",
		6: "TRANSFER",
		7: "STANDBY",
		8: "FAILED",
	}
	Status_value = map[string]int32{
		"DEFAULT":   0,
		"IDLE":      1,
		"CONNECTED": 2,
		"AVAILABLE": 3,
		"PENDING":   4,
		"INVITED":   5,
		"TRANSFER":  6,
		"STANDBY":   7,
		"FAILED":    8,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_user_proto_enumTypes[1].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_user_proto_enumTypes[1]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{1}
}

// Available Settings Options
type User_Settings_Option_Type int32

const (
	User_Settings_Option_None              User_Settings_Option_Type = 0 // Arbitrary Zero Value
	User_Settings_Option_DefaultVideoCall  User_Settings_Option_Type = 1 // Default App to be used for Video Calls
	User_Settings_Option_FallbackVideoCall User_Settings_Option_Type = 2 // Fallback App for Video Calls
	User_Settings_Option_DarkMode          User_Settings_Option_Type = 3 // Dark Mode Preference
	User_Settings_Option_RunInBackground   User_Settings_Option_Type = 4 // Sonr Background Run Preference
)

// Enum value maps for User_Settings_Option_Type.
var (
	User_Settings_Option_Type_name = map[int32]string{
		0: "None",
		1: "DefaultVideoCall",
		2: "FallbackVideoCall",
		3: "DarkMode",
		4: "RunInBackground",
	}
	User_Settings_Option_Type_value = map[string]int32{
		"None":              0,
		"DefaultVideoCall":  1,
		"FallbackVideoCall": 2,
		"DarkMode":          3,
		"RunInBackground":   4,
	}
)

func (x User_Settings_Option_Type) Enum() *User_Settings_Option_Type {
	p := new(User_Settings_Option_Type)
	*p = x
	return p
}

func (x User_Settings_Option_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (User_Settings_Option_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_user_proto_enumTypes[2].Descriptor()
}

func (User_Settings_Option_Type) Type() protoreflect.EnumType {
	return &file_user_proto_enumTypes[2]
}

func (x User_Settings_Option_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use User_Settings_Option_Type.Descriptor instead.
func (User_Settings_Option_Type) EnumDescriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{4, 2, 2, 0}
}

// Client Keys for Services
type APIKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpApiKey        string `protobuf:"bytes,1,opt,name=ipApiKey,proto3" json:"ipApiKey,omitempty"`
	RapidApiHost    string `protobuf:"bytes,2,opt,name=rapidApiHost,proto3" json:"rapidApiHost,omitempty"`
	RapidApiKey     string `protobuf:"bytes,3,opt,name=rapidApiKey,proto3" json:"rapidApiKey,omitempty"`
	HandshakeKey    string `protobuf:"bytes,4,opt,name=handshakeKey,proto3" json:"handshakeKey,omitempty"`
	HandshakeSecret string `protobuf:"bytes,5,opt,name=handshakeSecret,proto3" json:"handshakeSecret,omitempty"`
	TextileKey      string `protobuf:"bytes,6,opt,name=textileKey,proto3" json:"textileKey,omitempty"`
	TextileSecret   string `protobuf:"bytes,7,opt,name=textileSecret,proto3" json:"textileSecret,omitempty"`
}

func (x *APIKeys) Reset() {
	*x = APIKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIKeys) ProtoMessage() {}

func (x *APIKeys) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIKeys.ProtoReflect.Descriptor instead.
func (*APIKeys) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{0}
}

func (x *APIKeys) GetIpApiKey() string {
	if x != nil {
		return x.IpApiKey
	}
	return ""
}

func (x *APIKeys) GetRapidApiHost() string {
	if x != nil {
		return x.RapidApiHost
	}
	return ""
}

func (x *APIKeys) GetRapidApiKey() string {
	if x != nil {
		return x.RapidApiKey
	}
	return ""
}

func (x *APIKeys) GetHandshakeKey() string {
	if x != nil {
		return x.HandshakeKey
	}
	return ""
}

func (x *APIKeys) GetHandshakeSecret() string {
	if x != nil {
		return x.HandshakeSecret
	}
	return ""
}

func (x *APIKeys) GetTextileKey() string {
	if x != nil {
		return x.TextileKey
	}
	return ""
}

func (x *APIKeys) GetTextileSecret() string {
	if x != nil {
		return x.TextileSecret
	}
	return ""
}

// Information about device for User
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                            // Device Identifier
	Name       string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                        // User Defined Name
	Platform   Platform    `protobuf:"varint,3,opt,name=platform,proto3,enum=Platform" json:"platform,omitempty"` // Operating System
	Model      string      `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`                      // Model of Device
	Version    string      `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`                  // Operating System Version
	FileSystem *FileSystem `protobuf:"bytes,6,opt,name=fileSystem,proto3" json:"fileSystem,omitempty"`            // Directories for this Device
	KeyPair    *KeyPair    `protobuf:"bytes,7,opt,name=keyPair,proto3" json:"keyPair,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{1}
}

func (x *Device) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Device) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_Undefined
}

func (x *Device) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Device) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Device) GetFileSystem() *FileSystem {
	if x != nil {
		return x.FileSystem
	}
	return nil
}

func (x *Device) GetKeyPair() *KeyPair {
	if x != nil {
		return x.KeyPair
	}
	return nil
}

// FileSystem is for Directores Where Data can be stored
type FileSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Documents string `protobuf:"bytes,1,opt,name=documents,proto3" json:"documents,omitempty"` // User Generated Files - Both
	Downloads string `protobuf:"bytes,2,opt,name=downloads,proto3" json:"downloads,omitempty"` // Downloaded Files - Desktop
	Library   string `protobuf:"bytes,3,opt,name=library,proto3" json:"library,omitempty"`     // Persistent Non Exposed Files - Desktop
	Support   string `protobuf:"bytes,4,opt,name=support,proto3" json:"support,omitempty"`     // Non Exposed Support Files - Mobile
	Temporary string `protobuf:"bytes,5,opt,name=temporary,proto3" json:"temporary,omitempty"` // Temporary Storage - Mobile
}

func (x *FileSystem) Reset() {
	*x = FileSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSystem) ProtoMessage() {}

func (x *FileSystem) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSystem.ProtoReflect.Descriptor instead.
func (*FileSystem) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{2}
}

func (x *FileSystem) GetDocuments() string {
	if x != nil {
		return x.Documents
	}
	return ""
}

func (x *FileSystem) GetDownloads() string {
	if x != nil {
		return x.Downloads
	}
	return ""
}

func (x *FileSystem) GetLibrary() string {
	if x != nil {
		return x.Library
	}
	return ""
}

func (x *FileSystem) GetSupport() string {
	if x != nil {
		return x.Support
	}
	return ""
}

func (x *FileSystem) GetTemporary() string {
	if x != nil {
		return x.Temporary
	}
	return ""
}

// Private Public Key Pair
type KeyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Private *KeyPair_Private `protobuf:"bytes,1,opt,name=private,proto3" json:"private,omitempty"`         // Private Key Ref
	Public  *KeyPair_Public  `protobuf:"bytes,2,opt,name=public,proto3" json:"public,omitempty"`           // Public Key Ref
	Type    KeyType          `protobuf:"varint,3,opt,name=type,proto3,enum=KeyType" json:"type,omitempty"` // Type of Key Encryption
}

func (x *KeyPair) Reset() {
	*x = KeyPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPair) ProtoMessage() {}

func (x *KeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPair.ProtoReflect.Descriptor instead.
func (*KeyPair) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{3}
}

func (x *KeyPair) GetPrivate() *KeyPair_Private {
	if x != nil {
		return x.Private
	}
	return nil
}

func (x *KeyPair) GetPublic() *KeyPair_Public {
	if x != nil {
		return x.Public
	}
	return nil
}

func (x *KeyPair) GetType() KeyType {
	if x != nil {
		return x.Type
	}
	return KeyType_RSA
}

// User is the Saved Data from Client that Passes to Proxy, During ConnRequest
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// From InitializeRequest
	ApiKeys *APIKeys `protobuf:"bytes,1,opt,name=apiKeys,proto3" json:"apiKeys,omitempty"`            // App Env Variables for API Keys
	Status  Status   `protobuf:"varint,2,opt,name=status,proto3,enum=Status" json:"status,omitempty"` // Client Node Status
	Device  *Device  `protobuf:"bytes,3,opt,name=device,proto3" json:"device,omitempty"`              // Clients Current Device
	// From ConnectionRequest
	Peer     *Peer          `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`         // Clients Peer Reference
	Location *Location      `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"` // Clients current Location
	Crypto   *User_Crypto   `protobuf:"bytes,6,opt,name=crypto,proto3" json:"crypto,omitempty"`     // User Cryptographic Data
	Settings *User_Settings `protobuf:"bytes,7,opt,name=settings,proto3" json:"settings,omitempty"` // User Settings
	Contact  *Contact       `protobuf:"bytes,8,opt,name=contact,proto3" json:"contact,omitempty"`   // Users Contact Card
	Router   *User_Router   `protobuf:"bytes,9,opt,name=router,proto3" json:"router,omitempty"`     // Client Routing Information
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{4}
}

func (x *User) GetApiKeys() *APIKeys {
	if x != nil {
		return x.ApiKeys
	}
	return nil
}

func (x *User) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_DEFAULT
}

func (x *User) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *User) GetPeer() *Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *User) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *User) GetCrypto() *User_Crypto {
	if x != nil {
		return x.Crypto
	}
	return nil
}

func (x *User) GetSettings() *User_Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *User) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *User) GetRouter() *User_Router {
	if x != nil {
		return x.Router
	}
	return nil
}

// User Private Key Saved to Disk
type KeyPair_Private struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path   string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`     // Private Key Path
	Buffer []byte `protobuf:"bytes,2,opt,name=buffer,proto3" json:"buffer,omitempty"` // Key Buffer
}

func (x *KeyPair_Private) Reset() {
	*x = KeyPair_Private{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyPair_Private) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPair_Private) ProtoMessage() {}

func (x *KeyPair_Private) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPair_Private.ProtoReflect.Descriptor instead.
func (*KeyPair_Private) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{3, 0}
}

func (x *KeyPair_Private) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *KeyPair_Private) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

// Public Key for Thread ID/ Libp2p ID
type KeyPair_Public struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`         // P2P Id derived from Public Key
	Buffer []byte `protobuf:"bytes,2,opt,name=buffer,proto3" json:"buffer,omitempty"` // Public Key Buffer
}

func (x *KeyPair_Public) Reset() {
	*x = KeyPair_Public{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyPair_Public) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPair_Public) ProtoMessage() {}

func (x *KeyPair_Public) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPair_Public.ProtoReflect.Descriptor instead.
func (*KeyPair_Public) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{3, 1}
}

func (x *KeyPair_Public) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KeyPair_Public) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

// Shared Key for Device Linking
type KeyPair_Shared struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ephermal []byte `protobuf:"bytes,1,opt,name=ephermal,proto3" json:"ephermal,omitempty"` // Public Ephermal Key Generated from "P-256" Curve
}

func (x *KeyPair_Shared) Reset() {
	*x = KeyPair_Shared{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyPair_Shared) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPair_Shared) ProtoMessage() {}

func (x *KeyPair_Shared) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPair_Shared.ProtoReflect.Descriptor instead.
func (*KeyPair_Shared) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{3, 2}
}

func (x *KeyPair_Shared) GetEphermal() []byte {
	if x != nil {
		return x.Ephermal
	}
	return nil
}

// Crypto Data to Place in DHT
type User_Crypto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix   string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`     // Created from DeviceID and SName
	Mnemonic string `protobuf:"bytes,2,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"` // Used to generate fingerprint
	SName    string `protobuf:"bytes,3,opt,name=sName,proto3" json:"sName,omitempty"`       // User Snr Domain
}

func (x *User_Crypto) Reset() {
	*x = User_Crypto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_Crypto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_Crypto) ProtoMessage() {}

func (x *User_Crypto) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_Crypto.ProtoReflect.Descriptor instead.
func (*User_Crypto) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{4, 0}
}

func (x *User_Crypto) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *User_Crypto) GetMnemonic() string {
	if x != nil {
		return x.Mnemonic
	}
	return ""
}

func (x *User_Crypto) GetSName() string {
	if x != nil {
		return x.SName
	}
	return ""
}

// Router Manages Peer Routing for Topics/Transfers - Attached from Node
// Client
type User_Router struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceTopic string    `protobuf:"bytes,1,opt,name=deviceTopic,proto3" json:"deviceTopic,omitempty"`
	LocalTopic  string    `protobuf:"bytes,2,opt,name=localTopic,proto3" json:"localTopic,omitempty"`
	Rendevouz   string    `protobuf:"bytes,3,opt,name=rendevouz,proto3" json:"rendevouz,omitempty"`
	Location    *Location `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *User_Router) Reset() {
	*x = User_Router{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_Router) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_Router) ProtoMessage() {}

func (x *User_Router) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_Router.ProtoReflect.Descriptor instead.
func (*User_Router) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{4, 1}
}

func (x *User_Router) GetDeviceTopic() string {
	if x != nil {
		return x.DeviceTopic
	}
	return ""
}

func (x *User_Router) GetLocalTopic() string {
	if x != nil {
		return x.LocalTopic
	}
	return ""
}

func (x *User_Router) GetRendevouz() string {
	if x != nil {
		return x.Rendevouz
	}
	return ""
}

func (x *User_Router) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

// User Settings
type User_Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Primary     *Device                          `protobuf:"bytes,1,opt,name=primary,proto3" json:"primary,omitempty"`
	Devices     map[string]*Device               `protobuf:"bytes,2,rep,name=devices,proto3" json:"devices,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`         // Clients Devices: Name, Device
	Preferences map[string]*User_Settings_Option `protobuf:"bytes,3,rep,name=preferences,proto3" json:"preferences,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Clients Specified Preferences
}

func (x *User_Settings) Reset() {
	*x = User_Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_Settings) ProtoMessage() {}

func (x *User_Settings) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_Settings.ProtoReflect.Descriptor instead.
func (*User_Settings) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{4, 2}
}

func (x *User_Settings) GetPrimary() *Device {
	if x != nil {
		return x.Primary
	}
	return nil
}

func (x *User_Settings) GetDevices() map[string]*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *User_Settings) GetPreferences() map[string]*User_Settings_Option {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type User_Settings_Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type User_Settings_Option_Type `protobuf:"varint,1,opt,name=type,proto3,enum=User_Settings_Option_Type" json:"type,omitempty"` // Type of Option
	Key  string                    `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`                                   // Option as String
	// Types that are assignable to Value:
	//	*User_Settings_Option_Enabled
	//	*User_Settings_Option_Text
	Value isUser_Settings_Option_Value `protobuf_oneof:"value"`
}

func (x *User_Settings_Option) Reset() {
	*x = User_Settings_Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_Settings_Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_Settings_Option) ProtoMessage() {}

func (x *User_Settings_Option) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_Settings_Option.ProtoReflect.Descriptor instead.
func (*User_Settings_Option) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{4, 2, 2}
}

func (x *User_Settings_Option) GetType() User_Settings_Option_Type {
	if x != nil {
		return x.Type
	}
	return User_Settings_Option_None
}

func (x *User_Settings_Option) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (m *User_Settings_Option) GetValue() isUser_Settings_Option_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *User_Settings_Option) GetEnabled() bool {
	if x, ok := x.GetValue().(*User_Settings_Option_Enabled); ok {
		return x.Enabled
	}
	return false
}

func (x *User_Settings_Option) GetText() string {
	if x, ok := x.GetValue().(*User_Settings_Option_Text); ok {
		return x.Text
	}
	return ""
}

type isUser_Settings_Option_Value interface {
	isUser_Settings_Option_Value()
}

type User_Settings_Option_Enabled struct {
	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3,oneof"` // If Value is for simple enable/disable
}

type User_Settings_Option_Text struct {
	Text string `protobuf:"bytes,4,opt,name=text,proto3,oneof"` // If Value is complex
}

func (*User_Settings_Option_Enabled) isUser_Settings_Option_Value() {}

func (*User_Settings_Option_Text) isUser_Settings_Option_Value() {}

var File_user_proto protoreflect.FileDescriptor

var file_user_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x70, 0x65,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xff, 0x01, 0x0a, 0x07, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x70, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x61, 0x70, 0x69, 0x64, 0x41, 0x70, 0x69, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x61, 0x70, 0x69, 0x64, 0x41, 0x70, 0x69, 0x48, 0x6f, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x61, 0x70, 0x69, 0x64, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x61, 0x70, 0x69, 0x64, 0x41, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x4b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68,
	0x61, 0x6b, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68,
	0x61, 0x6b, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x69, 0x6c, 0x65,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x0a,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x07, 0x6b, 0x65, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x22, 0x9a, 0x01,
	0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x22, 0x8b, 0x02, 0x0a, 0x07, 0x4b,
	0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x4b, 0x65, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x35, 0x0a, 0x07, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x1a, 0x30, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x1a, 0x24, 0x0a, 0x06, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x70, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x65, 0x70, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x22, 0xe0, 0x08, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x07, 0x61, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x06, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x06, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12,
	0x2a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12,
	0x24, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x06, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x1a, 0x52, 0x0a, 0x06, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x8f, 0x01, 0x0a, 0x06, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x76,
	0x6f, 0x75, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x76, 0x6f, 0x75, 0x7a, 0x12, 0x25, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xad, 0x04, 0x0a, 0x08,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x43, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x10, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0xe7, 0x01, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x60, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x43, 0x61, 0x6c, 0x6c, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x61, 0x6c, 0x6c, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x61, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x03, 0x12, 0x13, 0x0a,
	0x0f, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x10, 0x04, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x39, 0x0a, 0x07, 0x4b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x53, 0x41, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x65, 0x63, 0x70, 0x32, 0x35, 0x36, 0x6b, 0x31, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x43, 0x44, 0x53, 0x41, 0x10, 0x03, 0x2a, 0x7e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x0c, 0x0a, 0x08, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x42, 0x09, 0x5a, 0x07, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_proto_rawDescOnce sync.Once
	file_user_proto_rawDescData = file_user_proto_rawDesc
)

func file_user_proto_rawDescGZIP() []byte {
	file_user_proto_rawDescOnce.Do(func() {
		file_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_proto_rawDescData)
	})
	return file_user_proto_rawDescData
}

var file_user_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_user_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_user_proto_goTypes = []interface{}{
	(KeyType)(0),                   // 0: KeyType
	(Status)(0),                    // 1: Status
	(User_Settings_Option_Type)(0), // 2: User.Settings.Option.Type
	(*APIKeys)(nil),                // 3: APIKeys
	(*Device)(nil),                 // 4: Device
	(*FileSystem)(nil),             // 5: FileSystem
	(*KeyPair)(nil),                // 6: KeyPair
	(*User)(nil),                   // 7: User
	(*KeyPair_Private)(nil),        // 8: KeyPair.Private
	(*KeyPair_Public)(nil),         // 9: KeyPair.Public
	(*KeyPair_Shared)(nil),         // 10: KeyPair.Shared
	(*User_Crypto)(nil),            // 11: User.Crypto
	(*User_Router)(nil),            // 12: User.Router
	(*User_Settings)(nil),          // 13: User.Settings
	nil,                            // 14: User.Settings.DevicesEntry
	nil,                            // 15: User.Settings.PreferencesEntry
	(*User_Settings_Option)(nil),   // 16: User.Settings.Option
	(Platform)(0),                  // 17: Platform
	(*Peer)(nil),                   // 18: Peer
	(*Location)(nil),               // 19: Location
	(*Contact)(nil),                // 20: Contact
}
var file_user_proto_depIdxs = []int32{
	17, // 0: Device.platform:type_name -> Platform
	5,  // 1: Device.fileSystem:type_name -> FileSystem
	6,  // 2: Device.keyPair:type_name -> KeyPair
	8,  // 3: KeyPair.private:type_name -> KeyPair.Private
	9,  // 4: KeyPair.public:type_name -> KeyPair.Public
	0,  // 5: KeyPair.type:type_name -> KeyType
	3,  // 6: User.apiKeys:type_name -> APIKeys
	1,  // 7: User.status:type_name -> Status
	4,  // 8: User.device:type_name -> Device
	18, // 9: User.peer:type_name -> Peer
	19, // 10: User.location:type_name -> Location
	11, // 11: User.crypto:type_name -> User.Crypto
	13, // 12: User.settings:type_name -> User.Settings
	20, // 13: User.contact:type_name -> Contact
	12, // 14: User.router:type_name -> User.Router
	19, // 15: User.Router.location:type_name -> Location
	4,  // 16: User.Settings.primary:type_name -> Device
	14, // 17: User.Settings.devices:type_name -> User.Settings.DevicesEntry
	15, // 18: User.Settings.preferences:type_name -> User.Settings.PreferencesEntry
	4,  // 19: User.Settings.DevicesEntry.value:type_name -> Device
	16, // 20: User.Settings.PreferencesEntry.value:type_name -> User.Settings.Option
	2,  // 21: User.Settings.Option.type:type_name -> User.Settings.Option.Type
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_user_proto_init() }
func file_user_proto_init() {
	if File_user_proto != nil {
		return
	}
	file_peer_proto_init()
	file_data_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyPair_Private); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyPair_Public); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyPair_Shared); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User_Crypto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User_Router); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User_Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User_Settings_Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_user_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*User_Settings_Option_Enabled)(nil),
		(*User_Settings_Option_Text)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_user_proto_goTypes,
		DependencyIndexes: file_user_proto_depIdxs,
		EnumInfos:         file_user_proto_enumTypes,
		MessageInfos:      file_user_proto_msgTypes,
	}.Build()
	File_user_proto = out.File
	file_user_proto_rawDesc = nil
	file_user_proto_goTypes = nil
	file_user_proto_depIdxs = nil
}
