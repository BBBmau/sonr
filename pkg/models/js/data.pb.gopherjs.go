// Code generated by protoc-gen-gopherjs. DO NOT EDIT.
// source: data.proto

package js

import jspb "github.com/johanbrandhorst/protobuf/jspb"

// This is a compile-time assertion to ensure that this generated file
// is compatible with the jspb package it is being compiled against.
const _ = jspb.JspbPackageIsVersion2

// Payload is type of Data being transferred
type Payload int

const (
	Payload_NONE    Payload = 0
	Payload_CONTACT Payload = 1
	Payload_FILE    Payload = 2
	Payload_FILES   Payload = 3
	Payload_URL     Payload = 4
	Payload_MEDIA   Payload = 5
	Payload_ALBUM   Payload = 6
)

var Payload_name = map[int]string{
	0: "NONE",
	1: "CONTACT",
	2: "FILE",
	3: "FILES",
	4: "URL",
	5: "MEDIA",
	6: "ALBUM",
}
var Payload_value = map[string]int{
	"NONE":    0,
	"CONTACT": 1,
	"FILE":    2,
	"FILES":   3,
	"URL":     4,
	"MEDIA":   5,
	"ALBUM":   6,
}

func (x Payload) String() string {
	return Payload_name[int(x)]
}

type Contact_Design_Color int

const (
	Contact_Design_Transparent  Contact_Design_Color = 0
	Contact_Design_Primary      Contact_Design_Color = 1
	Contact_Design_Secondary    Contact_Design_Color = 2
	Contact_Design_Tertiary     Contact_Design_Color = 3
	Contact_Design_Critical     Contact_Design_Color = 4
	Contact_Design_AccentPink   Contact_Design_Color = 5
	Contact_Design_AccentBlue   Contact_Design_Color = 6
	Contact_Design_AccentNavy   Contact_Design_Color = 7
	Contact_Design_AccentPurple Contact_Design_Color = 8
	Contact_Design_Black        Contact_Design_Color = 9
	Contact_Design_White        Contact_Design_Color = 10
	Contact_Design_Grey         Contact_Design_Color = 11
)

var Contact_Design_Color_name = map[int]string{
	0:  "Transparent",
	1:  "Primary",
	2:  "Secondary",
	3:  "Tertiary",
	4:  "Critical",
	5:  "AccentPink",
	6:  "AccentBlue",
	7:  "AccentNavy",
	8:  "AccentPurple",
	9:  "Black",
	10: "White",
	11: "Grey",
}
var Contact_Design_Color_value = map[string]int{
	"Transparent":  0,
	"Primary":      1,
	"Secondary":    2,
	"Tertiary":     3,
	"Critical":     4,
	"AccentPink":   5,
	"AccentBlue":   6,
	"AccentNavy":   7,
	"AccentPurple": 8,
	"Black":        9,
	"White":        10,
	"Grey":         11,
}

func (x Contact_Design_Color) String() string {
	return Contact_Design_Color_name[int(x)]
}

type Contact_General_Gender_Options int

const (
	Contact_General_Gender_Unspecified Contact_General_Gender_Options = 0
	Contact_General_Gender_Male        Contact_General_Gender_Options = 1
	Contact_General_Gender_Female      Contact_General_Gender_Options = 2
)

var Contact_General_Gender_Options_name = map[int]string{
	0: "Unspecified",
	1: "Male",
	2: "Female",
}
var Contact_General_Gender_Options_value = map[string]int{
	"Unspecified": 0,
	"Male":        1,
	"Female":      2,
}

func (x Contact_General_Gender_Options) String() string {
	return Contact_General_Gender_Options_name[int(x)]
}

// Social Media Service
type Contact_Social_Media int

const (
	Contact_Social_Instagram Contact_Social_Media = 0
	Contact_Social_TikTok    Contact_Social_Media = 1
	Contact_Social_Facebook  Contact_Social_Media = 2
	Contact_Social_YouTube   Contact_Social_Media = 3
	Contact_Social_Medium    Contact_Social_Media = 5
	Contact_Social_Twitter   Contact_Social_Media = 6
	Contact_Social_Snapchat  Contact_Social_Media = 7
	Contact_Social_Github    Contact_Social_Media = 8
	Contact_Social_LinkedIn  Contact_Social_Media = 9
	Contact_Social_Twitch    Contact_Social_Media = 10
	Contact_Social_Pinterest Contact_Social_Media = 11
	Contact_Social_Vimeo     Contact_Social_Media = 12
	Contact_Social_Gumroad   Contact_Social_Media = 13
)

var Contact_Social_Media_name = map[int]string{
	0:  "Instagram",
	1:  "TikTok",
	2:  "Facebook",
	3:  "YouTube",
	5:  "Medium",
	6:  "Twitter",
	7:  "Snapchat",
	8:  "Github",
	9:  "LinkedIn",
	10: "Twitch",
	11: "Pinterest",
	12: "Vimeo",
	13: "Gumroad",
}
var Contact_Social_Media_value = map[string]int{
	"Instagram": 0,
	"TikTok":    1,
	"Facebook":  2,
	"YouTube":   3,
	"Medium":    5,
	"Twitter":   6,
	"Snapchat":  7,
	"Github":    8,
	"LinkedIn":  9,
	"Twitch":    10,
	"Pinterest": 11,
	"Vimeo":     12,
	"Gumroad":   13,
}

func (x Contact_Social_Media) String() string {
	return Contact_Social_Media_name[int(x)]
}

// Music Service
type Contact_Social_Music int

const (
	Contact_Social_Spotify    Contact_Social_Music = 0
	Contact_Social_AppleMusic Contact_Social_Music = 1
	Contact_Social_SoundCloud Contact_Social_Music = 2
)

var Contact_Social_Music_name = map[int]string{
	0: "Spotify",
	1: "AppleMusic",
	2: "SoundCloud",
}
var Contact_Social_Music_value = map[string]int{
	"Spotify":    0,
	"AppleMusic": 1,
	"SoundCloud": 2,
}

func (x Contact_Social_Music) String() string {
	return Contact_Social_Music_name[int(x)]
}

// Payment Service
type Contact_Social_Payment int

const (
	Contact_Social_CashApp  Contact_Social_Payment = 0
	Contact_Social_Venmo    Contact_Social_Payment = 1
	Contact_Social_PayPal   Contact_Social_Payment = 2
	Contact_Social_Bitcoin  Contact_Social_Payment = 3
	Contact_Social_Ethereum Contact_Social_Payment = 4
)

var Contact_Social_Payment_name = map[int]string{
	0: "CashApp",
	1: "Venmo",
	2: "PayPal",
	3: "Bitcoin",
	4: "Ethereum",
}
var Contact_Social_Payment_value = map[string]int{
	"CashApp":  0,
	"Venmo":    1,
	"PayPal":   2,
	"Bitcoin":  3,
	"Ethereum": 4,
}

func (x Contact_Social_Payment) String() string {
	return Contact_Social_Payment_name[int(x)]
}

// Social Tile Visibility
type Contact_Social_Visibility int

const (
	Contact_Social_Unknown       Contact_Social_Visibility = 0
	Contact_Social_Private       Contact_Social_Visibility = 1
	Contact_Social_Public        Contact_Social_Visibility = 2
	Contact_Social_PrivateHidden Contact_Social_Visibility = 3
	Contact_Social_PublicHidden  Contact_Social_Visibility = 4
)

var Contact_Social_Visibility_name = map[int]string{
	0: "Unknown",
	1: "Private",
	2: "Public",
	3: "PrivateHidden",
	4: "PublicHidden",
}
var Contact_Social_Visibility_value = map[string]int{
	"Unknown":       0,
	"Private":       1,
	"Public":        2,
	"PrivateHidden": 3,
	"PublicHidden":  4,
}

func (x Contact_Social_Visibility) String() string {
	return Contact_Social_Visibility_name[int(x)]
}

type MIME_Type int

const (
	MIME_OTHER        MIME_Type = 0
	MIME_AUDIO        MIME_Type = 1
	MIME_IMAGE        MIME_Type = 2
	MIME_TEXT         MIME_Type = 3
	MIME_PDF          MIME_Type = 4
	MIME_PRESENTATION MIME_Type = 5
	MIME_SPREADSHEET  MIME_Type = 6
	MIME_VIDEO        MIME_Type = 7
	MIME_SNR          MIME_Type = 8
)

var MIME_Type_name = map[int]string{
	0: "OTHER",
	1: "AUDIO",
	2: "IMAGE",
	3: "TEXT",
	4: "PDF",
	5: "PRESENTATION",
	6: "SPREADSHEET",
	7: "VIDEO",
	8: "SNR",
}
var MIME_Type_value = map[string]int{
	"OTHER":        0,
	"AUDIO":        1,
	"IMAGE":        2,
	"TEXT":         3,
	"PDF":          4,
	"PRESENTATION": 5,
	"SPREADSHEET":  6,
	"VIDEO":        7,
	"SNR":          8,
}

func (x MIME_Type) String() string {
	return MIME_Type_name[int(x)]
}

// Contact is Extensive User Info that can be passed
type Contact struct {
	IsPublic  bool
	Profile   *Profile
	General   *Contact_General
	Design    *Contact_Design
	Addresses map[string]*Contact_Address
	Socials   map[string]*Contact_Social
	Websites  map[string]*URLLink
}

// GetIsPublic gets the IsPublic of the Contact.
func (m *Contact) GetIsPublic() (x bool) {
	if m == nil {
		return x
	}
	return m.IsPublic
}

// GetProfile gets the Profile of the Contact.
func (m *Contact) GetProfile() (x *Profile) {
	if m == nil {
		return x
	}
	return m.Profile
}

// GetGeneral gets the General of the Contact.
func (m *Contact) GetGeneral() (x *Contact_General) {
	if m == nil {
		return x
	}
	return m.General
}

// GetDesign gets the Design of the Contact.
func (m *Contact) GetDesign() (x *Contact_Design) {
	if m == nil {
		return x
	}
	return m.Design
}

// GetAddresses gets the Addresses of the Contact.
func (m *Contact) GetAddresses() (x map[string]*Contact_Address) {
	if m == nil {
		return x
	}
	return m.Addresses
}

// GetSocials gets the Socials of the Contact.
func (m *Contact) GetSocials() (x map[string]*Contact_Social) {
	if m == nil {
		return x
	}
	return m.Socials
}

// GetWebsites gets the Websites of the Contact.
func (m *Contact) GetWebsites() (x map[string]*URLLink) {
	if m == nil {
		return x
	}
	return m.Websites
}

// MarshalToWriter marshals Contact to the provided writer.
func (m *Contact) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.IsPublic {
		writer.WriteBool(1, m.IsPublic)
	}

	if m.Profile != nil {
		writer.WriteMessage(2, func() {
			m.Profile.MarshalToWriter(writer)
		})
	}

	if m.General != nil {
		writer.WriteMessage(3, func() {
			m.General.MarshalToWriter(writer)
		})
	}

	if m.Design != nil {
		writer.WriteMessage(4, func() {
			m.Design.MarshalToWriter(writer)
		})
	}

	if len(m.Addresses) > 0 {
		for key, value := range m.Addresses {
			writer.WriteMessage(5, func() {
				writer.WriteString(1, key)
				writer.WriteMessage(2, func() {
					value.MarshalToWriter(writer)
				})
			})
		}
	}

	if len(m.Socials) > 0 {
		for key, value := range m.Socials {
			writer.WriteMessage(6, func() {
				writer.WriteString(1, key)
				writer.WriteMessage(2, func() {
					value.MarshalToWriter(writer)
				})
			})
		}
	}

	if len(m.Websites) > 0 {
		for key, value := range m.Websites {
			writer.WriteMessage(7, func() {
				writer.WriteString(1, key)
				writer.WriteMessage(2, func() {
					value.MarshalToWriter(writer)
				})
			})
		}
	}

	return
}

// Marshal marshals Contact to a slice of bytes.
func (m *Contact) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a Contact from the provided reader.
func (m *Contact) UnmarshalFromReader(reader jspb.Reader) *Contact {
	for reader.Next() {
		if m == nil {
			m = &Contact{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.IsPublic = reader.ReadBool()
		case 2:
			reader.ReadMessage(func() {
				m.Profile = m.Profile.UnmarshalFromReader(reader)
			})
		case 3:
			reader.ReadMessage(func() {
				m.General = m.General.UnmarshalFromReader(reader)
			})
		case 4:
			reader.ReadMessage(func() {
				m.Design = m.Design.UnmarshalFromReader(reader)
			})
		case 5:
			if m.Addresses == nil {
				m.Addresses = map[string]*Contact_Address{}
			}
			reader.ReadMessage(func() {
				var key string
				var value *Contact_Address
				for reader.Next() {
					switch reader.GetFieldNumber() {
					case 1:
						key = reader.ReadString()
					case 2:
						reader.ReadMessage(func() {
							value = new(Contact_Address).UnmarshalFromReader(reader)
						})
					}
					m.Addresses[key] = value
				}
			})
		case 6:
			if m.Socials == nil {
				m.Socials = map[string]*Contact_Social{}
			}
			reader.ReadMessage(func() {
				var key string
				var value *Contact_Social
				for reader.Next() {
					switch reader.GetFieldNumber() {
					case 1:
						key = reader.ReadString()
					case 2:
						reader.ReadMessage(func() {
							value = new(Contact_Social).UnmarshalFromReader(reader)
						})
					}
					m.Socials[key] = value
				}
			})
		case 7:
			if m.Websites == nil {
				m.Websites = map[string]*URLLink{}
			}
			reader.ReadMessage(func() {
				var key string
				var value *URLLink
				for reader.Next() {
					switch reader.GetFieldNumber() {
					case 1:
						key = reader.ReadString()
					case 2:
						reader.ReadMessage(func() {
							value = new(URLLink).UnmarshalFromReader(reader)
						})
					}
					m.Websites[key] = value
				}
			})
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a Contact from a slice of bytes.
func (m *Contact) Unmarshal(rawBytes []byte) (*Contact, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Address: Field for Contact field
type Contact_Address struct {
	IsPrimary   bool
	Label       string
	Street      string
	StreetTwo   string
	City        string
	State       string
	Zipcode     string
	Country     string
	CountryCode string
}

// GetIsPrimary gets the IsPrimary of the Contact_Address.
func (m *Contact_Address) GetIsPrimary() (x bool) {
	if m == nil {
		return x
	}
	return m.IsPrimary
}

// GetLabel gets the Label of the Contact_Address.
func (m *Contact_Address) GetLabel() (x string) {
	if m == nil {
		return x
	}
	return m.Label
}

// GetStreet gets the Street of the Contact_Address.
func (m *Contact_Address) GetStreet() (x string) {
	if m == nil {
		return x
	}
	return m.Street
}

// GetStreetTwo gets the StreetTwo of the Contact_Address.
func (m *Contact_Address) GetStreetTwo() (x string) {
	if m == nil {
		return x
	}
	return m.StreetTwo
}

// GetCity gets the City of the Contact_Address.
func (m *Contact_Address) GetCity() (x string) {
	if m == nil {
		return x
	}
	return m.City
}

// GetState gets the State of the Contact_Address.
func (m *Contact_Address) GetState() (x string) {
	if m == nil {
		return x
	}
	return m.State
}

// GetZipcode gets the Zipcode of the Contact_Address.
func (m *Contact_Address) GetZipcode() (x string) {
	if m == nil {
		return x
	}
	return m.Zipcode
}

// GetCountry gets the Country of the Contact_Address.
func (m *Contact_Address) GetCountry() (x string) {
	if m == nil {
		return x
	}
	return m.Country
}

// GetCountryCode gets the CountryCode of the Contact_Address.
func (m *Contact_Address) GetCountryCode() (x string) {
	if m == nil {
		return x
	}
	return m.CountryCode
}

// MarshalToWriter marshals Contact_Address to the provided writer.
func (m *Contact_Address) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.IsPrimary {
		writer.WriteBool(1, m.IsPrimary)
	}

	if len(m.Label) > 0 {
		writer.WriteString(2, m.Label)
	}

	if len(m.Street) > 0 {
		writer.WriteString(3, m.Street)
	}

	if len(m.StreetTwo) > 0 {
		writer.WriteString(4, m.StreetTwo)
	}

	if len(m.City) > 0 {
		writer.WriteString(5, m.City)
	}

	if len(m.State) > 0 {
		writer.WriteString(6, m.State)
	}

	if len(m.Zipcode) > 0 {
		writer.WriteString(7, m.Zipcode)
	}

	if len(m.Country) > 0 {
		writer.WriteString(8, m.Country)
	}

	if len(m.CountryCode) > 0 {
		writer.WriteString(9, m.CountryCode)
	}

	return
}

// Marshal marshals Contact_Address to a slice of bytes.
func (m *Contact_Address) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a Contact_Address from the provided reader.
func (m *Contact_Address) UnmarshalFromReader(reader jspb.Reader) *Contact_Address {
	for reader.Next() {
		if m == nil {
			m = &Contact_Address{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.IsPrimary = reader.ReadBool()
		case 2:
			m.Label = reader.ReadString()
		case 3:
			m.Street = reader.ReadString()
		case 4:
			m.StreetTwo = reader.ReadString()
		case 5:
			m.City = reader.ReadString()
		case 6:
			m.State = reader.ReadString()
		case 7:
			m.Zipcode = reader.ReadString()
		case 8:
			m.Country = reader.ReadString()
		case 9:
			m.CountryCode = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a Contact_Address from a slice of bytes.
func (m *Contact_Address) Unmarshal(rawBytes []byte) (*Contact_Address, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Design: Card Design Values
type Contact_Design struct {
	Card    int32
	Primary Contact_Design_Color
	Accent  Contact_Design_Color
}

// GetCard gets the Card of the Contact_Design.
func (m *Contact_Design) GetCard() (x int32) {
	if m == nil {
		return x
	}
	return m.Card
}

// GetPrimary gets the Primary of the Contact_Design.
func (m *Contact_Design) GetPrimary() (x Contact_Design_Color) {
	if m == nil {
		return x
	}
	return m.Primary
}

// GetAccent gets the Accent of the Contact_Design.
func (m *Contact_Design) GetAccent() (x Contact_Design_Color) {
	if m == nil {
		return x
	}
	return m.Accent
}

// MarshalToWriter marshals Contact_Design to the provided writer.
func (m *Contact_Design) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.Card != 0 {
		writer.WriteInt32(1, m.Card)
	}

	if int(m.Primary) != 0 {
		writer.WriteEnum(2, int(m.Primary))
	}

	if int(m.Accent) != 0 {
		writer.WriteEnum(3, int(m.Accent))
	}

	return
}

// Marshal marshals Contact_Design to a slice of bytes.
func (m *Contact_Design) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a Contact_Design from the provided reader.
func (m *Contact_Design) UnmarshalFromReader(reader jspb.Reader) *Contact_Design {
	for reader.Next() {
		if m == nil {
			m = &Contact_Design{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Card = reader.ReadInt32()
		case 2:
			m.Primary = Contact_Design_Color(reader.ReadEnum())
		case 3:
			m.Accent = Contact_Design_Color(reader.ReadEnum())
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a Contact_Design from a slice of bytes.
func (m *Contact_Design) Unmarshal(rawBytes []byte) (*Contact_Design, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Field : General Field for Contact field
type Contact_General struct {
	Bio    string
	SName  string
	Name   *Contact_General_Name
	Date   *Contact_General_Date
	Gender *Contact_General_Gender
	Phone  *Contact_General_Phone
	Email  *Contact_General_Email
	Title  *Contact_General_Title
}

// GetBio gets the Bio of the Contact_General.
func (m *Contact_General) GetBio() (x string) {
	if m == nil {
		return x
	}
	return m.Bio
}

// GetSName gets the SName of the Contact_General.
func (m *Contact_General) GetSName() (x string) {
	if m == nil {
		return x
	}
	return m.SName
}

// GetName gets the Name of the Contact_General.
func (m *Contact_General) GetName() (x *Contact_General_Name) {
	if m == nil {
		return x
	}
	return m.Name
}

// GetDate gets the Date of the Contact_General.
func (m *Contact_General) GetDate() (x *Contact_General_Date) {
	if m == nil {
		return x
	}
	return m.Date
}

// GetGender gets the Gender of the Contact_General.
func (m *Contact_General) GetGender() (x *Contact_General_Gender) {
	if m == nil {
		return x
	}
	return m.Gender
}

// GetPhone gets the Phone of the Contact_General.
func (m *Contact_General) GetPhone() (x *Contact_General_Phone) {
	if m == nil {
		return x
	}
	return m.Phone
}

// GetEmail gets the Email of the Contact_General.
func (m *Contact_General) GetEmail() (x *Contact_General_Email) {
	if m == nil {
		return x
	}
	return m.Email
}

// GetTitle gets the Title of the Contact_General.
func (m *Contact_General) GetTitle() (x *Contact_General_Title) {
	if m == nil {
		return x
	}
	return m.Title
}

// MarshalToWriter marshals Contact_General to the provided writer.
func (m *Contact_General) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Bio) > 0 {
		writer.WriteString(1, m.Bio)
	}

	if len(m.SName) > 0 {
		writer.WriteString(2, m.SName)
	}

	if m.Name != nil {
		writer.WriteMessage(3, func() {
			m.Name.MarshalToWriter(writer)
		})
	}

	if m.Date != nil {
		writer.WriteMessage(4, func() {
			m.Date.MarshalToWriter(writer)
		})
	}

	if m.Gender != nil {
		writer.WriteMessage(5, func() {
			m.Gender.MarshalToWriter(writer)
		})
	}

	if m.Phone != nil {
		writer.WriteMessage(6, func() {
			m.Phone.MarshalToWriter(writer)
		})
	}

	if m.Email != nil {
		writer.WriteMessage(7, func() {
			m.Email.MarshalToWriter(writer)
		})
	}

	if m.Title != nil {
		writer.WriteMessage(8, func() {
			m.Title.MarshalToWriter(writer)
		})
	}

	return
}

// Marshal marshals Contact_General to a slice of bytes.
func (m *Contact_General) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a Contact_General from the provided reader.
func (m *Contact_General) UnmarshalFromReader(reader jspb.Reader) *Contact_General {
	for reader.Next() {
		if m == nil {
			m = &Contact_General{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Bio = reader.ReadString()
		case 2:
			m.SName = reader.ReadString()
		case 3:
			reader.ReadMessage(func() {
				m.Name = m.Name.UnmarshalFromReader(reader)
			})
		case 4:
			reader.ReadMessage(func() {
				m.Date = m.Date.UnmarshalFromReader(reader)
			})
		case 5:
			reader.ReadMessage(func() {
				m.Gender = m.Gender.UnmarshalFromReader(reader)
			})
		case 6:
			reader.ReadMessage(func() {
				m.Phone = m.Phone.UnmarshalFromReader(reader)
			})
		case 7:
			reader.ReadMessage(func() {
				m.Email = m.Email.UnmarshalFromReader(reader)
			})
		case 8:
			reader.ReadMessage(func() {
				m.Title = m.Title.UnmarshalFromReader(reader)
			})
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a Contact_General from a slice of bytes.
func (m *Contact_General) Unmarshal(rawBytes []byte) (*Contact_General, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type Contact_General_Name struct {
	Prefix     string
	Suffix     string
	MiddleName string
	NickName   string
}

// GetPrefix gets the Prefix of the Contact_General_Name.
func (m *Contact_General_Name) GetPrefix() (x string) {
	if m == nil {
		return x
	}
	return m.Prefix
}

// GetSuffix gets the Suffix of the Contact_General_Name.
func (m *Contact_General_Name) GetSuffix() (x string) {
	if m == nil {
		return x
	}
	return m.Suffix
}

// GetMiddleName gets the MiddleName of the Contact_General_Name.
func (m *Contact_General_Name) GetMiddleName() (x string) {
	if m == nil {
		return x
	}
	return m.MiddleName
}

// GetNickName gets the NickName of the Contact_General_Name.
func (m *Contact_General_Name) GetNickName() (x string) {
	if m == nil {
		return x
	}
	return m.NickName
}

// MarshalToWriter marshals Contact_General_Name to the provided writer.
func (m *Contact_General_Name) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Prefix) > 0 {
		writer.WriteString(1, m.Prefix)
	}

	if len(m.Suffix) > 0 {
		writer.WriteString(2, m.Suffix)
	}

	if len(m.MiddleName) > 0 {
		writer.WriteString(3, m.MiddleName)
	}

	if len(m.NickName) > 0 {
		writer.WriteString(4, m.NickName)
	}

	return
}

// Marshal marshals Contact_General_Name to a slice of bytes.
func (m *Contact_General_Name) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a Contact_General_Name from the provided reader.
func (m *Contact_General_Name) UnmarshalFromReader(reader jspb.Reader) *Contact_General_Name {
	for reader.Next() {
		if m == nil {
			m = &Contact_General_Name{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Prefix = reader.ReadString()
		case 2:
			m.Suffix = reader.ReadString()
		case 3:
			m.MiddleName = reader.ReadString()
		case 4:
			m.NickName = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a Contact_General_Name from a slice of bytes.
func (m *Contact_General_Name) Unmarshal(rawBytes []byte) (*Contact_General_Name, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Date Field - MillisecondsFromEpoch
type Contact_General_Date struct {
	Birthday int32
	Dates    map[string]int32
}

// GetBirthday gets the Birthday of the Contact_General_Date.
func (m *Contact_General_Date) GetBirthday() (x int32) {
	if m == nil {
		return x
	}
	return m.Birthday
}

// GetDates gets the Dates of the Contact_General_Date.
func (m *Contact_General_Date) GetDates() (x map[string]int32) {
	if m == nil {
		return x
	}
	return m.Dates
}

// MarshalToWriter marshals Contact_General_Date to the provided writer.
func (m *Contact_General_Date) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.Birthday != 0 {
		writer.WriteInt32(1, m.Birthday)
	}

	if len(m.Dates) > 0 {
		for key, value := range m.Dates {
			writer.WriteMessage(2, func() {
				writer.WriteString(1, key)
				writer.WriteInt32(2, value)
			})
		}
	}

	return
}

// Marshal marshals Contact_General_Date to a slice of bytes.
func (m *Contact_General_Date) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a Contact_General_Date from the provided reader.
func (m *Contact_General_Date) UnmarshalFromReader(reader jspb.Reader) *Contact_General_Date {
	for reader.Next() {
		if m == nil {
			m = &Contact_General_Date{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Birthday = reader.ReadInt32()
		case 2:
			if m.Dates == nil {
				m.Dates = map[string]int32{}
			}
			reader.ReadMessage(func() {
				var key string
				var value int32
				for reader.Next() {
					switch reader.GetFieldNumber() {
					case 1:
						key = reader.ReadString()
					case 2:
						value = reader.ReadInt32()
					}
					m.Dates[key] = value
				}
			})
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a Contact_General_Date from a slice of bytes.
func (m *Contact_General_Date) Unmarshal(rawBytes []byte) (*Contact_General_Date, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Gender
type Contact_General_Gender struct {
	Value Contact_General_Gender_Options
}

// GetValue gets the Value of the Contact_General_Gender.
func (m *Contact_General_Gender) GetValue() (x Contact_General_Gender_Options) {
	if m == nil {
		return x
	}
	return m.Value
}

// MarshalToWriter marshals Contact_General_Gender to the provided writer.
func (m *Contact_General_Gender) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if int(m.Value) != 0 {
		writer.WriteEnum(1, int(m.Value))
	}

	return
}

// Marshal marshals Contact_General_Gender to a slice of bytes.
func (m *Contact_General_Gender) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a Contact_General_Gender from the provided reader.
func (m *Contact_General_Gender) UnmarshalFromReader(reader jspb.Reader) *Contact_General_Gender {
	for reader.Next() {
		if m == nil {
			m = &Contact_General_Gender{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Value = Contact_General_Gender_Options(reader.ReadEnum())
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a Contact_General_Gender from a slice of bytes.
func (m *Contact_General_Gender) Unmarshal(rawBytes []byte) (*Contact_General_Gender, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Phone Numbers
type Contact_General_Phone struct {
	Primary string
	Numbers map[string]string
}

// GetPrimary gets the Primary of the Contact_General_Phone.
func (m *Contact_General_Phone) GetPrimary() (x string) {
	if m == nil {
		return x
	}
	return m.Primary
}

// GetNumbers gets the Numbers of the Contact_General_Phone.
func (m *Contact_General_Phone) GetNumbers() (x map[string]string) {
	if m == nil {
		return x
	}
	return m.Numbers
}

// MarshalToWriter marshals Contact_General_Phone to the provided writer.
func (m *Contact_General_Phone) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Primary) > 0 {
		writer.WriteString(1, m.Primary)
	}

	if len(m.Numbers) > 0 {
		for key, value := range m.Numbers {
			writer.WriteMessage(2, func() {
				writer.WriteString(1, key)
				writer.WriteString(2, value)
			})
		}
	}

	return
}

// Marshal marshals Contact_General_Phone to a slice of bytes.
func (m *Contact_General_Phone) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a Contact_General_Phone from the provided reader.
func (m *Contact_General_Phone) UnmarshalFromReader(reader jspb.Reader) *Contact_General_Phone {
	for reader.Next() {
		if m == nil {
			m = &Contact_General_Phone{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Primary = reader.ReadString()
		case 2:
			if m.Numbers == nil {
				m.Numbers = map[string]string{}
			}
			reader.ReadMessage(func() {
				var key string
				var value string
				for reader.Next() {
					switch reader.GetFieldNumber() {
					case 1:
						key = reader.ReadString()
					case 2:
						value = reader.ReadString()
					}
					m.Numbers[key] = value
				}
			})
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a Contact_General_Phone from a slice of bytes.
func (m *Contact_General_Phone) Unmarshal(rawBytes []byte) (*Contact_General_Phone, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Email Addresses
type Contact_General_Email struct {
	Primary   *Contact_General_Email_Address
	Addresses map[string]*Contact_General_Email_Address
}

// GetPrimary gets the Primary of the Contact_General_Email.
func (m *Contact_General_Email) GetPrimary() (x *Contact_General_Email_Address) {
	if m == nil {
		return x
	}
	return m.Primary
}

// GetAddresses gets the Addresses of the Contact_General_Email.
func (m *Contact_General_Email) GetAddresses() (x map[string]*Contact_General_Email_Address) {
	if m == nil {
		return x
	}
	return m.Addresses
}

// MarshalToWriter marshals Contact_General_Email to the provided writer.
func (m *Contact_General_Email) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.Primary != nil {
		writer.WriteMessage(1, func() {
			m.Primary.MarshalToWriter(writer)
		})
	}

	if len(m.Addresses) > 0 {
		for key, value := range m.Addresses {
			writer.WriteMessage(2, func() {
				writer.WriteString(1, key)
				writer.WriteMessage(2, func() {
					value.MarshalToWriter(writer)
				})
			})
		}
	}

	return
}

// Marshal marshals Contact_General_Email to a slice of bytes.
func (m *Contact_General_Email) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a Contact_General_Email from the provided reader.
func (m *Contact_General_Email) UnmarshalFromReader(reader jspb.Reader) *Contact_General_Email {
	for reader.Next() {
		if m == nil {
			m = &Contact_General_Email{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			reader.ReadMessage(func() {
				m.Primary = m.Primary.UnmarshalFromReader(reader)
			})
		case 2:
			if m.Addresses == nil {
				m.Addresses = map[string]*Contact_General_Email_Address{}
			}
			reader.ReadMessage(func() {
				var key string
				var value *Contact_General_Email_Address
				for reader.Next() {
					switch reader.GetFieldNumber() {
					case 1:
						key = reader.ReadString()
					case 2:
						reader.ReadMessage(func() {
							value = new(Contact_General_Email_Address).UnmarshalFromReader(reader)
						})
					}
					m.Addresses[key] = value
				}
			})
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a Contact_General_Email from a slice of bytes.
func (m *Contact_General_Email) Unmarshal(rawBytes []byte) (*Contact_General_Email, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Email Address
type Contact_General_Email_Address struct {
	Label    string
	Value    string
	Host     string
	Username string
}

// GetLabel gets the Label of the Contact_General_Email_Address.
func (m *Contact_General_Email_Address) GetLabel() (x string) {
	if m == nil {
		return x
	}
	return m.Label
}

// GetValue gets the Value of the Contact_General_Email_Address.
func (m *Contact_General_Email_Address) GetValue() (x string) {
	if m == nil {
		return x
	}
	return m.Value
}

// GetHost gets the Host of the Contact_General_Email_Address.
func (m *Contact_General_Email_Address) GetHost() (x string) {
	if m == nil {
		return x
	}
	return m.Host
}

// GetUsername gets the Username of the Contact_General_Email_Address.
func (m *Contact_General_Email_Address) GetUsername() (x string) {
	if m == nil {
		return x
	}
	return m.Username
}

// MarshalToWriter marshals Contact_General_Email_Address to the provided writer.
func (m *Contact_General_Email_Address) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Label) > 0 {
		writer.WriteString(1, m.Label)
	}

	if len(m.Value) > 0 {
		writer.WriteString(2, m.Value)
	}

	if len(m.Host) > 0 {
		writer.WriteString(3, m.Host)
	}

	if len(m.Username) > 0 {
		writer.WriteString(4, m.Username)
	}

	return
}

// Marshal marshals Contact_General_Email_Address to a slice of bytes.
func (m *Contact_General_Email_Address) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a Contact_General_Email_Address from the provided reader.
func (m *Contact_General_Email_Address) UnmarshalFromReader(reader jspb.Reader) *Contact_General_Email_Address {
	for reader.Next() {
		if m == nil {
			m = &Contact_General_Email_Address{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Label = reader.ReadString()
		case 2:
			m.Value = reader.ReadString()
		case 3:
			m.Host = reader.ReadString()
		case 4:
			m.Username = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a Contact_General_Email_Address from a slice of bytes.
func (m *Contact_General_Email_Address) Unmarshal(rawBytes []byte) (*Contact_General_Email_Address, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Employment Info
type Contact_General_Title struct {
	Company  string
	Position string
}

// GetCompany gets the Company of the Contact_General_Title.
func (m *Contact_General_Title) GetCompany() (x string) {
	if m == nil {
		return x
	}
	return m.Company
}

// GetPosition gets the Position of the Contact_General_Title.
func (m *Contact_General_Title) GetPosition() (x string) {
	if m == nil {
		return x
	}
	return m.Position
}

// MarshalToWriter marshals Contact_General_Title to the provided writer.
func (m *Contact_General_Title) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Company) > 0 {
		writer.WriteString(1, m.Company)
	}

	if len(m.Position) > 0 {
		writer.WriteString(2, m.Position)
	}

	return
}

// Marshal marshals Contact_General_Title to a slice of bytes.
func (m *Contact_General_Title) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a Contact_General_Title from the provided reader.
func (m *Contact_General_Title) UnmarshalFromReader(reader jspb.Reader) *Contact_General_Title {
	for reader.Next() {
		if m == nil {
			m = &Contact_General_Title{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Company = reader.ReadString()
		case 2:
			m.Position = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a Contact_General_Title from a slice of bytes.
func (m *Contact_General_Title) Unmarshal(rawBytes []byte) (*Contact_General_Title, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Social: Field provides Display Information and Provider Information
type Contact_Social struct {
	// Properties
	IsPrimary  bool
	Name       string
	Username   string
	Picture    string
	Visibility Contact_Social_Visibility
	// Display Tile Type
	//
	// Types that are valid to be assigned to Tile:
	//	*Contact_Social_Icon_
	//	*Contact_Social_Feed_
	//	*Contact_Social_Playlist_
	//	*Contact_Social_Post_
	Tile isContact_Social_Tile
	// Provider for Social Field
	//
	// Types that are valid to be assigned to Provider:
	//	*Contact_Social_Media_
	//	*Contact_Social_Music_
	//	*Contact_Social_Payment_
	Provider isContact_Social_Provider
}

// isContact_Social_Tile is used to distinguish types assignable to Tile
type isContact_Social_Tile interface{ isContact_Social_Tile() }

// isContact_Social_Provider is used to distinguish types assignable to Provider
type isContact_Social_Provider interface{ isContact_Social_Provider() }

// Contact_Social_Icon_ is assignable to Tile
type Contact_Social_Icon_ struct {
	Icon *Contact_Social_Icon
}

// Contact_Social_Feed_ is assignable to Tile
type Contact_Social_Feed_ struct {
	Feed *Contact_Social_Feed
}

// Contact_Social_Playlist_ is assignable to Tile
type Contact_Social_Playlist_ struct {
	Playlist *Contact_Social_Playlist
}

// Contact_Social_Post_ is assignable to Tile
type Contact_Social_Post_ struct {
	Post *Contact_Social_Post
}

// Contact_Social_Media_ is assignable to Provider
type Contact_Social_Media_ struct {
	Media Contact_Social_Media
}

// Contact_Social_Music_ is assignable to Provider
type Contact_Social_Music_ struct {
	Music Contact_Social_Music
}

// Contact_Social_Payment_ is assignable to Provider
type Contact_Social_Payment_ struct {
	Payment Contact_Social_Payment
}

func (*Contact_Social_Icon_) isContact_Social_Tile()        {}
func (*Contact_Social_Feed_) isContact_Social_Tile()        {}
func (*Contact_Social_Playlist_) isContact_Social_Tile()    {}
func (*Contact_Social_Post_) isContact_Social_Tile()        {}
func (*Contact_Social_Media_) isContact_Social_Provider()   {}
func (*Contact_Social_Music_) isContact_Social_Provider()   {}
func (*Contact_Social_Payment_) isContact_Social_Provider() {}

// GetTile gets the Tile of the Contact_Social.
func (m *Contact_Social) GetTile() (x isContact_Social_Tile) {
	if m == nil {
		return x
	}
	return m.Tile
}

// GetProvider gets the Provider of the Contact_Social.
func (m *Contact_Social) GetProvider() (x isContact_Social_Provider) {
	if m == nil {
		return x
	}
	return m.Provider
}

// GetIsPrimary gets the IsPrimary of the Contact_Social.
func (m *Contact_Social) GetIsPrimary() (x bool) {
	if m == nil {
		return x
	}
	return m.IsPrimary
}

// GetName gets the Name of the Contact_Social.
func (m *Contact_Social) GetName() (x string) {
	if m == nil {
		return x
	}
	return m.Name
}

// GetUsername gets the Username of the Contact_Social.
func (m *Contact_Social) GetUsername() (x string) {
	if m == nil {
		return x
	}
	return m.Username
}

// GetPicture gets the Picture of the Contact_Social.
func (m *Contact_Social) GetPicture() (x string) {
	if m == nil {
		return x
	}
	return m.Picture
}

// GetVisibility gets the Visibility of the Contact_Social.
func (m *Contact_Social) GetVisibility() (x Contact_Social_Visibility) {
	if m == nil {
		return x
	}
	return m.Visibility
}

// GetIcon gets the Icon of the Contact_Social.
func (m *Contact_Social) GetIcon() (x *Contact_Social_Icon) {
	if v, ok := m.GetTile().(*Contact_Social_Icon_); ok {
		return v.Icon
	}
	return x
}

// GetFeed gets the Feed of the Contact_Social.
func (m *Contact_Social) GetFeed() (x *Contact_Social_Feed) {
	if v, ok := m.GetTile().(*Contact_Social_Feed_); ok {
		return v.Feed
	}
	return x
}

// GetPlaylist gets the Playlist of the Contact_Social.
func (m *Contact_Social) GetPlaylist() (x *Contact_Social_Playlist) {
	if v, ok := m.GetTile().(*Contact_Social_Playlist_); ok {
		return v.Playlist
	}
	return x
}

// GetPost gets the Post of the Contact_Social.
func (m *Contact_Social) GetPost() (x *Contact_Social_Post) {
	if v, ok := m.GetTile().(*Contact_Social_Post_); ok {
		return v.Post
	}
	return x
}

// GetMedia gets the Media of the Contact_Social.
func (m *Contact_Social) GetMedia() (x Contact_Social_Media) {
	if v, ok := m.GetProvider().(*Contact_Social_Media_); ok {
		return v.Media
	}
	return x
}

// GetMusic gets the Music of the Contact_Social.
func (m *Contact_Social) GetMusic() (x Contact_Social_Music) {
	if v, ok := m.GetProvider().(*Contact_Social_Music_); ok {
		return v.Music
	}
	return x
}

// GetPayment gets the Payment of the Contact_Social.
func (m *Contact_Social) GetPayment() (x Contact_Social_Payment) {
	if v, ok := m.GetProvider().(*Contact_Social_Payment_); ok {
		return v.Payment
	}
	return x
}

// MarshalToWriter marshals Contact_Social to the provided writer.
func (m *Contact_Social) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	switch t := m.Tile.(type) {
	case *Contact_Social_Icon_:
		if t.Icon != nil {
			writer.WriteMessage(6, func() {
				t.Icon.MarshalToWriter(writer)
			})
		}
	case *Contact_Social_Feed_:
		if t.Feed != nil {
			writer.WriteMessage(7, func() {
				t.Feed.MarshalToWriter(writer)
			})
		}
	case *Contact_Social_Playlist_:
		if t.Playlist != nil {
			writer.WriteMessage(8, func() {
				t.Playlist.MarshalToWriter(writer)
			})
		}
	case *Contact_Social_Post_:
		if t.Post != nil {
			writer.WriteMessage(9, func() {
				t.Post.MarshalToWriter(writer)
			})
		}
	}

	switch t := m.Provider.(type) {
	case *Contact_Social_Media_:
		if int(t.Media) != 0 {
			writer.WriteEnum(10, int(t.Media))
		}
	case *Contact_Social_Music_:
		if int(t.Music) != 0 {
			writer.WriteEnum(11, int(t.Music))
		}
	case *Contact_Social_Payment_:
		if int(t.Payment) != 0 {
			writer.WriteEnum(12, int(t.Payment))
		}
	}

	if m.IsPrimary {
		writer.WriteBool(1, m.IsPrimary)
	}

	if len(m.Name) > 0 {
		writer.WriteString(2, m.Name)
	}

	if len(m.Username) > 0 {
		writer.WriteString(3, m.Username)
	}

	if len(m.Picture) > 0 {
		writer.WriteString(4, m.Picture)
	}

	if int(m.Visibility) != 0 {
		writer.WriteEnum(5, int(m.Visibility))
	}

	return
}

// Marshal marshals Contact_Social to a slice of bytes.
func (m *Contact_Social) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a Contact_Social from the provided reader.
func (m *Contact_Social) UnmarshalFromReader(reader jspb.Reader) *Contact_Social {
	for reader.Next() {
		if m == nil {
			m = &Contact_Social{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.IsPrimary = reader.ReadBool()
		case 2:
			m.Name = reader.ReadString()
		case 3:
			m.Username = reader.ReadString()
		case 4:
			m.Picture = reader.ReadString()
		case 5:
			m.Visibility = Contact_Social_Visibility(reader.ReadEnum())
		case 6:
			reader.ReadMessage(func() {
				m.Tile = &Contact_Social_Icon_{
					Icon: new(Contact_Social_Icon).UnmarshalFromReader(reader),
				}
			})
		case 7:
			reader.ReadMessage(func() {
				m.Tile = &Contact_Social_Feed_{
					Feed: new(Contact_Social_Feed).UnmarshalFromReader(reader),
				}
			})
		case 8:
			reader.ReadMessage(func() {
				m.Tile = &Contact_Social_Playlist_{
					Playlist: new(Contact_Social_Playlist).UnmarshalFromReader(reader),
				}
			})
		case 9:
			reader.ReadMessage(func() {
				m.Tile = &Contact_Social_Post_{
					Post: new(Contact_Social_Post).UnmarshalFromReader(reader),
				}
			})
		case 10:
			m.Provider = &Contact_Social_Media_{
				Media: Contact_Social_Media(reader.ReadEnum()),
			}
		case 11:
			m.Provider = &Contact_Social_Music_{
				Music: Contact_Social_Music(reader.ReadEnum()),
			}
		case 12:
			m.Provider = &Contact_Social_Payment_{
				Payment: Contact_Social_Payment(reader.ReadEnum()),
			}
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a Contact_Social from a slice of bytes.
func (m *Contact_Social) Unmarshal(rawBytes []byte) (*Contact_Social, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Simple Icon Button
type Contact_Social_Icon struct {
	Page  int32
	Index int32
	Link  *URLLink
}

// GetPage gets the Page of the Contact_Social_Icon.
func (m *Contact_Social_Icon) GetPage() (x int32) {
	if m == nil {
		return x
	}
	return m.Page
}

// GetIndex gets the Index of the Contact_Social_Icon.
func (m *Contact_Social_Icon) GetIndex() (x int32) {
	if m == nil {
		return x
	}
	return m.Index
}

// GetLink gets the Link of the Contact_Social_Icon.
func (m *Contact_Social_Icon) GetLink() (x *URLLink) {
	if m == nil {
		return x
	}
	return m.Link
}

// MarshalToWriter marshals Contact_Social_Icon to the provided writer.
func (m *Contact_Social_Icon) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.Page != 0 {
		writer.WriteInt32(1, m.Page)
	}

	if m.Index != 0 {
		writer.WriteInt32(2, m.Index)
	}

	if m.Link != nil {
		writer.WriteMessage(3, func() {
			m.Link.MarshalToWriter(writer)
		})
	}

	return
}

// Marshal marshals Contact_Social_Icon to a slice of bytes.
func (m *Contact_Social_Icon) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a Contact_Social_Icon from the provided reader.
func (m *Contact_Social_Icon) UnmarshalFromReader(reader jspb.Reader) *Contact_Social_Icon {
	for reader.Next() {
		if m == nil {
			m = &Contact_Social_Icon{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Page = reader.ReadInt32()
		case 2:
			m.Index = reader.ReadInt32()
		case 3:
			reader.ReadMessage(func() {
				m.Link = m.Link.UnmarshalFromReader(reader)
			})
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a Contact_Social_Icon from a slice of bytes.
func (m *Contact_Social_Icon) Unmarshal(rawBytes []byte) (*Contact_Social_Icon, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Feed Display
type Contact_Social_Feed struct {
	Page  int32
	Index int32
	Link  *URLLink
}

// GetPage gets the Page of the Contact_Social_Feed.
func (m *Contact_Social_Feed) GetPage() (x int32) {
	if m == nil {
		return x
	}
	return m.Page
}

// GetIndex gets the Index of the Contact_Social_Feed.
func (m *Contact_Social_Feed) GetIndex() (x int32) {
	if m == nil {
		return x
	}
	return m.Index
}

// GetLink gets the Link of the Contact_Social_Feed.
func (m *Contact_Social_Feed) GetLink() (x *URLLink) {
	if m == nil {
		return x
	}
	return m.Link
}

// MarshalToWriter marshals Contact_Social_Feed to the provided writer.
func (m *Contact_Social_Feed) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.Page != 0 {
		writer.WriteInt32(1, m.Page)
	}

	if m.Index != 0 {
		writer.WriteInt32(2, m.Index)
	}

	if m.Link != nil {
		writer.WriteMessage(3, func() {
			m.Link.MarshalToWriter(writer)
		})
	}

	return
}

// Marshal marshals Contact_Social_Feed to a slice of bytes.
func (m *Contact_Social_Feed) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a Contact_Social_Feed from the provided reader.
func (m *Contact_Social_Feed) UnmarshalFromReader(reader jspb.Reader) *Contact_Social_Feed {
	for reader.Next() {
		if m == nil {
			m = &Contact_Social_Feed{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Page = reader.ReadInt32()
		case 2:
			m.Index = reader.ReadInt32()
		case 3:
			reader.ReadMessage(func() {
				m.Link = m.Link.UnmarshalFromReader(reader)
			})
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a Contact_Social_Feed from a slice of bytes.
func (m *Contact_Social_Feed) Unmarshal(rawBytes []byte) (*Contact_Social_Feed, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Playlist Display
type Contact_Social_Playlist struct {
	Page  int32
	Index int32
	Link  *URLLink
}

// GetPage gets the Page of the Contact_Social_Playlist.
func (m *Contact_Social_Playlist) GetPage() (x int32) {
	if m == nil {
		return x
	}
	return m.Page
}

// GetIndex gets the Index of the Contact_Social_Playlist.
func (m *Contact_Social_Playlist) GetIndex() (x int32) {
	if m == nil {
		return x
	}
	return m.Index
}

// GetLink gets the Link of the Contact_Social_Playlist.
func (m *Contact_Social_Playlist) GetLink() (x *URLLink) {
	if m == nil {
		return x
	}
	return m.Link
}

// MarshalToWriter marshals Contact_Social_Playlist to the provided writer.
func (m *Contact_Social_Playlist) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.Page != 0 {
		writer.WriteInt32(1, m.Page)
	}

	if m.Index != 0 {
		writer.WriteInt32(2, m.Index)
	}

	if m.Link != nil {
		writer.WriteMessage(3, func() {
			m.Link.MarshalToWriter(writer)
		})
	}

	return
}

// Marshal marshals Contact_Social_Playlist to a slice of bytes.
func (m *Contact_Social_Playlist) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a Contact_Social_Playlist from the provided reader.
func (m *Contact_Social_Playlist) UnmarshalFromReader(reader jspb.Reader) *Contact_Social_Playlist {
	for reader.Next() {
		if m == nil {
			m = &Contact_Social_Playlist{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Page = reader.ReadInt32()
		case 2:
			m.Index = reader.ReadInt32()
		case 3:
			reader.ReadMessage(func() {
				m.Link = m.Link.UnmarshalFromReader(reader)
			})
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a Contact_Social_Playlist from a slice of bytes.
func (m *Contact_Social_Playlist) Unmarshal(rawBytes []byte) (*Contact_Social_Playlist, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Post Display
type Contact_Social_Post struct {
	Page  int32
	Index int32
	Link  *URLLink
}

// GetPage gets the Page of the Contact_Social_Post.
func (m *Contact_Social_Post) GetPage() (x int32) {
	if m == nil {
		return x
	}
	return m.Page
}

// GetIndex gets the Index of the Contact_Social_Post.
func (m *Contact_Social_Post) GetIndex() (x int32) {
	if m == nil {
		return x
	}
	return m.Index
}

// GetLink gets the Link of the Contact_Social_Post.
func (m *Contact_Social_Post) GetLink() (x *URLLink) {
	if m == nil {
		return x
	}
	return m.Link
}

// MarshalToWriter marshals Contact_Social_Post to the provided writer.
func (m *Contact_Social_Post) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.Page != 0 {
		writer.WriteInt32(1, m.Page)
	}

	if m.Index != 0 {
		writer.WriteInt32(2, m.Index)
	}

	if m.Link != nil {
		writer.WriteMessage(3, func() {
			m.Link.MarshalToWriter(writer)
		})
	}

	return
}

// Marshal marshals Contact_Social_Post to a slice of bytes.
func (m *Contact_Social_Post) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a Contact_Social_Post from the provided reader.
func (m *Contact_Social_Post) UnmarshalFromReader(reader jspb.Reader) *Contact_Social_Post {
	for reader.Next() {
		if m == nil {
			m = &Contact_Social_Post{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Page = reader.ReadInt32()
		case 2:
			m.Index = reader.ReadInt32()
		case 3:
			reader.ReadMessage(func() {
				m.Link = m.Link.UnmarshalFromReader(reader)
			})
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a Contact_Social_Post from a slice of bytes.
func (m *Contact_Social_Post) Unmarshal(rawBytes []byte) (*Contact_Social_Post, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Standard MIME with Additional Extensions
type MIME struct {
	Type    MIME_Type
	Subtype string
	Value   string
}

// GetType gets the Type of the MIME.
func (m *MIME) GetType() (x MIME_Type) {
	if m == nil {
		return x
	}
	return m.Type
}

// GetSubtype gets the Subtype of the MIME.
func (m *MIME) GetSubtype() (x string) {
	if m == nil {
		return x
	}
	return m.Subtype
}

// GetValue gets the Value of the MIME.
func (m *MIME) GetValue() (x string) {
	if m == nil {
		return x
	}
	return m.Value
}

// MarshalToWriter marshals MIME to the provided writer.
func (m *MIME) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if int(m.Type) != 0 {
		writer.WriteEnum(1, int(m.Type))
	}

	if len(m.Subtype) > 0 {
		writer.WriteString(2, m.Subtype)
	}

	if len(m.Value) > 0 {
		writer.WriteString(3, m.Value)
	}

	return
}

// Marshal marshals MIME to a slice of bytes.
func (m *MIME) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a MIME from the provided reader.
func (m *MIME) UnmarshalFromReader(reader jspb.Reader) *MIME {
	for reader.Next() {
		if m == nil {
			m = &MIME{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Type = MIME_Type(reader.ReadEnum())
		case 2:
			m.Subtype = reader.ReadString()
		case 3:
			m.Value = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a MIME from a slice of bytes.
func (m *MIME) Unmarshal(rawBytes []byte) (*MIME, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// For Transfer File Payload
type SFile struct {
	// Payload of File
	Payload Payload
	// Total Transfer Count
	Count int32
	// Total Transfer Size
	Size int32
	// List of Files as Metadata
	Items []*SFile_Item
}

// GetPayload gets the Payload of the SFile.
func (m *SFile) GetPayload() (x Payload) {
	if m == nil {
		return x
	}
	return m.Payload
}

// GetCount gets the Count of the SFile.
func (m *SFile) GetCount() (x int32) {
	if m == nil {
		return x
	}
	return m.Count
}

// GetSize gets the Size of the SFile.
func (m *SFile) GetSize() (x int32) {
	if m == nil {
		return x
	}
	return m.Size
}

// GetItems gets the Items of the SFile.
func (m *SFile) GetItems() (x []*SFile_Item) {
	if m == nil {
		return x
	}
	return m.Items
}

// MarshalToWriter marshals SFile to the provided writer.
func (m *SFile) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if int(m.Payload) != 0 {
		writer.WriteEnum(1, int(m.Payload))
	}

	if m.Count != 0 {
		writer.WriteInt32(2, m.Count)
	}

	if m.Size != 0 {
		writer.WriteInt32(3, m.Size)
	}

	for _, msg := range m.Items {
		writer.WriteMessage(4, func() {
			msg.MarshalToWriter(writer)
		})
	}

	return
}

// Marshal marshals SFile to a slice of bytes.
func (m *SFile) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a SFile from the provided reader.
func (m *SFile) UnmarshalFromReader(reader jspb.Reader) *SFile {
	for reader.Next() {
		if m == nil {
			m = &SFile{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Payload = Payload(reader.ReadEnum())
		case 2:
			m.Count = reader.ReadInt32()
		case 3:
			m.Size = reader.ReadInt32()
		case 4:
			reader.ReadMessage(func() {
				m.Items = append(m.Items, new(SFile_Item).UnmarshalFromReader(reader))
			})
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a SFile from a slice of bytes.
func (m *SFile) Unmarshal(rawBytes []byte) (*SFile, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// For Received Transfer File Information
type SFile_Item struct {
	Id   string
	Name string
	Path string
	Size int32
	Mime *MIME
	// Thumbnail Preview of File
	//
	// Types that are valid to be assigned to Thumbnail:
	//	*SFile_Item_ThumbBuffer
	//	*SFile_Item_ThumbPath
	Thumbnail  isSFile_Item_Thumbnail
	Properties *SFile_Item_Properties
}

// isSFile_Item_Thumbnail is used to distinguish types assignable to Thumbnail
type isSFile_Item_Thumbnail interface{ isSFile_Item_Thumbnail() }

// SFile_Item_ThumbBuffer is assignable to Thumbnail
type SFile_Item_ThumbBuffer struct {
	ThumbBuffer []byte
}

// SFile_Item_ThumbPath is assignable to Thumbnail
type SFile_Item_ThumbPath struct {
	ThumbPath string
}

func (*SFile_Item_ThumbBuffer) isSFile_Item_Thumbnail() {}
func (*SFile_Item_ThumbPath) isSFile_Item_Thumbnail()   {}

// GetThumbnail gets the Thumbnail of the SFile_Item.
func (m *SFile_Item) GetThumbnail() (x isSFile_Item_Thumbnail) {
	if m == nil {
		return x
	}
	return m.Thumbnail
}

// GetId gets the Id of the SFile_Item.
func (m *SFile_Item) GetId() (x string) {
	if m == nil {
		return x
	}
	return m.Id
}

// GetName gets the Name of the SFile_Item.
func (m *SFile_Item) GetName() (x string) {
	if m == nil {
		return x
	}
	return m.Name
}

// GetPath gets the Path of the SFile_Item.
func (m *SFile_Item) GetPath() (x string) {
	if m == nil {
		return x
	}
	return m.Path
}

// GetSize gets the Size of the SFile_Item.
func (m *SFile_Item) GetSize() (x int32) {
	if m == nil {
		return x
	}
	return m.Size
}

// GetMime gets the Mime of the SFile_Item.
func (m *SFile_Item) GetMime() (x *MIME) {
	if m == nil {
		return x
	}
	return m.Mime
}

// GetThumbBuffer gets the ThumbBuffer of the SFile_Item.
func (m *SFile_Item) GetThumbBuffer() (x []byte) {
	if v, ok := m.GetThumbnail().(*SFile_Item_ThumbBuffer); ok {
		return v.ThumbBuffer
	}
	return x
}

// GetThumbPath gets the ThumbPath of the SFile_Item.
func (m *SFile_Item) GetThumbPath() (x string) {
	if v, ok := m.GetThumbnail().(*SFile_Item_ThumbPath); ok {
		return v.ThumbPath
	}
	return x
}

// GetProperties gets the Properties of the SFile_Item.
func (m *SFile_Item) GetProperties() (x *SFile_Item_Properties) {
	if m == nil {
		return x
	}
	return m.Properties
}

// MarshalToWriter marshals SFile_Item to the provided writer.
func (m *SFile_Item) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	switch t := m.Thumbnail.(type) {
	case *SFile_Item_ThumbBuffer:
		if len(t.ThumbBuffer) > 0 {
			writer.WriteBytes(6, t.ThumbBuffer)
		}
	case *SFile_Item_ThumbPath:
		if len(t.ThumbPath) > 0 {
			writer.WriteString(7, t.ThumbPath)
		}
	}

	if len(m.Id) > 0 {
		writer.WriteString(1, m.Id)
	}

	if len(m.Name) > 0 {
		writer.WriteString(2, m.Name)
	}

	if len(m.Path) > 0 {
		writer.WriteString(3, m.Path)
	}

	if m.Size != 0 {
		writer.WriteInt32(4, m.Size)
	}

	if m.Mime != nil {
		writer.WriteMessage(5, func() {
			m.Mime.MarshalToWriter(writer)
		})
	}

	if m.Properties != nil {
		writer.WriteMessage(8, func() {
			m.Properties.MarshalToWriter(writer)
		})
	}

	return
}

// Marshal marshals SFile_Item to a slice of bytes.
func (m *SFile_Item) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a SFile_Item from the provided reader.
func (m *SFile_Item) UnmarshalFromReader(reader jspb.Reader) *SFile_Item {
	for reader.Next() {
		if m == nil {
			m = &SFile_Item{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Id = reader.ReadString()
		case 2:
			m.Name = reader.ReadString()
		case 3:
			m.Path = reader.ReadString()
		case 4:
			m.Size = reader.ReadInt32()
		case 5:
			reader.ReadMessage(func() {
				m.Mime = m.Mime.UnmarshalFromReader(reader)
			})
		case 6:
			m.Thumbnail = &SFile_Item_ThumbBuffer{
				ThumbBuffer: reader.ReadBytes(),
			}
		case 7:
			m.Thumbnail = &SFile_Item_ThumbPath{
				ThumbPath: reader.ReadString(),
			}
		case 8:
			reader.ReadMessage(func() {
				m.Properties = m.Properties.UnmarshalFromReader(reader)
			})
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a SFile_Item from a slice of bytes.
func (m *SFile_Item) Unmarshal(rawBytes []byte) (*SFile_Item, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type SFile_Item_Properties struct {
	IsAudio      bool
	IsImage      bool
	IsVideo      bool
	HasThumbnail bool
	Width        int32
	Height       int32
	Duration     int32
}

// GetIsAudio gets the IsAudio of the SFile_Item_Properties.
func (m *SFile_Item_Properties) GetIsAudio() (x bool) {
	if m == nil {
		return x
	}
	return m.IsAudio
}

// GetIsImage gets the IsImage of the SFile_Item_Properties.
func (m *SFile_Item_Properties) GetIsImage() (x bool) {
	if m == nil {
		return x
	}
	return m.IsImage
}

// GetIsVideo gets the IsVideo of the SFile_Item_Properties.
func (m *SFile_Item_Properties) GetIsVideo() (x bool) {
	if m == nil {
		return x
	}
	return m.IsVideo
}

// GetHasThumbnail gets the HasThumbnail of the SFile_Item_Properties.
func (m *SFile_Item_Properties) GetHasThumbnail() (x bool) {
	if m == nil {
		return x
	}
	return m.HasThumbnail
}

// GetWidth gets the Width of the SFile_Item_Properties.
func (m *SFile_Item_Properties) GetWidth() (x int32) {
	if m == nil {
		return x
	}
	return m.Width
}

// GetHeight gets the Height of the SFile_Item_Properties.
func (m *SFile_Item_Properties) GetHeight() (x int32) {
	if m == nil {
		return x
	}
	return m.Height
}

// GetDuration gets the Duration of the SFile_Item_Properties.
func (m *SFile_Item_Properties) GetDuration() (x int32) {
	if m == nil {
		return x
	}
	return m.Duration
}

// MarshalToWriter marshals SFile_Item_Properties to the provided writer.
func (m *SFile_Item_Properties) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.IsAudio {
		writer.WriteBool(1, m.IsAudio)
	}

	if m.IsImage {
		writer.WriteBool(2, m.IsImage)
	}

	if m.IsVideo {
		writer.WriteBool(3, m.IsVideo)
	}

	if m.HasThumbnail {
		writer.WriteBool(4, m.HasThumbnail)
	}

	if m.Width != 0 {
		writer.WriteInt32(5, m.Width)
	}

	if m.Height != 0 {
		writer.WriteInt32(6, m.Height)
	}

	if m.Duration != 0 {
		writer.WriteInt32(7, m.Duration)
	}

	return
}

// Marshal marshals SFile_Item_Properties to a slice of bytes.
func (m *SFile_Item_Properties) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a SFile_Item_Properties from the provided reader.
func (m *SFile_Item_Properties) UnmarshalFromReader(reader jspb.Reader) *SFile_Item_Properties {
	for reader.Next() {
		if m == nil {
			m = &SFile_Item_Properties{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.IsAudio = reader.ReadBool()
		case 2:
			m.IsImage = reader.ReadBool()
		case 3:
			m.IsVideo = reader.ReadBool()
		case 4:
			m.HasThumbnail = reader.ReadBool()
		case 5:
			m.Width = reader.ReadInt32()
		case 6:
			m.Height = reader.ReadInt32()
		case 7:
			m.Duration = reader.ReadInt32()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a SFile_Item_Properties from a slice of bytes.
func (m *SFile_Item_Properties) Unmarshal(rawBytes []byte) (*SFile_Item_Properties, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Transfer is Data thats being Passed
type Transfer struct {
	Id       int32
	Payload  Payload
	Received int32
	Receiver *Profile
	Owner    *Profile
	// Attached Data
	//
	// Types that are valid to be assigned to Data:
	//	*Transfer_Contact
	//	*Transfer_File
	//	*Transfer_Url
	Data isTransfer_Data
}

// isTransfer_Data is used to distinguish types assignable to Data
type isTransfer_Data interface{ isTransfer_Data() }

// Transfer_Contact is assignable to Data
type Transfer_Contact struct {
	Contact *Contact
}

// Transfer_File is assignable to Data
type Transfer_File struct {
	File *SFile
}

// Transfer_Url is assignable to Data
type Transfer_Url struct {
	Url *URLLink
}

func (*Transfer_Contact) isTransfer_Data() {}
func (*Transfer_File) isTransfer_Data()    {}
func (*Transfer_Url) isTransfer_Data()     {}

// GetData gets the Data of the Transfer.
func (m *Transfer) GetData() (x isTransfer_Data) {
	if m == nil {
		return x
	}
	return m.Data
}

// GetId gets the Id of the Transfer.
func (m *Transfer) GetId() (x int32) {
	if m == nil {
		return x
	}
	return m.Id
}

// GetPayload gets the Payload of the Transfer.
func (m *Transfer) GetPayload() (x Payload) {
	if m == nil {
		return x
	}
	return m.Payload
}

// GetReceived gets the Received of the Transfer.
func (m *Transfer) GetReceived() (x int32) {
	if m == nil {
		return x
	}
	return m.Received
}

// GetReceiver gets the Receiver of the Transfer.
func (m *Transfer) GetReceiver() (x *Profile) {
	if m == nil {
		return x
	}
	return m.Receiver
}

// GetOwner gets the Owner of the Transfer.
func (m *Transfer) GetOwner() (x *Profile) {
	if m == nil {
		return x
	}
	return m.Owner
}

// GetContact gets the Contact of the Transfer.
func (m *Transfer) GetContact() (x *Contact) {
	if v, ok := m.GetData().(*Transfer_Contact); ok {
		return v.Contact
	}
	return x
}

// GetFile gets the File of the Transfer.
func (m *Transfer) GetFile() (x *SFile) {
	if v, ok := m.GetData().(*Transfer_File); ok {
		return v.File
	}
	return x
}

// GetUrl gets the Url of the Transfer.
func (m *Transfer) GetUrl() (x *URLLink) {
	if v, ok := m.GetData().(*Transfer_Url); ok {
		return v.Url
	}
	return x
}

// MarshalToWriter marshals Transfer to the provided writer.
func (m *Transfer) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	switch t := m.Data.(type) {
	case *Transfer_Contact:
		if t.Contact != nil {
			writer.WriteMessage(6, func() {
				t.Contact.MarshalToWriter(writer)
			})
		}
	case *Transfer_File:
		if t.File != nil {
			writer.WriteMessage(7, func() {
				t.File.MarshalToWriter(writer)
			})
		}
	case *Transfer_Url:
		if t.Url != nil {
			writer.WriteMessage(8, func() {
				t.Url.MarshalToWriter(writer)
			})
		}
	}

	if m.Id != 0 {
		writer.WriteInt32(1, m.Id)
	}

	if int(m.Payload) != 0 {
		writer.WriteEnum(2, int(m.Payload))
	}

	if m.Received != 0 {
		writer.WriteInt32(3, m.Received)
	}

	if m.Receiver != nil {
		writer.WriteMessage(4, func() {
			m.Receiver.MarshalToWriter(writer)
		})
	}

	if m.Owner != nil {
		writer.WriteMessage(5, func() {
			m.Owner.MarshalToWriter(writer)
		})
	}

	return
}

// Marshal marshals Transfer to a slice of bytes.
func (m *Transfer) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a Transfer from the provided reader.
func (m *Transfer) UnmarshalFromReader(reader jspb.Reader) *Transfer {
	for reader.Next() {
		if m == nil {
			m = &Transfer{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Id = reader.ReadInt32()
		case 2:
			m.Payload = Payload(reader.ReadEnum())
		case 3:
			m.Received = reader.ReadInt32()
		case 4:
			reader.ReadMessage(func() {
				m.Receiver = m.Receiver.UnmarshalFromReader(reader)
			})
		case 5:
			reader.ReadMessage(func() {
				m.Owner = m.Owner.UnmarshalFromReader(reader)
			})
		case 6:
			reader.ReadMessage(func() {
				m.Data = &Transfer_Contact{
					Contact: new(Contact).UnmarshalFromReader(reader),
				}
			})
		case 7:
			reader.ReadMessage(func() {
				m.Data = &Transfer_File{
					File: new(SFile).UnmarshalFromReader(reader),
				}
			})
		case 8:
			reader.ReadMessage(func() {
				m.Data = &Transfer_Url{
					Url: new(URLLink).UnmarshalFromReader(reader),
				}
			})
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a Transfer from a slice of bytes.
func (m *Transfer) Unmarshal(rawBytes []byte) (*Transfer, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// URLLink Contains metadata of provided URL
type URLLink struct {
	Initialized bool
	Url         string
	Title       string
	Type        string
	Site        string
	SiteName    string
	Description string
	Locale      string
	Images      []*URLLink_OpenGraphImage
	Videos      []*URLLink_OpenGraphVideo
	Audios      []*URLLink_OpenGraphAudio
	Twitter     *URLLink_TwitterCard
	Content     string
}

// GetInitialized gets the Initialized of the URLLink.
func (m *URLLink) GetInitialized() (x bool) {
	if m == nil {
		return x
	}
	return m.Initialized
}

// GetUrl gets the Url of the URLLink.
func (m *URLLink) GetUrl() (x string) {
	if m == nil {
		return x
	}
	return m.Url
}

// GetTitle gets the Title of the URLLink.
func (m *URLLink) GetTitle() (x string) {
	if m == nil {
		return x
	}
	return m.Title
}

// GetType gets the Type of the URLLink.
func (m *URLLink) GetType() (x string) {
	if m == nil {
		return x
	}
	return m.Type
}

// GetSite gets the Site of the URLLink.
func (m *URLLink) GetSite() (x string) {
	if m == nil {
		return x
	}
	return m.Site
}

// GetSiteName gets the SiteName of the URLLink.
func (m *URLLink) GetSiteName() (x string) {
	if m == nil {
		return x
	}
	return m.SiteName
}

// GetDescription gets the Description of the URLLink.
func (m *URLLink) GetDescription() (x string) {
	if m == nil {
		return x
	}
	return m.Description
}

// GetLocale gets the Locale of the URLLink.
func (m *URLLink) GetLocale() (x string) {
	if m == nil {
		return x
	}
	return m.Locale
}

// GetImages gets the Images of the URLLink.
func (m *URLLink) GetImages() (x []*URLLink_OpenGraphImage) {
	if m == nil {
		return x
	}
	return m.Images
}

// GetVideos gets the Videos of the URLLink.
func (m *URLLink) GetVideos() (x []*URLLink_OpenGraphVideo) {
	if m == nil {
		return x
	}
	return m.Videos
}

// GetAudios gets the Audios of the URLLink.
func (m *URLLink) GetAudios() (x []*URLLink_OpenGraphAudio) {
	if m == nil {
		return x
	}
	return m.Audios
}

// GetTwitter gets the Twitter of the URLLink.
func (m *URLLink) GetTwitter() (x *URLLink_TwitterCard) {
	if m == nil {
		return x
	}
	return m.Twitter
}

// GetContent gets the Content of the URLLink.
func (m *URLLink) GetContent() (x string) {
	if m == nil {
		return x
	}
	return m.Content
}

// MarshalToWriter marshals URLLink to the provided writer.
func (m *URLLink) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.Initialized {
		writer.WriteBool(1, m.Initialized)
	}

	if len(m.Url) > 0 {
		writer.WriteString(2, m.Url)
	}

	if len(m.Title) > 0 {
		writer.WriteString(3, m.Title)
	}

	if len(m.Type) > 0 {
		writer.WriteString(4, m.Type)
	}

	if len(m.Site) > 0 {
		writer.WriteString(5, m.Site)
	}

	if len(m.SiteName) > 0 {
		writer.WriteString(6, m.SiteName)
	}

	if len(m.Description) > 0 {
		writer.WriteString(7, m.Description)
	}

	if len(m.Locale) > 0 {
		writer.WriteString(8, m.Locale)
	}

	for _, msg := range m.Images {
		writer.WriteMessage(9, func() {
			msg.MarshalToWriter(writer)
		})
	}

	for _, msg := range m.Videos {
		writer.WriteMessage(10, func() {
			msg.MarshalToWriter(writer)
		})
	}

	for _, msg := range m.Audios {
		writer.WriteMessage(11, func() {
			msg.MarshalToWriter(writer)
		})
	}

	if m.Twitter != nil {
		writer.WriteMessage(12, func() {
			m.Twitter.MarshalToWriter(writer)
		})
	}

	if len(m.Content) > 0 {
		writer.WriteString(13, m.Content)
	}

	return
}

// Marshal marshals URLLink to a slice of bytes.
func (m *URLLink) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a URLLink from the provided reader.
func (m *URLLink) UnmarshalFromReader(reader jspb.Reader) *URLLink {
	for reader.Next() {
		if m == nil {
			m = &URLLink{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Initialized = reader.ReadBool()
		case 2:
			m.Url = reader.ReadString()
		case 3:
			m.Title = reader.ReadString()
		case 4:
			m.Type = reader.ReadString()
		case 5:
			m.Site = reader.ReadString()
		case 6:
			m.SiteName = reader.ReadString()
		case 7:
			m.Description = reader.ReadString()
		case 8:
			m.Locale = reader.ReadString()
		case 9:
			reader.ReadMessage(func() {
				m.Images = append(m.Images, new(URLLink_OpenGraphImage).UnmarshalFromReader(reader))
			})
		case 10:
			reader.ReadMessage(func() {
				m.Videos = append(m.Videos, new(URLLink_OpenGraphVideo).UnmarshalFromReader(reader))
			})
		case 11:
			reader.ReadMessage(func() {
				m.Audios = append(m.Audios, new(URLLink_OpenGraphAudio).UnmarshalFromReader(reader))
			})
		case 12:
			reader.ReadMessage(func() {
				m.Twitter = m.Twitter.UnmarshalFromReader(reader)
			})
		case 13:
			m.Content = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a URLLink from a slice of bytes.
func (m *URLLink) Unmarshal(rawBytes []byte) (*URLLink, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// OpenGraph Image
type URLLink_OpenGraphImage struct {
	Url       string
	SecureUrl string
	Width     int32
	Height    int32
	Type      string
}

// GetUrl gets the Url of the URLLink_OpenGraphImage.
func (m *URLLink_OpenGraphImage) GetUrl() (x string) {
	if m == nil {
		return x
	}
	return m.Url
}

// GetSecureUrl gets the SecureUrl of the URLLink_OpenGraphImage.
func (m *URLLink_OpenGraphImage) GetSecureUrl() (x string) {
	if m == nil {
		return x
	}
	return m.SecureUrl
}

// GetWidth gets the Width of the URLLink_OpenGraphImage.
func (m *URLLink_OpenGraphImage) GetWidth() (x int32) {
	if m == nil {
		return x
	}
	return m.Width
}

// GetHeight gets the Height of the URLLink_OpenGraphImage.
func (m *URLLink_OpenGraphImage) GetHeight() (x int32) {
	if m == nil {
		return x
	}
	return m.Height
}

// GetType gets the Type of the URLLink_OpenGraphImage.
func (m *URLLink_OpenGraphImage) GetType() (x string) {
	if m == nil {
		return x
	}
	return m.Type
}

// MarshalToWriter marshals URLLink_OpenGraphImage to the provided writer.
func (m *URLLink_OpenGraphImage) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Url) > 0 {
		writer.WriteString(1, m.Url)
	}

	if len(m.SecureUrl) > 0 {
		writer.WriteString(2, m.SecureUrl)
	}

	if m.Width != 0 {
		writer.WriteInt32(3, m.Width)
	}

	if m.Height != 0 {
		writer.WriteInt32(4, m.Height)
	}

	if len(m.Type) > 0 {
		writer.WriteString(5, m.Type)
	}

	return
}

// Marshal marshals URLLink_OpenGraphImage to a slice of bytes.
func (m *URLLink_OpenGraphImage) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a URLLink_OpenGraphImage from the provided reader.
func (m *URLLink_OpenGraphImage) UnmarshalFromReader(reader jspb.Reader) *URLLink_OpenGraphImage {
	for reader.Next() {
		if m == nil {
			m = &URLLink_OpenGraphImage{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Url = reader.ReadString()
		case 2:
			m.SecureUrl = reader.ReadString()
		case 3:
			m.Width = reader.ReadInt32()
		case 4:
			m.Height = reader.ReadInt32()
		case 5:
			m.Type = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a URLLink_OpenGraphImage from a slice of bytes.
func (m *URLLink_OpenGraphImage) Unmarshal(rawBytes []byte) (*URLLink_OpenGraphImage, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// OpenGraph Video
type URLLink_OpenGraphVideo struct {
	Url       string
	SecureUrl string
	Width     int32
	Height    int32
	Type      string
}

// GetUrl gets the Url of the URLLink_OpenGraphVideo.
func (m *URLLink_OpenGraphVideo) GetUrl() (x string) {
	if m == nil {
		return x
	}
	return m.Url
}

// GetSecureUrl gets the SecureUrl of the URLLink_OpenGraphVideo.
func (m *URLLink_OpenGraphVideo) GetSecureUrl() (x string) {
	if m == nil {
		return x
	}
	return m.SecureUrl
}

// GetWidth gets the Width of the URLLink_OpenGraphVideo.
func (m *URLLink_OpenGraphVideo) GetWidth() (x int32) {
	if m == nil {
		return x
	}
	return m.Width
}

// GetHeight gets the Height of the URLLink_OpenGraphVideo.
func (m *URLLink_OpenGraphVideo) GetHeight() (x int32) {
	if m == nil {
		return x
	}
	return m.Height
}

// GetType gets the Type of the URLLink_OpenGraphVideo.
func (m *URLLink_OpenGraphVideo) GetType() (x string) {
	if m == nil {
		return x
	}
	return m.Type
}

// MarshalToWriter marshals URLLink_OpenGraphVideo to the provided writer.
func (m *URLLink_OpenGraphVideo) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Url) > 0 {
		writer.WriteString(1, m.Url)
	}

	if len(m.SecureUrl) > 0 {
		writer.WriteString(2, m.SecureUrl)
	}

	if m.Width != 0 {
		writer.WriteInt32(3, m.Width)
	}

	if m.Height != 0 {
		writer.WriteInt32(4, m.Height)
	}

	if len(m.Type) > 0 {
		writer.WriteString(5, m.Type)
	}

	return
}

// Marshal marshals URLLink_OpenGraphVideo to a slice of bytes.
func (m *URLLink_OpenGraphVideo) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a URLLink_OpenGraphVideo from the provided reader.
func (m *URLLink_OpenGraphVideo) UnmarshalFromReader(reader jspb.Reader) *URLLink_OpenGraphVideo {
	for reader.Next() {
		if m == nil {
			m = &URLLink_OpenGraphVideo{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Url = reader.ReadString()
		case 2:
			m.SecureUrl = reader.ReadString()
		case 3:
			m.Width = reader.ReadInt32()
		case 4:
			m.Height = reader.ReadInt32()
		case 5:
			m.Type = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a URLLink_OpenGraphVideo from a slice of bytes.
func (m *URLLink_OpenGraphVideo) Unmarshal(rawBytes []byte) (*URLLink_OpenGraphVideo, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// OpenGraph Audio
type URLLink_OpenGraphAudio struct {
	Url       string
	SecureUrl string
	Type      string
}

// GetUrl gets the Url of the URLLink_OpenGraphAudio.
func (m *URLLink_OpenGraphAudio) GetUrl() (x string) {
	if m == nil {
		return x
	}
	return m.Url
}

// GetSecureUrl gets the SecureUrl of the URLLink_OpenGraphAudio.
func (m *URLLink_OpenGraphAudio) GetSecureUrl() (x string) {
	if m == nil {
		return x
	}
	return m.SecureUrl
}

// GetType gets the Type of the URLLink_OpenGraphAudio.
func (m *URLLink_OpenGraphAudio) GetType() (x string) {
	if m == nil {
		return x
	}
	return m.Type
}

// MarshalToWriter marshals URLLink_OpenGraphAudio to the provided writer.
func (m *URLLink_OpenGraphAudio) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Url) > 0 {
		writer.WriteString(1, m.Url)
	}

	if len(m.SecureUrl) > 0 {
		writer.WriteString(2, m.SecureUrl)
	}

	if len(m.Type) > 0 {
		writer.WriteString(3, m.Type)
	}

	return
}

// Marshal marshals URLLink_OpenGraphAudio to a slice of bytes.
func (m *URLLink_OpenGraphAudio) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a URLLink_OpenGraphAudio from the provided reader.
func (m *URLLink_OpenGraphAudio) UnmarshalFromReader(reader jspb.Reader) *URLLink_OpenGraphAudio {
	for reader.Next() {
		if m == nil {
			m = &URLLink_OpenGraphAudio{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Url = reader.ReadString()
		case 2:
			m.SecureUrl = reader.ReadString()
		case 3:
			m.Type = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a URLLink_OpenGraphAudio from a slice of bytes.
func (m *URLLink_OpenGraphAudio) Unmarshal(rawBytes []byte) (*URLLink_OpenGraphAudio, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Twitter Card
type URLLink_TwitterCard struct {
	Card        string
	Site        string
	SiteId      string
	Creator     string
	CreatorId   string
	Description string
	Title       string
	Image       string
	ImageAlt    string
	Url         string
	Player      *URLLink_TwitterCard_Player
	Iphone      *URLLink_TwitterCard_IPhone
	Ipad        *URLLink_TwitterCard_IPad
	GooglePlay  *URLLink_TwitterCard_GooglePlay
}

// GetCard gets the Card of the URLLink_TwitterCard.
func (m *URLLink_TwitterCard) GetCard() (x string) {
	if m == nil {
		return x
	}
	return m.Card
}

// GetSite gets the Site of the URLLink_TwitterCard.
func (m *URLLink_TwitterCard) GetSite() (x string) {
	if m == nil {
		return x
	}
	return m.Site
}

// GetSiteId gets the SiteId of the URLLink_TwitterCard.
func (m *URLLink_TwitterCard) GetSiteId() (x string) {
	if m == nil {
		return x
	}
	return m.SiteId
}

// GetCreator gets the Creator of the URLLink_TwitterCard.
func (m *URLLink_TwitterCard) GetCreator() (x string) {
	if m == nil {
		return x
	}
	return m.Creator
}

// GetCreatorId gets the CreatorId of the URLLink_TwitterCard.
func (m *URLLink_TwitterCard) GetCreatorId() (x string) {
	if m == nil {
		return x
	}
	return m.CreatorId
}

// GetDescription gets the Description of the URLLink_TwitterCard.
func (m *URLLink_TwitterCard) GetDescription() (x string) {
	if m == nil {
		return x
	}
	return m.Description
}

// GetTitle gets the Title of the URLLink_TwitterCard.
func (m *URLLink_TwitterCard) GetTitle() (x string) {
	if m == nil {
		return x
	}
	return m.Title
}

// GetImage gets the Image of the URLLink_TwitterCard.
func (m *URLLink_TwitterCard) GetImage() (x string) {
	if m == nil {
		return x
	}
	return m.Image
}

// GetImageAlt gets the ImageAlt of the URLLink_TwitterCard.
func (m *URLLink_TwitterCard) GetImageAlt() (x string) {
	if m == nil {
		return x
	}
	return m.ImageAlt
}

// GetUrl gets the Url of the URLLink_TwitterCard.
func (m *URLLink_TwitterCard) GetUrl() (x string) {
	if m == nil {
		return x
	}
	return m.Url
}

// GetPlayer gets the Player of the URLLink_TwitterCard.
func (m *URLLink_TwitterCard) GetPlayer() (x *URLLink_TwitterCard_Player) {
	if m == nil {
		return x
	}
	return m.Player
}

// GetIphone gets the Iphone of the URLLink_TwitterCard.
func (m *URLLink_TwitterCard) GetIphone() (x *URLLink_TwitterCard_IPhone) {
	if m == nil {
		return x
	}
	return m.Iphone
}

// GetIpad gets the Ipad of the URLLink_TwitterCard.
func (m *URLLink_TwitterCard) GetIpad() (x *URLLink_TwitterCard_IPad) {
	if m == nil {
		return x
	}
	return m.Ipad
}

// GetGooglePlay gets the GooglePlay of the URLLink_TwitterCard.
func (m *URLLink_TwitterCard) GetGooglePlay() (x *URLLink_TwitterCard_GooglePlay) {
	if m == nil {
		return x
	}
	return m.GooglePlay
}

// MarshalToWriter marshals URLLink_TwitterCard to the provided writer.
func (m *URLLink_TwitterCard) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Card) > 0 {
		writer.WriteString(1, m.Card)
	}

	if len(m.Site) > 0 {
		writer.WriteString(2, m.Site)
	}

	if len(m.SiteId) > 0 {
		writer.WriteString(3, m.SiteId)
	}

	if len(m.Creator) > 0 {
		writer.WriteString(4, m.Creator)
	}

	if len(m.CreatorId) > 0 {
		writer.WriteString(5, m.CreatorId)
	}

	if len(m.Description) > 0 {
		writer.WriteString(6, m.Description)
	}

	if len(m.Title) > 0 {
		writer.WriteString(7, m.Title)
	}

	if len(m.Image) > 0 {
		writer.WriteString(8, m.Image)
	}

	if len(m.ImageAlt) > 0 {
		writer.WriteString(9, m.ImageAlt)
	}

	if len(m.Url) > 0 {
		writer.WriteString(10, m.Url)
	}

	if m.Player != nil {
		writer.WriteMessage(11, func() {
			m.Player.MarshalToWriter(writer)
		})
	}

	if m.Iphone != nil {
		writer.WriteMessage(12, func() {
			m.Iphone.MarshalToWriter(writer)
		})
	}

	if m.Ipad != nil {
		writer.WriteMessage(13, func() {
			m.Ipad.MarshalToWriter(writer)
		})
	}

	if m.GooglePlay != nil {
		writer.WriteMessage(14, func() {
			m.GooglePlay.MarshalToWriter(writer)
		})
	}

	return
}

// Marshal marshals URLLink_TwitterCard to a slice of bytes.
func (m *URLLink_TwitterCard) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a URLLink_TwitterCard from the provided reader.
func (m *URLLink_TwitterCard) UnmarshalFromReader(reader jspb.Reader) *URLLink_TwitterCard {
	for reader.Next() {
		if m == nil {
			m = &URLLink_TwitterCard{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Card = reader.ReadString()
		case 2:
			m.Site = reader.ReadString()
		case 3:
			m.SiteId = reader.ReadString()
		case 4:
			m.Creator = reader.ReadString()
		case 5:
			m.CreatorId = reader.ReadString()
		case 6:
			m.Description = reader.ReadString()
		case 7:
			m.Title = reader.ReadString()
		case 8:
			m.Image = reader.ReadString()
		case 9:
			m.ImageAlt = reader.ReadString()
		case 10:
			m.Url = reader.ReadString()
		case 11:
			reader.ReadMessage(func() {
				m.Player = m.Player.UnmarshalFromReader(reader)
			})
		case 12:
			reader.ReadMessage(func() {
				m.Iphone = m.Iphone.UnmarshalFromReader(reader)
			})
		case 13:
			reader.ReadMessage(func() {
				m.Ipad = m.Ipad.UnmarshalFromReader(reader)
			})
		case 14:
			reader.ReadMessage(func() {
				m.GooglePlay = m.GooglePlay.UnmarshalFromReader(reader)
			})
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a URLLink_TwitterCard from a slice of bytes.
func (m *URLLink_TwitterCard) Unmarshal(rawBytes []byte) (*URLLink_TwitterCard, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type URLLink_TwitterCard_Player struct {
	Url    string
	Width  int32
	Height int32
	Stream string
}

// GetUrl gets the Url of the URLLink_TwitterCard_Player.
func (m *URLLink_TwitterCard_Player) GetUrl() (x string) {
	if m == nil {
		return x
	}
	return m.Url
}

// GetWidth gets the Width of the URLLink_TwitterCard_Player.
func (m *URLLink_TwitterCard_Player) GetWidth() (x int32) {
	if m == nil {
		return x
	}
	return m.Width
}

// GetHeight gets the Height of the URLLink_TwitterCard_Player.
func (m *URLLink_TwitterCard_Player) GetHeight() (x int32) {
	if m == nil {
		return x
	}
	return m.Height
}

// GetStream gets the Stream of the URLLink_TwitterCard_Player.
func (m *URLLink_TwitterCard_Player) GetStream() (x string) {
	if m == nil {
		return x
	}
	return m.Stream
}

// MarshalToWriter marshals URLLink_TwitterCard_Player to the provided writer.
func (m *URLLink_TwitterCard_Player) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Url) > 0 {
		writer.WriteString(1, m.Url)
	}

	if m.Width != 0 {
		writer.WriteInt32(2, m.Width)
	}

	if m.Height != 0 {
		writer.WriteInt32(3, m.Height)
	}

	if len(m.Stream) > 0 {
		writer.WriteString(4, m.Stream)
	}

	return
}

// Marshal marshals URLLink_TwitterCard_Player to a slice of bytes.
func (m *URLLink_TwitterCard_Player) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a URLLink_TwitterCard_Player from the provided reader.
func (m *URLLink_TwitterCard_Player) UnmarshalFromReader(reader jspb.Reader) *URLLink_TwitterCard_Player {
	for reader.Next() {
		if m == nil {
			m = &URLLink_TwitterCard_Player{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Url = reader.ReadString()
		case 2:
			m.Width = reader.ReadInt32()
		case 3:
			m.Height = reader.ReadInt32()
		case 4:
			m.Stream = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a URLLink_TwitterCard_Player from a slice of bytes.
func (m *URLLink_TwitterCard_Player) Unmarshal(rawBytes []byte) (*URLLink_TwitterCard_Player, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type URLLink_TwitterCard_IPhone struct {
	Name string
	Id   string
	Url  string
}

// GetName gets the Name of the URLLink_TwitterCard_IPhone.
func (m *URLLink_TwitterCard_IPhone) GetName() (x string) {
	if m == nil {
		return x
	}
	return m.Name
}

// GetId gets the Id of the URLLink_TwitterCard_IPhone.
func (m *URLLink_TwitterCard_IPhone) GetId() (x string) {
	if m == nil {
		return x
	}
	return m.Id
}

// GetUrl gets the Url of the URLLink_TwitterCard_IPhone.
func (m *URLLink_TwitterCard_IPhone) GetUrl() (x string) {
	if m == nil {
		return x
	}
	return m.Url
}

// MarshalToWriter marshals URLLink_TwitterCard_IPhone to the provided writer.
func (m *URLLink_TwitterCard_IPhone) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Name) > 0 {
		writer.WriteString(1, m.Name)
	}

	if len(m.Id) > 0 {
		writer.WriteString(2, m.Id)
	}

	if len(m.Url) > 0 {
		writer.WriteString(3, m.Url)
	}

	return
}

// Marshal marshals URLLink_TwitterCard_IPhone to a slice of bytes.
func (m *URLLink_TwitterCard_IPhone) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a URLLink_TwitterCard_IPhone from the provided reader.
func (m *URLLink_TwitterCard_IPhone) UnmarshalFromReader(reader jspb.Reader) *URLLink_TwitterCard_IPhone {
	for reader.Next() {
		if m == nil {
			m = &URLLink_TwitterCard_IPhone{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Name = reader.ReadString()
		case 2:
			m.Id = reader.ReadString()
		case 3:
			m.Url = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a URLLink_TwitterCard_IPhone from a slice of bytes.
func (m *URLLink_TwitterCard_IPhone) Unmarshal(rawBytes []byte) (*URLLink_TwitterCard_IPhone, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type URLLink_TwitterCard_IPad struct {
	Name string
	Id   string
	Url  string
}

// GetName gets the Name of the URLLink_TwitterCard_IPad.
func (m *URLLink_TwitterCard_IPad) GetName() (x string) {
	if m == nil {
		return x
	}
	return m.Name
}

// GetId gets the Id of the URLLink_TwitterCard_IPad.
func (m *URLLink_TwitterCard_IPad) GetId() (x string) {
	if m == nil {
		return x
	}
	return m.Id
}

// GetUrl gets the Url of the URLLink_TwitterCard_IPad.
func (m *URLLink_TwitterCard_IPad) GetUrl() (x string) {
	if m == nil {
		return x
	}
	return m.Url
}

// MarshalToWriter marshals URLLink_TwitterCard_IPad to the provided writer.
func (m *URLLink_TwitterCard_IPad) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Name) > 0 {
		writer.WriteString(1, m.Name)
	}

	if len(m.Id) > 0 {
		writer.WriteString(2, m.Id)
	}

	if len(m.Url) > 0 {
		writer.WriteString(3, m.Url)
	}

	return
}

// Marshal marshals URLLink_TwitterCard_IPad to a slice of bytes.
func (m *URLLink_TwitterCard_IPad) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a URLLink_TwitterCard_IPad from the provided reader.
func (m *URLLink_TwitterCard_IPad) UnmarshalFromReader(reader jspb.Reader) *URLLink_TwitterCard_IPad {
	for reader.Next() {
		if m == nil {
			m = &URLLink_TwitterCard_IPad{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Name = reader.ReadString()
		case 2:
			m.Id = reader.ReadString()
		case 3:
			m.Url = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a URLLink_TwitterCard_IPad from a slice of bytes.
func (m *URLLink_TwitterCard_IPad) Unmarshal(rawBytes []byte) (*URLLink_TwitterCard_IPad, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type URLLink_TwitterCard_GooglePlay struct {
	Name string
	Id   string
	Url  string
}

// GetName gets the Name of the URLLink_TwitterCard_GooglePlay.
func (m *URLLink_TwitterCard_GooglePlay) GetName() (x string) {
	if m == nil {
		return x
	}
	return m.Name
}

// GetId gets the Id of the URLLink_TwitterCard_GooglePlay.
func (m *URLLink_TwitterCard_GooglePlay) GetId() (x string) {
	if m == nil {
		return x
	}
	return m.Id
}

// GetUrl gets the Url of the URLLink_TwitterCard_GooglePlay.
func (m *URLLink_TwitterCard_GooglePlay) GetUrl() (x string) {
	if m == nil {
		return x
	}
	return m.Url
}

// MarshalToWriter marshals URLLink_TwitterCard_GooglePlay to the provided writer.
func (m *URLLink_TwitterCard_GooglePlay) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Name) > 0 {
		writer.WriteString(1, m.Name)
	}

	if len(m.Id) > 0 {
		writer.WriteString(2, m.Id)
	}

	if len(m.Url) > 0 {
		writer.WriteString(3, m.Url)
	}

	return
}

// Marshal marshals URLLink_TwitterCard_GooglePlay to a slice of bytes.
func (m *URLLink_TwitterCard_GooglePlay) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a URLLink_TwitterCard_GooglePlay from the provided reader.
func (m *URLLink_TwitterCard_GooglePlay) UnmarshalFromReader(reader jspb.Reader) *URLLink_TwitterCard_GooglePlay {
	for reader.Next() {
		if m == nil {
			m = &URLLink_TwitterCard_GooglePlay{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Name = reader.ReadString()
		case 2:
			m.Id = reader.ReadString()
		case 3:
			m.Url = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a URLLink_TwitterCard_GooglePlay from a slice of bytes.
func (m *URLLink_TwitterCard_GooglePlay) Unmarshal(rawBytes []byte) (*URLLink_TwitterCard_GooglePlay, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}
