// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: data.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Payload is type of Data being transferred
type Payload int32

const (
	Payload_NONE         Payload = 0 // Not Specified
	Payload_CONTACT      Payload = 1 // Sonr Based Contact
	Payload_FLAT_CONTACT Payload = 2 // Send File as Flat Exchange Automatically Swaps
	Payload_FILE         Payload = 3 // File Transfer
	Payload_FILES        Payload = 4 // Multiple Files
	Payload_URL          Payload = 5 // Link to Site
	Payload_MEDIA        Payload = 6 // Media Payload - (Audio, Photo, Video)
)

// Enum value maps for Payload.
var (
	Payload_name = map[int32]string{
		0: "NONE",
		1: "CONTACT",
		2: "FLAT_CONTACT",
		3: "FILE",
		4: "FILES",
		5: "URL",
		6: "MEDIA",
	}
	Payload_value = map[string]int32{
		"NONE":         0,
		"CONTACT":      1,
		"FLAT_CONTACT": 2,
		"FILE":         3,
		"FILES":        4,
		"URL":          5,
		"MEDIA":        6,
	}
)

func (x Payload) Enum() *Payload {
	p := new(Payload)
	*p = x
	return p
}

func (x Payload) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Payload) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[0].Descriptor()
}

func (Payload) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[0]
}

func (x Payload) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Payload.Descriptor instead.
func (Payload) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0}
}

type Contact_Design_Color int32

const (
	Contact_Design_Transparent  Contact_Design_Color = 0  // Clear Color
	Contact_Design_Primary      Contact_Design_Color = 1  // Blue Varient
	Contact_Design_Secondary    Contact_Design_Color = 2  // Purple Varient
	Contact_Design_Tertiary     Contact_Design_Color = 3  // Green Varient
	Contact_Design_Critical     Contact_Design_Color = 4  // Red Varient
	Contact_Design_AccentPink   Contact_Design_Color = 5  // Light Pink
	Contact_Design_AccentBlue   Contact_Design_Color = 6  // Light Blue
	Contact_Design_AccentNavy   Contact_Design_Color = 7  // Strong Navy
	Contact_Design_AccentPurple Contact_Design_Color = 8  // Light Purple
	Contact_Design_Black        Contact_Design_Color = 9  // Black Varient
	Contact_Design_White        Contact_Design_Color = 10 // White Varient
	Contact_Design_Grey         Contact_Design_Color = 11 // Grey Varient
)

// Enum value maps for Contact_Design_Color.
var (
	Contact_Design_Color_name = map[int32]string{
		0:  "Transparent",
		1:  "Primary",
		2:  "Secondary",
		3:  "Tertiary",
		4:  "Critical",
		5:  "AccentPink",
		6:  "AccentBlue",
		7:  "AccentNavy",
		8:  "AccentPurple",
		9:  "Black",
		10: "White",
		11: "Grey",
	}
	Contact_Design_Color_value = map[string]int32{
		"Transparent":  0,
		"Primary":      1,
		"Secondary":    2,
		"Tertiary":     3,
		"Critical":     4,
		"AccentPink":   5,
		"AccentBlue":   6,
		"AccentNavy":   7,
		"AccentPurple": 8,
		"Black":        9,
		"White":        10,
		"Grey":         11,
	}
)

func (x Contact_Design_Color) Enum() *Contact_Design_Color {
	p := new(Contact_Design_Color)
	*p = x
	return p
}

func (x Contact_Design_Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Contact_Design_Color) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[1].Descriptor()
}

func (Contact_Design_Color) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[1]
}

func (x Contact_Design_Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Contact_Design_Color.Descriptor instead.
func (Contact_Design_Color) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0, 5, 0}
}

type Contact_Field_Kind int32

const (
	Contact_Field_NAME    Contact_Field_Kind = 0 // Name type Field
	Contact_Field_DATE    Contact_Field_Kind = 1 // DateTime type Field
	Contact_Field_GENDER  Contact_Field_Kind = 2 // Gender: Male/Female
	Contact_Field_PHONE   Contact_Field_Kind = 3 // Phone Field
	Contact_Field_EMAIL   Contact_Field_Kind = 4 // Email Field
	Contact_Field_COMPANY Contact_Field_Kind = 5 // Company Type Field
	Contact_Field_TITLE   Contact_Field_Kind = 6 // Title Type Field
)

// Enum value maps for Contact_Field_Kind.
var (
	Contact_Field_Kind_name = map[int32]string{
		0: "NAME",
		1: "DATE",
		2: "GENDER",
		3: "PHONE",
		4: "EMAIL",
		5: "COMPANY",
		6: "TITLE",
	}
	Contact_Field_Kind_value = map[string]int32{
		"NAME":    0,
		"DATE":    1,
		"GENDER":  2,
		"PHONE":   3,
		"EMAIL":   4,
		"COMPANY": 5,
		"TITLE":   6,
	}
)

func (x Contact_Field_Kind) Enum() *Contact_Field_Kind {
	p := new(Contact_Field_Kind)
	*p = x
	return p
}

func (x Contact_Field_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Contact_Field_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[2].Descriptor()
}

func (Contact_Field_Kind) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[2]
}

func (x Contact_Field_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Contact_Field_Kind.Descriptor instead.
func (Contact_Field_Kind) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0, 6, 0}
}

// Social Media Service
type Contact_Social_Provider int32

const (
	Contact_Social_Instagram Contact_Social_Provider = 0 // Feed/Post/Link
	Contact_Social_TikTok    Contact_Social_Provider = 1 // Post/Link
	Contact_Social_Facebook  Contact_Social_Provider = 2 // Link Only
	Contact_Social_YouTube   Contact_Social_Provider = 3 // Post/Link
	Contact_Social_Spotify   Contact_Social_Provider = 4 // Post/Link
	Contact_Social_Medium    Contact_Social_Provider = 5 // Feed/Post/Link
	Contact_Social_Twitter   Contact_Social_Provider = 6 // Feed/Post/Link
	Contact_Social_Snapchat  Contact_Social_Provider = 7 // Link Only
	Contact_Social_Github    Contact_Social_Provider = 8 // Link Only
	Contact_Social_LinkedIn  Contact_Social_Provider = 9
)

// Enum value maps for Contact_Social_Provider.
var (
	Contact_Social_Provider_name = map[int32]string{
		0: "Instagram",
		1: "TikTok",
		2: "Facebook",
		3: "YouTube",
		4: "Spotify",
		5: "Medium",
		6: "Twitter",
		7: "Snapchat",
		8: "Github",
		9: "LinkedIn",
	}
	Contact_Social_Provider_value = map[string]int32{
		"Instagram": 0,
		"TikTok":    1,
		"Facebook":  2,
		"YouTube":   3,
		"Spotify":   4,
		"Medium":    5,
		"Twitter":   6,
		"Snapchat":  7,
		"Github":    8,
		"LinkedIn":  9,
	}
)

func (x Contact_Social_Provider) Enum() *Contact_Social_Provider {
	p := new(Contact_Social_Provider)
	*p = x
	return p
}

func (x Contact_Social_Provider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Contact_Social_Provider) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[3].Descriptor()
}

func (Contact_Social_Provider) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[3]
}

func (x Contact_Social_Provider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Contact_Social_Provider.Descriptor instead.
func (Contact_Social_Provider) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0, 7, 0}
}

// Social Tile Visibility
type Contact_Social_Visibility int32

const (
	Contact_Social_Unknown       Contact_Social_Visibility = 0 // No Visibility Set
	Contact_Social_Private       Contact_Social_Visibility = 1 // Private Account
	Contact_Social_Public        Contact_Social_Visibility = 2 // Public Account
	Contact_Social_PrivateHidden Contact_Social_Visibility = 3 // Private and Hidden
	Contact_Social_PublicHidden  Contact_Social_Visibility = 4 // Public and Hidden
)

// Enum value maps for Contact_Social_Visibility.
var (
	Contact_Social_Visibility_name = map[int32]string{
		0: "Unknown",
		1: "Private",
		2: "Public",
		3: "PrivateHidden",
		4: "PublicHidden",
	}
	Contact_Social_Visibility_value = map[string]int32{
		"Unknown":       0,
		"Private":       1,
		"Public":        2,
		"PrivateHidden": 3,
		"PublicHidden":  4,
	}
)

func (x Contact_Social_Visibility) Enum() *Contact_Social_Visibility {
	p := new(Contact_Social_Visibility)
	*p = x
	return p
}

func (x Contact_Social_Visibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Contact_Social_Visibility) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[4].Descriptor()
}

func (Contact_Social_Visibility) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[4]
}

func (x Contact_Social_Visibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Contact_Social_Visibility.Descriptor instead.
func (Contact_Social_Visibility) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0, 7, 1}
}

// Social Tile Display Type
type Contact_Social_Tile_Display int32

const (
	Contact_Social_Tile_Icon     Contact_Social_Tile_Display = 0 // Default Tile Type, Icon for Provider
	Contact_Social_Tile_Feed     Contact_Social_Tile_Display = 1 // Big Tile Showcases Current User Feed
	Contact_Social_Tile_Post     Contact_Social_Tile_Display = 2 // Medium Tile Showcases a Featured Post
	Contact_Social_Tile_Profile  Contact_Social_Tile_Display = 3 // Small Tile is Direct Link to User Profile
	Contact_Social_Tile_Playlist Contact_Social_Tile_Display = 4 // Playlist type similar to Feed
)

// Enum value maps for Contact_Social_Tile_Display.
var (
	Contact_Social_Tile_Display_name = map[int32]string{
		0: "Icon",
		1: "Feed",
		2: "Post",
		3: "Profile",
		4: "Playlist",
	}
	Contact_Social_Tile_Display_value = map[string]int32{
		"Icon":     0,
		"Feed":     1,
		"Post":     2,
		"Profile":  3,
		"Playlist": 4,
	}
)

func (x Contact_Social_Tile_Display) Enum() *Contact_Social_Tile_Display {
	p := new(Contact_Social_Tile_Display)
	*p = x
	return p
}

func (x Contact_Social_Tile_Display) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Contact_Social_Tile_Display) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[5].Descriptor()
}

func (Contact_Social_Tile_Display) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[5]
}

func (x Contact_Social_Tile_Display) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Contact_Social_Tile_Display.Descriptor instead.
func (Contact_Social_Tile_Display) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0, 7, 1, 0}
}

type Lobby_Type int32

const (
	Lobby_Local  Lobby_Type = 0
	Lobby_Remote Lobby_Type = 1
	Lobby_User   Lobby_Type = 2
)

// Enum value maps for Lobby_Type.
var (
	Lobby_Type_name = map[int32]string{
		0: "Local",
		1: "Remote",
		2: "User",
	}
	Lobby_Type_value = map[string]int32{
		"Local":  0,
		"Remote": 1,
		"User":   2,
	}
)

func (x Lobby_Type) Enum() *Lobby_Type {
	p := new(Lobby_Type)
	*p = x
	return p
}

func (x Lobby_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Lobby_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[6].Descriptor()
}

func (Lobby_Type) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[6]
}

func (x Lobby_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Lobby_Type.Descriptor instead.
func (Lobby_Type) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{1, 0}
}

type LobbyEvent_Event int32

const (
	LobbyEvent_EXCHANGE LobbyEvent_Event = 0 // Peer has joined wants Info
	LobbyEvent_STANDBY  LobbyEvent_Event = 1 // Peer is taking break from lobby
	LobbyEvent_RESUME   LobbyEvent_Event = 2 // Peer has rejoined Lobby
	LobbyEvent_UPDATE   LobbyEvent_Event = 3 // Peer has changed position
	LobbyEvent_MESSAGE  LobbyEvent_Event = 4 // Peer has been messaged by a user
	LobbyEvent_EXIT     LobbyEvent_Event = 5 // Peer has Exited
)

// Enum value maps for LobbyEvent_Event.
var (
	LobbyEvent_Event_name = map[int32]string{
		0: "EXCHANGE",
		1: "STANDBY",
		2: "RESUME",
		3: "UPDATE",
		4: "MESSAGE",
		5: "EXIT",
	}
	LobbyEvent_Event_value = map[string]int32{
		"EXCHANGE": 0,
		"STANDBY":  1,
		"RESUME":   2,
		"UPDATE":   3,
		"MESSAGE":  4,
		"EXIT":     5,
	}
)

func (x LobbyEvent_Event) Enum() *LobbyEvent_Event {
	p := new(LobbyEvent_Event)
	*p = x
	return p
}

func (x LobbyEvent_Event) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LobbyEvent_Event) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[7].Descriptor()
}

func (LobbyEvent_Event) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[7]
}

func (x LobbyEvent_Event) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LobbyEvent_Event.Descriptor instead.
func (LobbyEvent_Event) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{2, 0}
}

type MIME_Type int32

const (
	MIME_OTHER        MIME_Type = 0 // Other File Type - If cannot derive from Subtype
	MIME_AUDIO        MIME_Type = 1 // Sound, Audio Files
	MIME_IMAGE        MIME_Type = 2 // Image Files
	MIME_TEXT         MIME_Type = 3 // Text Based Files
	MIME_PDF          MIME_Type = 4 // PDF Format
	MIME_PRESENTATION MIME_Type = 5 // PPT type Files
	MIME_SPREADSHEET  MIME_Type = 6 // CSV/Excel type files
	MIME_VIDEO        MIME_Type = 7 // Video Files
	MIME_SNR          MIME_Type = 8 // SNR Files
)

// Enum value maps for MIME_Type.
var (
	MIME_Type_name = map[int32]string{
		0: "OTHER",
		1: "AUDIO",
		2: "IMAGE",
		3: "TEXT",
		4: "PDF",
		5: "PRESENTATION",
		6: "SPREADSHEET",
		7: "VIDEO",
		8: "SNR",
	}
	MIME_Type_value = map[string]int32{
		"OTHER":        0,
		"AUDIO":        1,
		"IMAGE":        2,
		"TEXT":         3,
		"PDF":          4,
		"PRESENTATION": 5,
		"SPREADSHEET":  6,
		"VIDEO":        7,
		"SNR":          8,
	}
)

func (x MIME_Type) Enum() *MIME_Type {
	p := new(MIME_Type)
	*p = x
	return p
}

func (x MIME_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MIME_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_data_proto_enumTypes[8].Descriptor()
}

func (MIME_Type) Type() protoreflect.EnumType {
	return &file_data_proto_enumTypes[8]
}

func (x MIME_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MIME_Type.Descriptor instead.
func (MIME_Type) EnumDescriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4, 0}
}

// Contact is Extensive User Info that can be passed
type Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPublic  bool                        `protobuf:"varint,1,opt,name=isPublic,proto3" json:"isPublic,omitempty"`                                                                                          // If Contact card is Public
	Profile   *Profile                    `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`                                                                                             // General Profile Information
	About     string                      `protobuf:"bytes,3,opt,name=about,proto3" json:"about,omitempty"`                                                                                                 // Bio of User/About Value
	Link      *URLLink                    `protobuf:"bytes,4,opt,name=link,proto3" json:"link,omitempty"`                                                                                                   // URLLink for Public Card if Applicable
	Design    *Contact_Design             `protobuf:"bytes,5,opt,name=design,proto3" json:"design,omitempty"`                                                                                               // Card Design Properties
	Addresses map[string]*Contact_Address `protobuf:"bytes,6,rep,name=addresses,proto3" json:"addresses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Address Fields, Key is Label
	General   map[string]*Contact_Field   `protobuf:"bytes,7,rep,name=general,proto3" json:"general,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`     // Base General Contact Fields, Key is Label
	Socials   map[string]*Contact_Social  `protobuf:"bytes,8,rep,name=socials,proto3" json:"socials,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`     // Social Media Fields, Key is Username
	Websites  map[string]*URLLink         `protobuf:"bytes,9,rep,name=websites,proto3" json:"websites,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`   // Website Links
}

func (x *Contact) Reset() {
	*x = Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact) ProtoMessage() {}

func (x *Contact) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact.ProtoReflect.Descriptor instead.
func (*Contact) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0}
}

func (x *Contact) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *Contact) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *Contact) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *Contact) GetLink() *URLLink {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *Contact) GetDesign() *Contact_Design {
	if x != nil {
		return x.Design
	}
	return nil
}

func (x *Contact) GetAddresses() map[string]*Contact_Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Contact) GetGeneral() map[string]*Contact_Field {
	if x != nil {
		return x.General
	}
	return nil
}

func (x *Contact) GetSocials() map[string]*Contact_Social {
	if x != nil {
		return x.Socials
	}
	return nil
}

func (x *Contact) GetWebsites() map[string]*URLLink {
	if x != nil {
		return x.Websites
	}
	return nil
}

// For Info about Lobby
type Lobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  Lobby_Type       `protobuf:"varint,1,opt,name=type,proto3,enum=Lobby_Type" json:"type,omitempty"`                                                                          // Type of Lobby
	Name  string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                                           // Open Location Code of Lobby
	Topic string           `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`                                                                                         // Pubsub Address with OLC
	Size  int32            `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`                                                                                          // Total Number of Devices in Lobby
	Count int32            `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`                                                                                        // Total Devices in Lobby EXCLUDING User
	Peers map[string]*Peer `protobuf:"bytes,6,rep,name=peers,proto3" json:"peers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Total Data of Active Peers
	User  *Peer            `protobuf:"bytes,7,opt,name=user,proto3" json:"user,omitempty"`                                                                                           // User Peer reference
}

func (x *Lobby) Reset() {
	*x = Lobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lobby) ProtoMessage() {}

func (x *Lobby) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lobby.ProtoReflect.Descriptor instead.
func (*Lobby) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{1}
}

func (x *Lobby) GetType() Lobby_Type {
	if x != nil {
		return x.Type
	}
	return Lobby_Local
}

func (x *Lobby) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Lobby) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Lobby) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Lobby) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Lobby) GetPeers() map[string]*Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *Lobby) GetUser() *Peer {
	if x != nil {
		return x.User
	}
	return nil
}

// Message Sent when peer messages Lobby Topic
type LobbyEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                              // Peer ID
	Event   LobbyEvent_Event `protobuf:"varint,2,opt,name=event,proto3,enum=LobbyEvent_Event" json:"event,omitempty"` // What Peer is Doing
	From    *Peer            `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`                          // User Information
	To      string           `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`                              // Peer ID for DM
	Message string           `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`                    // Message being sent
}

func (x *LobbyEvent) Reset() {
	*x = LobbyEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LobbyEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbyEvent) ProtoMessage() {}

func (x *LobbyEvent) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbyEvent.ProtoReflect.Descriptor instead.
func (*LobbyEvent) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{2}
}

func (x *LobbyEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LobbyEvent) GetEvent() LobbyEvent_Event {
	if x != nil {
		return x.Event
	}
	return LobbyEvent_EXCHANGE
}

func (x *LobbyEvent) GetFrom() *Peer {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *LobbyEvent) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *LobbyEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Location from GeoIP and OLC information
type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip  *Location_IP  `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Geo *Location_Geo `protobuf:"bytes,2,opt,name=geo,proto3" json:"geo,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3}
}

func (x *Location) GetIp() *Location_IP {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Location) GetGeo() *Location_Geo {
	if x != nil {
		return x.Geo
	}
	return nil
}

// Standard MIME with Additional Extensions
type MIME struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    MIME_Type `protobuf:"varint,1,opt,name=type,proto3,enum=MIME_Type" json:"type,omitempty"` // Type of File
	Subtype string    `protobuf:"bytes,2,opt,name=subtype,proto3" json:"subtype,omitempty"`           // Extension of File
	Value   string    `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`               // Type/Subtype i.e. (image/jpeg)
}

func (x *MIME) Reset() {
	*x = MIME{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MIME) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MIME) ProtoMessage() {}

func (x *MIME) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MIME.ProtoReflect.Descriptor instead.
func (*MIME) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4}
}

func (x *MIME) GetType() MIME_Type {
	if x != nil {
		return x.Type
	}
	return MIME_OTHER
}

func (x *MIME) GetSubtype() string {
	if x != nil {
		return x.Subtype
	}
	return ""
}

func (x *MIME) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// RemoteInfo is for Joining/Creating a New Topic
type RemoteInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsJoin  bool     `protobuf:"varint,1,opt,name=isJoin,proto3" json:"isJoin,omitempty"`
	Count   int32    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Display string   `protobuf:"bytes,3,opt,name=display,proto3" json:"display,omitempty"`
	Topic   string   `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	Words   []string `protobuf:"bytes,5,rep,name=words,proto3" json:"words,omitempty"`
}

func (x *RemoteInfo) Reset() {
	*x = RemoteInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteInfo) ProtoMessage() {}

func (x *RemoteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteInfo.ProtoReflect.Descriptor instead.
func (*RemoteInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5}
}

func (x *RemoteInfo) GetIsJoin() bool {
	if x != nil {
		return x.IsJoin
	}
	return false
}

func (x *RemoteInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RemoteInfo) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *RemoteInfo) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *RemoteInfo) GetWords() []string {
	if x != nil {
		return x.Words
	}
	return nil
}

// For Transfer File Payload
type SonrFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Payload of File
	Payload Payload `protobuf:"varint,1,opt,name=payload,proto3,enum=Payload" json:"payload,omitempty"`
	// Total Transfer Count
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// Total Transfer Size
	Size int32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// List of Files as Metadata
	Files []*SonrFile_Metadata `protobuf:"bytes,4,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *SonrFile) Reset() {
	*x = SonrFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonrFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonrFile) ProtoMessage() {}

func (x *SonrFile) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonrFile.ProtoReflect.Descriptor instead.
func (*SonrFile) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{6}
}

func (x *SonrFile) GetPayload() Payload {
	if x != nil {
		return x.Payload
	}
	return Payload_NONE
}

func (x *SonrFile) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SonrFile) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SonrFile) GetFiles() []*SonrFile_Metadata {
	if x != nil {
		return x.Files
	}
	return nil
}

// Transfer is Data thats being Passed
type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                        // SQL: Id reference
	Payload  Payload  `protobuf:"varint,2,opt,name=payload,proto3,enum=Payload" json:"payload,omitempty"` // SQL: Type of Data received
	Received int32    `protobuf:"varint,3,opt,name=received,proto3" json:"received,omitempty"`            // SQL: UnixTime of received Date/Time
	Receiver *Profile `protobuf:"bytes,4,opt,name=receiver,proto3" json:"receiver,omitempty"`             // PROFILE: General Receiver Info
	Owner    *Profile `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`                   // PROFILE: General Sender Info
	// Attached Data
	//
	// Types that are assignable to Data:
	//	*Transfer_Contact
	//	*Transfer_File
	//	*Transfer_Url
	Data isTransfer_Data `protobuf_oneof:"data"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{7}
}

func (x *Transfer) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Transfer) GetPayload() Payload {
	if x != nil {
		return x.Payload
	}
	return Payload_NONE
}

func (x *Transfer) GetReceived() int32 {
	if x != nil {
		return x.Received
	}
	return 0
}

func (x *Transfer) GetReceiver() *Profile {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *Transfer) GetOwner() *Profile {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (m *Transfer) GetData() isTransfer_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Transfer) GetContact() *Contact {
	if x, ok := x.GetData().(*Transfer_Contact); ok {
		return x.Contact
	}
	return nil
}

func (x *Transfer) GetFile() *SonrFile {
	if x, ok := x.GetData().(*Transfer_File); ok {
		return x.File
	}
	return nil
}

func (x *Transfer) GetUrl() *URLLink {
	if x, ok := x.GetData().(*Transfer_Url); ok {
		return x.Url
	}
	return nil
}

type isTransfer_Data interface {
	isTransfer_Data()
}

type Transfer_Contact struct {
	Contact *Contact `protobuf:"bytes,6,opt,name=contact,proto3,oneof"` // DATA(Optional): Received Contact Information
}

type Transfer_File struct {
	File *SonrFile `protobuf:"bytes,7,opt,name=file,proto3,oneof"` // DATA(Optional): Received a File
}

type Transfer_Url struct {
	Url *URLLink `protobuf:"bytes,8,opt,name=url,proto3,oneof"` // DATA(Optional): Received a Website Link
}

func (*Transfer_Contact) isTransfer_Data() {}

func (*Transfer_File) isTransfer_Data() {}

func (*Transfer_Url) isTransfer_Data() {}

// TransferCard holds data passed between Exchange
type TransferCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                        // SQL: Id reference
	Payload  Payload   `protobuf:"varint,2,opt,name=payload,proto3,enum=Payload" json:"payload,omitempty"` // SQL: Type of Data received
	Received int32     `protobuf:"varint,3,opt,name=received,proto3" json:"received,omitempty"`            // SQL: UnixTime of received Date/Time
	Receiver *Profile  `protobuf:"bytes,4,opt,name=receiver,proto3" json:"receiver,omitempty"`             // PROFILE: General Receiver Info
	Owner    *Profile  `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`                   // PROFILE: General Owner Info
	Contact  *Contact  `protobuf:"bytes,6,opt,name=contact,proto3" json:"contact,omitempty"`               // DATA(Optional): Received Contact Information
	File     *SonrFile `protobuf:"bytes,7,opt,name=file,proto3" json:"file,omitempty"`                     // DATA(Optional): Received a File
	Url      *URLLink  `protobuf:"bytes,8,opt,name=url,proto3" json:"url,omitempty"`                       // DATA(Optional): Received a Website Link
}

func (x *TransferCard) Reset() {
	*x = TransferCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferCard) ProtoMessage() {}

func (x *TransferCard) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferCard.ProtoReflect.Descriptor instead.
func (*TransferCard) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{8}
}

func (x *TransferCard) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransferCard) GetPayload() Payload {
	if x != nil {
		return x.Payload
	}
	return Payload_NONE
}

func (x *TransferCard) GetReceived() int32 {
	if x != nil {
		return x.Received
	}
	return 0
}

func (x *TransferCard) GetReceiver() *Profile {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *TransferCard) GetOwner() *Profile {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *TransferCard) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *TransferCard) GetFile() *SonrFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *TransferCard) GetUrl() *URLLink {
	if x != nil {
		return x.Url
	}
	return nil
}

// URLLink Contains metadata of provided URL
type URLLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Initialized bool                      `protobuf:"varint,1,opt,name=initialized,proto3" json:"initialized,omitempty"` // Whether URL Metadata has been Loaded
	Url         string                    `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`                  // OG URL Link
	Title       string                    `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`              // Meta Field for Title
	Type        string                    `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`                // OG Type
	Site        string                    `protobuf:"bytes,5,opt,name=site,proto3" json:"site,omitempty"`                // Meta field for site
	SiteName    string                    `protobuf:"bytes,6,opt,name=siteName,proto3" json:"siteName,omitempty"`        // Meta field for sitename
	Description string                    `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`  // Meta field for description
	Locale      string                    `protobuf:"bytes,8,opt,name=locale,proto3" json:"locale,omitempty"`            // Meta field for locale
	Images      []*URLLink_OpenGraphImage `protobuf:"bytes,9,rep,name=images,proto3" json:"images,omitempty"`            // Images
	Videos      []*URLLink_OpenGraphVideo `protobuf:"bytes,10,rep,name=videos,proto3" json:"videos,omitempty"`           // Videos
	Audios      []*URLLink_OpenGraphAudio `protobuf:"bytes,11,rep,name=audios,proto3" json:"audios,omitempty"`           // Audios
	Twitter     *URLLink_TwitterCard      `protobuf:"bytes,12,opt,name=twitter,proto3" json:"twitter,omitempty"`         // Twitter Card
	Content     string                    `protobuf:"bytes,13,opt,name=content,proto3" json:"content,omitempty"`         // URL Content
}

func (x *URLLink) Reset() {
	*x = URLLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLLink) ProtoMessage() {}

func (x *URLLink) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLLink.ProtoReflect.Descriptor instead.
func (*URLLink) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{9}
}

func (x *URLLink) GetInitialized() bool {
	if x != nil {
		return x.Initialized
	}
	return false
}

func (x *URLLink) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *URLLink) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *URLLink) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *URLLink) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

func (x *URLLink) GetSiteName() string {
	if x != nil {
		return x.SiteName
	}
	return ""
}

func (x *URLLink) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *URLLink) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *URLLink) GetImages() []*URLLink_OpenGraphImage {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *URLLink) GetVideos() []*URLLink_OpenGraphVideo {
	if x != nil {
		return x.Videos
	}
	return nil
}

func (x *URLLink) GetAudios() []*URLLink_OpenGraphAudio {
	if x != nil {
		return x.Audios
	}
	return nil
}

func (x *URLLink) GetTwitter() *URLLink_TwitterCard {
	if x != nil {
		return x.Twitter
	}
	return nil
}

func (x *URLLink) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// Address: Field for Contact field
type Contact_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPrimary   bool   `protobuf:"varint,1,opt,name=isPrimary,proto3" json:"isPrimary,omitempty"`    // If this is the Primary field for Address
	Label       string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`             // Address Label for Type
	Street      string `protobuf:"bytes,3,opt,name=street,proto3" json:"street,omitempty"`           // Address First Line Street
	StreetTwo   string `protobuf:"bytes,4,opt,name=streetTwo,proto3" json:"streetTwo,omitempty"`     // Address Second Line Street
	City        string `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`               // City of Address
	State       string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`             // Address State
	Zipcode     string `protobuf:"bytes,7,opt,name=zipcode,proto3" json:"zipcode,omitempty"`         // Address Zip Code
	Country     string `protobuf:"bytes,8,opt,name=country,proto3" json:"country,omitempty"`         // Address Country
	CountryCode string `protobuf:"bytes,9,opt,name=countryCode,proto3" json:"countryCode,omitempty"` // Address Country Code
}

func (x *Contact_Address) Reset() {
	*x = Contact_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact_Address) ProtoMessage() {}

func (x *Contact_Address) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact_Address.ProtoReflect.Descriptor instead.
func (*Contact_Address) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Contact_Address) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

func (x *Contact_Address) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Contact_Address) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *Contact_Address) GetStreetTwo() string {
	if x != nil {
		return x.StreetTwo
	}
	return ""
}

func (x *Contact_Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Contact_Address) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Contact_Address) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

func (x *Contact_Address) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Contact_Address) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

// Design: Card Design Values
type Contact_Design struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card    int32                `protobuf:"varint,1,opt,name=card,proto3" json:"card,omitempty"`                                 // Background Card Value
	Primary Contact_Design_Color `protobuf:"varint,2,opt,name=primary,proto3,enum=Contact_Design_Color" json:"primary,omitempty"` // Primary Color
	Accent  Contact_Design_Color `protobuf:"varint,3,opt,name=accent,proto3,enum=Contact_Design_Color" json:"accent,omitempty"`   // Accent Color for Text/Buttons
}

func (x *Contact_Design) Reset() {
	*x = Contact_Design{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact_Design) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact_Design) ProtoMessage() {}

func (x *Contact_Design) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact_Design.ProtoReflect.Descriptor instead.
func (*Contact_Design) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Contact_Design) GetCard() int32 {
	if x != nil {
		return x.Card
	}
	return 0
}

func (x *Contact_Design) GetPrimary() Contact_Design_Color {
	if x != nil {
		return x.Primary
	}
	return Contact_Design_Transparent
}

func (x *Contact_Design) GetAccent() Contact_Design_Color {
	if x != nil {
		return x.Accent
	}
	return Contact_Design_Transparent
}

// Field : General Field for Contact field
type Contact_Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPrimary bool               `protobuf:"varint,1,opt,name=isPrimary,proto3" json:"isPrimary,omitempty"`               // If this is the Primary field for Kind
	Kind      Contact_Field_Kind `protobuf:"varint,2,opt,name=kind,proto3,enum=Contact_Field_Kind" json:"kind,omitempty"` // Type of Field
	Label     string             `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`                        // Identifier for Field
	Value     string             `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`                        // Convert Values to String
}

func (x *Contact_Field) Reset() {
	*x = Contact_Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact_Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact_Field) ProtoMessage() {}

func (x *Contact_Field) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact_Field.ProtoReflect.Descriptor instead.
func (*Contact_Field) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Contact_Field) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

func (x *Contact_Field) GetKind() Contact_Field_Kind {
	if x != nil {
		return x.Kind
	}
	return Contact_Field_NAME
}

func (x *Contact_Field) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Contact_Field) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Social: Field provides Display Information and Provider Information
type Contact_Social struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Properties
	IsPrimary  bool                      `protobuf:"varint,1,opt,name=isPrimary,proto3" json:"isPrimary,omitempty"`                                  // If this is the Primary field for SocialMedia Provider
	Provider   Contact_Social_Provider   `protobuf:"varint,2,opt,name=provider,proto3,enum=Contact_Social_Provider" json:"provider,omitempty"`       // Type of Social Provider
	User       *Contact_Social_User      `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`                                             // Social User Reference
	Tile       *Contact_Social_Tile      `protobuf:"bytes,4,opt,name=tile,proto3" json:"tile,omitempty"`                                             // Social Tile Position
	Links      *Contact_Social_Links     `protobuf:"bytes,5,opt,name=links,proto3" json:"links,omitempty"`                                           // Social Links
	Visibility Contact_Social_Visibility `protobuf:"varint,6,opt,name=visibility,proto3,enum=Contact_Social_Visibility" json:"visibility,omitempty"` // Is the User's Account Private
}

func (x *Contact_Social) Reset() {
	*x = Contact_Social{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact_Social) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact_Social) ProtoMessage() {}

func (x *Contact_Social) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact_Social.ProtoReflect.Descriptor instead.
func (*Contact_Social) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0, 7}
}

func (x *Contact_Social) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

func (x *Contact_Social) GetProvider() Contact_Social_Provider {
	if x != nil {
		return x.Provider
	}
	return Contact_Social_Instagram
}

func (x *Contact_Social) GetUser() *Contact_Social_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Contact_Social) GetTile() *Contact_Social_Tile {
	if x != nil {
		return x.Tile
	}
	return nil
}

func (x *Contact_Social) GetLinks() *Contact_Social_Links {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Contact_Social) GetVisibility() Contact_Social_Visibility {
	if x != nil {
		return x.Visibility
	}
	return Contact_Social_Unknown
}

// Social Provider Links
type Contact_Social_Links struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeedLink    *URLLink `protobuf:"bytes,1,opt,name=feedLink,proto3" json:"feedLink,omitempty"`       // Link to a Social Feed
	PostLink    *URLLink `protobuf:"bytes,2,opt,name=postLink,proto3" json:"postLink,omitempty"`       // Link to a Users Post
	ProfileLink *URLLink `protobuf:"bytes,3,opt,name=profileLink,proto3" json:"profileLink,omitempty"` // Link to Users Profile
}

func (x *Contact_Social_Links) Reset() {
	*x = Contact_Social_Links{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact_Social_Links) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact_Social_Links) ProtoMessage() {}

func (x *Contact_Social_Links) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact_Social_Links.ProtoReflect.Descriptor instead.
func (*Contact_Social_Links) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0, 7, 0}
}

func (x *Contact_Social_Links) GetFeedLink() *URLLink {
	if x != nil {
		return x.FeedLink
	}
	return nil
}

func (x *Contact_Social_Links) GetPostLink() *URLLink {
	if x != nil {
		return x.PostLink
	}
	return nil
}

func (x *Contact_Social_Links) GetProfileLink() *URLLink {
	if x != nil {
		return x.ProfileLink
	}
	return nil
}

// Tile Display Position
type Contact_Social_Tile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   Contact_Social_Tile_Display `protobuf:"varint,1,opt,name=type,proto3,enum=Contact_Social_Tile_Display" json:"type,omitempty"` // Type of Tile to be Displayed
	Index  int32                       `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`                                // Position in Contact Array
	Row    int32                       `protobuf:"varint,3,opt,name=row,proto3" json:"row,omitempty"`                                    // Row Location
	Column int32                       `protobuf:"varint,4,opt,name=column,proto3" json:"column,omitempty"`                              // Column Location
	Size   int32                       `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`                                  // Size of Tile
}

func (x *Contact_Social_Tile) Reset() {
	*x = Contact_Social_Tile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact_Social_Tile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact_Social_Tile) ProtoMessage() {}

func (x *Contact_Social_Tile) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact_Social_Tile.ProtoReflect.Descriptor instead.
func (*Contact_Social_Tile) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0, 7, 1}
}

func (x *Contact_Social_Tile) GetType() Contact_Social_Tile_Display {
	if x != nil {
		return x.Type
	}
	return Contact_Social_Tile_Icon
}

func (x *Contact_Social_Tile) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Contact_Social_Tile) GetRow() int32 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *Contact_Social_Tile) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *Contact_Social_Tile) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

// Social User for Provider
type Contact_Social_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Username string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Picture  *URLLink `protobuf:"bytes,3,opt,name=picture,proto3" json:"picture,omitempty"`
	Bio      string   `protobuf:"bytes,4,opt,name=bio,proto3" json:"bio,omitempty"`
}

func (x *Contact_Social_User) Reset() {
	*x = Contact_Social_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact_Social_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact_Social_User) ProtoMessage() {}

func (x *Contact_Social_User) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact_Social_User.ProtoReflect.Descriptor instead.
func (*Contact_Social_User) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0, 7, 2}
}

func (x *Contact_Social_User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Contact_Social_User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Contact_Social_User) GetPicture() *URLLink {
	if x != nil {
		return x.Picture
	}
	return nil
}

func (x *Contact_Social_User) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

type Location_Geo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *Location_Geo) Reset() {
	*x = Location_Geo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location_Geo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location_Geo) ProtoMessage() {}

func (x *Location_Geo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location_Geo.ProtoReflect.Descriptor instead.
func (*Location_Geo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Location_Geo) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location_Geo) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type Location_IP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State     string  `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Continent string  `protobuf:"bytes,2,opt,name=continent,proto3" json:"continent,omitempty"`
	Country   string  `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	Latitude  float64 `protobuf:"fixed64,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *Location_IP) Reset() {
	*x = Location_IP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location_IP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location_IP) ProtoMessage() {}

func (x *Location_IP) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location_IP.ProtoReflect.Descriptor instead.
func (*Location_IP) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Location_IP) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Location_IP) GetContinent() string {
	if x != nil {
		return x.Continent
	}
	return ""
}

func (x *Location_IP) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Location_IP) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location_IP) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

// For Received Transfer File Information
type SonrFile_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`      // Local Asset ID
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`  // File Name without Path
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`  // File Location
	Size int32  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"` // File Size in Bytes
	Mime *MIME  `protobuf:"bytes,5,opt,name=mime,proto3" json:"mime,omitempty"`  // Standard Mime Type
	// Thumbnail Preview of File
	//
	// Types that are assignable to Thumbnail:
	//	*SonrFile_Metadata_ThumbBuffer
	//	*SonrFile_Metadata_ThumbPath
	Thumbnail  isSonrFile_Metadata_Thumbnail `protobuf_oneof:"thumbnail"`
	Properties *SonrFile_Metadata_Properties `protobuf:"bytes,8,opt,name=properties,proto3" json:"properties,omitempty"` // Media Properties
}

func (x *SonrFile_Metadata) Reset() {
	*x = SonrFile_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonrFile_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonrFile_Metadata) ProtoMessage() {}

func (x *SonrFile_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonrFile_Metadata.ProtoReflect.Descriptor instead.
func (*SonrFile_Metadata) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{6, 0}
}

func (x *SonrFile_Metadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SonrFile_Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SonrFile_Metadata) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SonrFile_Metadata) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SonrFile_Metadata) GetMime() *MIME {
	if x != nil {
		return x.Mime
	}
	return nil
}

func (m *SonrFile_Metadata) GetThumbnail() isSonrFile_Metadata_Thumbnail {
	if m != nil {
		return m.Thumbnail
	}
	return nil
}

func (x *SonrFile_Metadata) GetThumbBuffer() []byte {
	if x, ok := x.GetThumbnail().(*SonrFile_Metadata_ThumbBuffer); ok {
		return x.ThumbBuffer
	}
	return nil
}

func (x *SonrFile_Metadata) GetThumbPath() string {
	if x, ok := x.GetThumbnail().(*SonrFile_Metadata_ThumbPath); ok {
		return x.ThumbPath
	}
	return ""
}

func (x *SonrFile_Metadata) GetProperties() *SonrFile_Metadata_Properties {
	if x != nil {
		return x.Properties
	}
	return nil
}

type isSonrFile_Metadata_Thumbnail interface {
	isSonrFile_Metadata_Thumbnail()
}

type SonrFile_Metadata_ThumbBuffer struct {
	ThumbBuffer []byte `protobuf:"bytes,6,opt,name=thumbBuffer,proto3,oneof"` // Thumbnail Buffer
}

type SonrFile_Metadata_ThumbPath struct {
	ThumbPath string `protobuf:"bytes,7,opt,name=thumbPath,proto3,oneof"` // Thumbnail Path
}

func (*SonrFile_Metadata_ThumbBuffer) isSonrFile_Metadata_Thumbnail() {}

func (*SonrFile_Metadata_ThumbPath) isSonrFile_Metadata_Thumbnail() {}

type SonrFile_Metadata_Properties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAudio      bool  `protobuf:"varint,1,opt,name=isAudio,proto3" json:"isAudio,omitempty"`           // If File is Audio
	IsImage      bool  `protobuf:"varint,2,opt,name=isImage,proto3" json:"isImage,omitempty"`           // If File is Image
	IsVideo      bool  `protobuf:"varint,3,opt,name=isVideo,proto3" json:"isVideo,omitempty"`           // If File is Video
	HasThumbnail bool  `protobuf:"varint,4,opt,name=hasThumbnail,proto3" json:"hasThumbnail,omitempty"` // If File has thumbnail
	Width        int32 `protobuf:"varint,5,opt,name=width,proto3" json:"width,omitempty"`               // Media Width
	Height       int32 `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`             // Media Height
	Duration     int32 `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`         // Length of Video - Optional
}

func (x *SonrFile_Metadata_Properties) Reset() {
	*x = SonrFile_Metadata_Properties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonrFile_Metadata_Properties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonrFile_Metadata_Properties) ProtoMessage() {}

func (x *SonrFile_Metadata_Properties) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonrFile_Metadata_Properties.ProtoReflect.Descriptor instead.
func (*SonrFile_Metadata_Properties) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{6, 0, 0}
}

func (x *SonrFile_Metadata_Properties) GetIsAudio() bool {
	if x != nil {
		return x.IsAudio
	}
	return false
}

func (x *SonrFile_Metadata_Properties) GetIsImage() bool {
	if x != nil {
		return x.IsImage
	}
	return false
}

func (x *SonrFile_Metadata_Properties) GetIsVideo() bool {
	if x != nil {
		return x.IsVideo
	}
	return false
}

func (x *SonrFile_Metadata_Properties) GetHasThumbnail() bool {
	if x != nil {
		return x.HasThumbnail
	}
	return false
}

func (x *SonrFile_Metadata_Properties) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SonrFile_Metadata_Properties) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SonrFile_Metadata_Properties) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// OpenGraph Image
type URLLink_OpenGraphImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url       string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`             // `meta:"og:image,og:image:url"`
	SecureUrl string `protobuf:"bytes,2,opt,name=secureUrl,proto3" json:"secureUrl,omitempty"` // `meta:"og:image:secure_url"`
	Width     int32  `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`        // `meta:"og:image:width"`
	Height    int32  `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`      // `meta:"og:image:height"`
	Type      string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`           // `meta:"og:image:type"`
}

func (x *URLLink_OpenGraphImage) Reset() {
	*x = URLLink_OpenGraphImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLLink_OpenGraphImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLLink_OpenGraphImage) ProtoMessage() {}

func (x *URLLink_OpenGraphImage) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLLink_OpenGraphImage.ProtoReflect.Descriptor instead.
func (*URLLink_OpenGraphImage) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{9, 0}
}

func (x *URLLink_OpenGraphImage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *URLLink_OpenGraphImage) GetSecureUrl() string {
	if x != nil {
		return x.SecureUrl
	}
	return ""
}

func (x *URLLink_OpenGraphImage) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *URLLink_OpenGraphImage) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *URLLink_OpenGraphImage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// OpenGraph Video
type URLLink_OpenGraphVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url       string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`             // `meta:"og:video,og:video:url"`
	SecureUrl string `protobuf:"bytes,2,opt,name=secureUrl,proto3" json:"secureUrl,omitempty"` // `meta:"og:video:secure_url"`
	Width     int32  `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`        // `meta:"og:video:width"`
	Height    int32  `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`      // `meta:"og:video:height"`
	Type      string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`           // `meta:"og:video:type"`
}

func (x *URLLink_OpenGraphVideo) Reset() {
	*x = URLLink_OpenGraphVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLLink_OpenGraphVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLLink_OpenGraphVideo) ProtoMessage() {}

func (x *URLLink_OpenGraphVideo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLLink_OpenGraphVideo.ProtoReflect.Descriptor instead.
func (*URLLink_OpenGraphVideo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{9, 1}
}

func (x *URLLink_OpenGraphVideo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *URLLink_OpenGraphVideo) GetSecureUrl() string {
	if x != nil {
		return x.SecureUrl
	}
	return ""
}

func (x *URLLink_OpenGraphVideo) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *URLLink_OpenGraphVideo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *URLLink_OpenGraphVideo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// OpenGraph Audio
type URLLink_OpenGraphAudio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url       string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`             // `meta:"og:audio,og:audio:url"`
	SecureUrl string `protobuf:"bytes,2,opt,name=secureUrl,proto3" json:"secureUrl,omitempty"` // `meta:"og:audio:secure_url"`
	Type      string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`           // `meta:"og:audio:type"`
}

func (x *URLLink_OpenGraphAudio) Reset() {
	*x = URLLink_OpenGraphAudio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLLink_OpenGraphAudio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLLink_OpenGraphAudio) ProtoMessage() {}

func (x *URLLink_OpenGraphAudio) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLLink_OpenGraphAudio.ProtoReflect.Descriptor instead.
func (*URLLink_OpenGraphAudio) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{9, 2}
}

func (x *URLLink_OpenGraphAudio) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *URLLink_OpenGraphAudio) GetSecureUrl() string {
	if x != nil {
		return x.SecureUrl
	}
	return ""
}

func (x *URLLink_OpenGraphAudio) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Twitter Card
type URLLink_TwitterCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card        string                          `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`               // `meta:"twitter:card"`
	Site        string                          `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`               // `meta:"twitter:site"`
	SiteId      string                          `protobuf:"bytes,3,opt,name=siteId,proto3" json:"siteId,omitempty"`           // `meta:"twitter:site:id"`
	Creator     string                          `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`         // `meta:"twitter:creator"`
	CreatorId   string                          `protobuf:"bytes,5,opt,name=creatorId,proto3" json:"creatorId,omitempty"`     // `meta:"twitter:creator:id"`
	Description string                          `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"` // `meta:"twitter:description"`
	Title       string                          `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`             // `meta:"twitter:title"`
	Image       string                          `protobuf:"bytes,8,opt,name=image,proto3" json:"image,omitempty"`             // `meta:"twitter:image,twitter:image:src"`
	ImageAlt    string                          `protobuf:"bytes,9,opt,name=imageAlt,proto3" json:"imageAlt,omitempty"`       // `meta:"twitter:image:alt"`
	Url         string                          `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`                // `meta:"twitter:url"`
	Player      *URLLink_TwitterCard_Player     `protobuf:"bytes,11,opt,name=player,proto3" json:"player,omitempty"`          // Twitter Item Player
	Iphone      *URLLink_TwitterCard_IPhone     `protobuf:"bytes,12,opt,name=iphone,proto3" json:"iphone,omitempty"`          // Twitter iPhone Data
	Ipad        *URLLink_TwitterCard_IPad       `protobuf:"bytes,13,opt,name=ipad,proto3" json:"ipad,omitempty"`              // Twitter iPad Data
	GooglePlay  *URLLink_TwitterCard_GooglePlay `protobuf:"bytes,14,opt,name=googlePlay,proto3" json:"googlePlay,omitempty"`  // Twitter Android Data
}

func (x *URLLink_TwitterCard) Reset() {
	*x = URLLink_TwitterCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLLink_TwitterCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLLink_TwitterCard) ProtoMessage() {}

func (x *URLLink_TwitterCard) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLLink_TwitterCard.ProtoReflect.Descriptor instead.
func (*URLLink_TwitterCard) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{9, 3}
}

func (x *URLLink_TwitterCard) GetCard() string {
	if x != nil {
		return x.Card
	}
	return ""
}

func (x *URLLink_TwitterCard) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

func (x *URLLink_TwitterCard) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

func (x *URLLink_TwitterCard) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *URLLink_TwitterCard) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *URLLink_TwitterCard) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *URLLink_TwitterCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *URLLink_TwitterCard) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *URLLink_TwitterCard) GetImageAlt() string {
	if x != nil {
		return x.ImageAlt
	}
	return ""
}

func (x *URLLink_TwitterCard) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *URLLink_TwitterCard) GetPlayer() *URLLink_TwitterCard_Player {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *URLLink_TwitterCard) GetIphone() *URLLink_TwitterCard_IPhone {
	if x != nil {
		return x.Iphone
	}
	return nil
}

func (x *URLLink_TwitterCard) GetIpad() *URLLink_TwitterCard_IPad {
	if x != nil {
		return x.Ipad
	}
	return nil
}

func (x *URLLink_TwitterCard) GetGooglePlay() *URLLink_TwitterCard_GooglePlay {
	if x != nil {
		return x.GooglePlay
	}
	return nil
}

type URLLink_TwitterCard_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`        // `meta:"twitter:player"`
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`   // `meta:"twitter:width"`
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // `meta:"twitter:height"`
	Stream string `protobuf:"bytes,4,opt,name=stream,proto3" json:"stream,omitempty"`  // `meta:"twitter:stream"`
}

func (x *URLLink_TwitterCard_Player) Reset() {
	*x = URLLink_TwitterCard_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLLink_TwitterCard_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLLink_TwitterCard_Player) ProtoMessage() {}

func (x *URLLink_TwitterCard_Player) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLLink_TwitterCard_Player.ProtoReflect.Descriptor instead.
func (*URLLink_TwitterCard_Player) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{9, 3, 0}
}

func (x *URLLink_TwitterCard_Player) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *URLLink_TwitterCard_Player) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *URLLink_TwitterCard_Player) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *URLLink_TwitterCard_Player) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

type URLLink_TwitterCard_IPhone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // `meta:"twitter:app:name:iphone"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`     // `meta:"twitter:app:id:iphone"`
	Url  string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`   // `meta:"twitter:app:url:iphone"`
}

func (x *URLLink_TwitterCard_IPhone) Reset() {
	*x = URLLink_TwitterCard_IPhone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLLink_TwitterCard_IPhone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLLink_TwitterCard_IPhone) ProtoMessage() {}

func (x *URLLink_TwitterCard_IPhone) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLLink_TwitterCard_IPhone.ProtoReflect.Descriptor instead.
func (*URLLink_TwitterCard_IPhone) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{9, 3, 1}
}

func (x *URLLink_TwitterCard_IPhone) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *URLLink_TwitterCard_IPhone) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *URLLink_TwitterCard_IPhone) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type URLLink_TwitterCard_IPad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // `meta:"twitter:app:name:ipad"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`     // `meta:"twitter:app:id:ipad"`
	Url  string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`   // `meta:"twitter:app:url:ipad"`
}

func (x *URLLink_TwitterCard_IPad) Reset() {
	*x = URLLink_TwitterCard_IPad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLLink_TwitterCard_IPad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLLink_TwitterCard_IPad) ProtoMessage() {}

func (x *URLLink_TwitterCard_IPad) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLLink_TwitterCard_IPad.ProtoReflect.Descriptor instead.
func (*URLLink_TwitterCard_IPad) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{9, 3, 2}
}

func (x *URLLink_TwitterCard_IPad) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *URLLink_TwitterCard_IPad) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *URLLink_TwitterCard_IPad) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type URLLink_TwitterCard_GooglePlay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // `meta:"twitter:app:name:googleplay"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`     // `meta:"twitter:app:id:googleplay"`
	Url  string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`   // `meta:"twitter:app:url:googleplay"`
}

func (x *URLLink_TwitterCard_GooglePlay) Reset() {
	*x = URLLink_TwitterCard_GooglePlay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLLink_TwitterCard_GooglePlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLLink_TwitterCard_GooglePlay) ProtoMessage() {}

func (x *URLLink_TwitterCard_GooglePlay) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLLink_TwitterCard_GooglePlay.ProtoReflect.Descriptor instead.
func (*URLLink_TwitterCard_GooglePlay) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{9, 3, 3}
}

func (x *URLLink_TwitterCard_GooglePlay) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *URLLink_TwitterCard_GooglePlay) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *URLLink_TwitterCard_GooglePlay) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

var File_data_proto protoreflect.FileDescriptor

var file_data_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x12, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x12, 0x22, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x55, 0x52, 0x4c, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x27, 0x0a, 0x06, 0x64, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x06, 0x64, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x77, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x1a, 0x4e,
	0x0a, 0x0e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a,
	0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x0c, 0x53, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x0d, 0x57, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x55, 0x52, 0x4c, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xf3,
	0x01, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x54, 0x77, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x54, 0x77, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x1a, 0xb1, 0x02, 0x0a, 0x06, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x61, 0x72, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x44,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x07, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x44,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x06, 0x61, 0x63, 0x63,
	0x65, 0x6e, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x65,
	0x72, 0x74, 0x69, 0x61, 0x72, 0x79, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x6e, 0x74,
	0x50, 0x69, 0x6e, 0x6b, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x6e, 0x74,
	0x42, 0x6c, 0x75, 0x65, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x76, 0x79, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x6e, 0x74,
	0x50, 0x75, 0x72, 0x70, 0x6c, 0x65, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x68, 0x69, 0x74, 0x65, 0x10, 0x0a, 0x12, 0x08,
	0x0a, 0x04, 0x47, 0x72, 0x65, 0x79, 0x10, 0x0b, 0x1a, 0xd0, 0x01, 0x0a, 0x05, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x27, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x54, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x10, 0x05,
	0x12, 0x09, 0x0a, 0x05, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x10, 0x06, 0x1a, 0xc5, 0x07, 0x0a, 0x06,
	0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x53, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x2e, 0x54, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x2b,
	0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x73, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x7f, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x12, 0x24, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x55, 0x52, 0x4c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x08, 0x66, 0x65,
	0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x55, 0x52, 0x4c, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2a, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x55, 0x52, 0x4c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0xd0, 0x01, 0x0a, 0x04, 0x54, 0x69, 0x6c,
	0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x2e, 0x54, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x42, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x65, 0x65, 0x64, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x74, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x10, 0x04, 0x1a, 0x6c, 0x0a, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x55, 0x52, 0x4c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x07,
	0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x6f, 0x22, 0x8e, 0x01, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x69, 0x6b, 0x54, 0x6f, 0x6b, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x59, 0x6f, 0x75, 0x54, 0x75, 0x62, 0x65, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x65, 0x64,
	0x69, 0x75, 0x6d, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x63, 0x68, 0x61, 0x74, 0x10, 0x07,
	0x12, 0x0a, 0x0a, 0x06, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08,
	0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x49, 0x6e, 0x10, 0x09, 0x22, 0x57, 0x0a, 0x0a, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x10, 0x04, 0x22, 0xaa, 0x02, 0x0a, 0x05, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x1f, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x3f, 0x0a, 0x0a, 0x50, 0x65, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x27, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x10, 0x02,
	0x22, 0xdd, 0x01, 0x0a, 0x0a, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x27, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x51, 0x0a,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x58, 0x49, 0x54, 0x10, 0x05,
	0x22, 0x99, 0x02, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x50, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1f, 0x0a, 0x03, 0x67,
	0x65, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6f, 0x52, 0x03, 0x67, 0x65, 0x6f, 0x1a, 0x3f, 0x0a, 0x03,
	0x47, 0x65, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x1a, 0x8c, 0x01,
	0x0a, 0x02, 0x49, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xc9, 0x01, 0x0a,
	0x04, 0x4d, 0x49, 0x4d, 0x45, 0x12, 0x1e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4d, 0x49, 0x4d, 0x45, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x71, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x55, 0x44, 0x49,
	0x4f, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x44, 0x46, 0x10,
	0x04, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x50, 0x52, 0x45, 0x41, 0x44, 0x53, 0x48, 0x45,
	0x45, 0x54, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x07, 0x12,
	0x07, 0x0a, 0x03, 0x53, 0x4e, 0x52, 0x10, 0x08, 0x22, 0x80, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4a, 0x6f, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xd1, 0x04, 0x0a, 0x08,
	0x53, 0x6f, 0x6e, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x6f, 0x6e, 0x72, 0x46, 0x69, 0x6c, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x1a, 0xcc, 0x03, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x6d, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x4d, 0x49, 0x4d, 0x45, 0x52, 0x04,
	0x6d, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53,
	0x6f, 0x6e, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0xc8, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x54, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x54,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x22,
	0x8d, 0x02, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x6f, 0x6e, 0x72, 0x46, 0x69, 0x6c,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x55, 0x52, 0x4c, 0x4c, 0x69, 0x6e, 0x6b,
	0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x83, 0x02, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x08, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x24, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x6f, 0x6e, 0x72, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x55, 0x52, 0x4c, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x90, 0x0c, 0x0a, 0x07, 0x55, 0x52, 0x4c, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x69, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x55, 0x52, 0x4c, 0x4c,
	0x69, 0x6e, 0x6b, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x55, 0x52, 0x4c,
	0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x52, 0x06, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x55, 0x52,
	0x4c, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x52, 0x06, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x12, 0x2e, 0x0a, 0x07,
	0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x55, 0x52, 0x4c, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x07, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x82, 0x01, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x6e, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x82, 0x01, 0x0a, 0x0e,
	0x4f, 0x70, 0x65, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x1a, 0x54, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x55, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xff, 0x05, 0x0a, 0x0b, 0x54, 0x77, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x55, 0x52, 0x4c,
	0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x33, 0x0a, 0x06, 0x69, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x55, 0x52, 0x4c, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x06, 0x69, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x69, 0x70, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x55, 0x52, 0x4c, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x54, 0x77, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x50, 0x61, 0x64, 0x52, 0x04, 0x69,
	0x70, 0x61, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x55, 0x52, 0x4c, 0x4c, 0x69, 0x6e,
	0x6b, 0x2e, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x1a, 0x60, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0x3e, 0x0a, 0x06, 0x49, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0x3c, 0x0a, 0x04, 0x49, 0x50, 0x61, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x1a, 0x42, 0x0a, 0x0a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x2a, 0x5b, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x4c,
	0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x49, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x10,
	0x04, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x10, 0x06, 0x42, 0x09, 0x5a, 0x07, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_data_proto_rawDescOnce sync.Once
	file_data_proto_rawDescData = file_data_proto_rawDesc
)

func file_data_proto_rawDescGZIP() []byte {
	file_data_proto_rawDescOnce.Do(func() {
		file_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_data_proto_rawDescData)
	})
	return file_data_proto_rawDescData
}

var file_data_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_data_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_data_proto_goTypes = []interface{}{
	(Payload)(0),                           // 0: Payload
	(Contact_Design_Color)(0),              // 1: Contact.Design.Color
	(Contact_Field_Kind)(0),                // 2: Contact.Field.Kind
	(Contact_Social_Provider)(0),           // 3: Contact.Social.Provider
	(Contact_Social_Visibility)(0),         // 4: Contact.Social.Visibility
	(Contact_Social_Tile_Display)(0),       // 5: Contact.Social.Tile.Display
	(Lobby_Type)(0),                        // 6: Lobby.Type
	(LobbyEvent_Event)(0),                  // 7: LobbyEvent.Event
	(MIME_Type)(0),                         // 8: MIME.Type
	(*Contact)(nil),                        // 9: Contact
	(*Lobby)(nil),                          // 10: Lobby
	(*LobbyEvent)(nil),                     // 11: LobbyEvent
	(*Location)(nil),                       // 12: Location
	(*MIME)(nil),                           // 13: MIME
	(*RemoteInfo)(nil),                     // 14: RemoteInfo
	(*SonrFile)(nil),                       // 15: SonrFile
	(*Transfer)(nil),                       // 16: Transfer
	(*TransferCard)(nil),                   // 17: TransferCard
	(*URLLink)(nil),                        // 18: URLLink
	nil,                                    // 19: Contact.AddressesEntry
	nil,                                    // 20: Contact.GeneralEntry
	nil,                                    // 21: Contact.SocialsEntry
	nil,                                    // 22: Contact.WebsitesEntry
	(*Contact_Address)(nil),                // 23: Contact.Address
	(*Contact_Design)(nil),                 // 24: Contact.Design
	(*Contact_Field)(nil),                  // 25: Contact.Field
	(*Contact_Social)(nil),                 // 26: Contact.Social
	(*Contact_Social_Links)(nil),           // 27: Contact.Social.Links
	(*Contact_Social_Tile)(nil),            // 28: Contact.Social.Tile
	(*Contact_Social_User)(nil),            // 29: Contact.Social.User
	nil,                                    // 30: Lobby.PeersEntry
	(*Location_Geo)(nil),                   // 31: Location.Geo
	(*Location_IP)(nil),                    // 32: Location.IP
	(*SonrFile_Metadata)(nil),              // 33: SonrFile.Metadata
	(*SonrFile_Metadata_Properties)(nil),   // 34: SonrFile.Metadata.Properties
	(*URLLink_OpenGraphImage)(nil),         // 35: URLLink.OpenGraphImage
	(*URLLink_OpenGraphVideo)(nil),         // 36: URLLink.OpenGraphVideo
	(*URLLink_OpenGraphAudio)(nil),         // 37: URLLink.OpenGraphAudio
	(*URLLink_TwitterCard)(nil),            // 38: URLLink.TwitterCard
	(*URLLink_TwitterCard_Player)(nil),     // 39: URLLink.TwitterCard.Player
	(*URLLink_TwitterCard_IPhone)(nil),     // 40: URLLink.TwitterCard.IPhone
	(*URLLink_TwitterCard_IPad)(nil),       // 41: URLLink.TwitterCard.IPad
	(*URLLink_TwitterCard_GooglePlay)(nil), // 42: URLLink.TwitterCard.GooglePlay
	(*Profile)(nil),                        // 43: Profile
	(*Peer)(nil),                           // 44: Peer
}
var file_data_proto_depIdxs = []int32{
	43, // 0: Contact.profile:type_name -> Profile
	18, // 1: Contact.link:type_name -> URLLink
	24, // 2: Contact.design:type_name -> Contact.Design
	19, // 3: Contact.addresses:type_name -> Contact.AddressesEntry
	20, // 4: Contact.general:type_name -> Contact.GeneralEntry
	21, // 5: Contact.socials:type_name -> Contact.SocialsEntry
	22, // 6: Contact.websites:type_name -> Contact.WebsitesEntry
	6,  // 7: Lobby.type:type_name -> Lobby.Type
	30, // 8: Lobby.peers:type_name -> Lobby.PeersEntry
	44, // 9: Lobby.user:type_name -> Peer
	7,  // 10: LobbyEvent.event:type_name -> LobbyEvent.Event
	44, // 11: LobbyEvent.from:type_name -> Peer
	32, // 12: Location.ip:type_name -> Location.IP
	31, // 13: Location.geo:type_name -> Location.Geo
	8,  // 14: MIME.type:type_name -> MIME.Type
	0,  // 15: SonrFile.payload:type_name -> Payload
	33, // 16: SonrFile.files:type_name -> SonrFile.Metadata
	0,  // 17: Transfer.payload:type_name -> Payload
	43, // 18: Transfer.receiver:type_name -> Profile
	43, // 19: Transfer.owner:type_name -> Profile
	9,  // 20: Transfer.contact:type_name -> Contact
	15, // 21: Transfer.file:type_name -> SonrFile
	18, // 22: Transfer.url:type_name -> URLLink
	0,  // 23: TransferCard.payload:type_name -> Payload
	43, // 24: TransferCard.receiver:type_name -> Profile
	43, // 25: TransferCard.owner:type_name -> Profile
	9,  // 26: TransferCard.contact:type_name -> Contact
	15, // 27: TransferCard.file:type_name -> SonrFile
	18, // 28: TransferCard.url:type_name -> URLLink
	35, // 29: URLLink.images:type_name -> URLLink.OpenGraphImage
	36, // 30: URLLink.videos:type_name -> URLLink.OpenGraphVideo
	37, // 31: URLLink.audios:type_name -> URLLink.OpenGraphAudio
	38, // 32: URLLink.twitter:type_name -> URLLink.TwitterCard
	23, // 33: Contact.AddressesEntry.value:type_name -> Contact.Address
	25, // 34: Contact.GeneralEntry.value:type_name -> Contact.Field
	26, // 35: Contact.SocialsEntry.value:type_name -> Contact.Social
	18, // 36: Contact.WebsitesEntry.value:type_name -> URLLink
	1,  // 37: Contact.Design.primary:type_name -> Contact.Design.Color
	1,  // 38: Contact.Design.accent:type_name -> Contact.Design.Color
	2,  // 39: Contact.Field.kind:type_name -> Contact.Field.Kind
	3,  // 40: Contact.Social.provider:type_name -> Contact.Social.Provider
	29, // 41: Contact.Social.user:type_name -> Contact.Social.User
	28, // 42: Contact.Social.tile:type_name -> Contact.Social.Tile
	27, // 43: Contact.Social.links:type_name -> Contact.Social.Links
	4,  // 44: Contact.Social.visibility:type_name -> Contact.Social.Visibility
	18, // 45: Contact.Social.Links.feedLink:type_name -> URLLink
	18, // 46: Contact.Social.Links.postLink:type_name -> URLLink
	18, // 47: Contact.Social.Links.profileLink:type_name -> URLLink
	5,  // 48: Contact.Social.Tile.type:type_name -> Contact.Social.Tile.Display
	18, // 49: Contact.Social.User.picture:type_name -> URLLink
	44, // 50: Lobby.PeersEntry.value:type_name -> Peer
	13, // 51: SonrFile.Metadata.mime:type_name -> MIME
	34, // 52: SonrFile.Metadata.properties:type_name -> SonrFile.Metadata.Properties
	39, // 53: URLLink.TwitterCard.player:type_name -> URLLink.TwitterCard.Player
	40, // 54: URLLink.TwitterCard.iphone:type_name -> URLLink.TwitterCard.IPhone
	41, // 55: URLLink.TwitterCard.ipad:type_name -> URLLink.TwitterCard.IPad
	42, // 56: URLLink.TwitterCard.googlePlay:type_name -> URLLink.TwitterCard.GooglePlay
	57, // [57:57] is the sub-list for method output_type
	57, // [57:57] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_data_proto_init() }
func file_data_proto_init() {
	if File_data_proto != nil {
		return
	}
	file_user_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LobbyEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MIME); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonrFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contact_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contact_Design); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contact_Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contact_Social); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contact_Social_Links); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contact_Social_Tile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contact_Social_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location_Geo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location_IP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonrFile_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonrFile_Metadata_Properties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLLink_OpenGraphImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLLink_OpenGraphVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLLink_OpenGraphAudio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLLink_TwitterCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLLink_TwitterCard_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLLink_TwitterCard_IPhone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLLink_TwitterCard_IPad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLLink_TwitterCard_GooglePlay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_data_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Transfer_Contact)(nil),
		(*Transfer_File)(nil),
		(*Transfer_Url)(nil),
	}
	file_data_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*SonrFile_Metadata_ThumbBuffer)(nil),
		(*SonrFile_Metadata_ThumbPath)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_data_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_data_proto_goTypes,
		DependencyIndexes: file_data_proto_depIdxs,
		EnumInfos:         file_data_proto_enumTypes,
		MessageInfos:      file_data_proto_msgTypes,
	}.Build()
	File_data_proto = out.File
	file_data_proto_rawDesc = nil
	file_data_proto_goTypes = nil
	file_data_proto_depIdxs = nil
}
