syntax = "proto3";
package models;
import "peer.proto";
import "data.proto";

// Require Go Package
option go_package = "/models";

// Client Keys for Services
message APIKeys {
  string ipApiKey = 1;        // API Key for the IP Service
  string rapidApiKey = 2;     // API Key for the Rapid API Service
  string handshakeKey = 3;    // API Key for the Handshake Service
  string handshakeSecret = 4; // API Key for the Handshake Service
  string pushKeyPath = 5;     // Path to the push key
  string textileKey = 6;      // Key for the Textile Service
  string textileSecret = 7;   // Secret for the Textile Service
}

// Information about device for User
message Device {
  // Management
  FileSystem fileSystem = 1; // Directories for this Device
  KeyPair keyPair = 2;       // User Public Private Key-Pair
  Platform platform = 3;     // Operating System

  // Identification
  string id = 4;       // Device ID
  string label = 5;    // User Defined Label for this Device
  string hostName = 6; // The hostname of the device.

  // Miscelaneous
  string model = 7;           // Model of Device
  string operatingSystem = 8; // Representation of the host OS or platform.
  string operatingSystemVersion = 9; // Version of the host OS or platform.
}

// FileSystem is for Directores Where Data can be stored
message FileSystem {
  Directory downloads = 1; // Downloaded Files
  Directory support = 2;   // Non Exposed Support Files
  Directory temporary = 3; // Temporary Storage

  // Directory in FileSystem
  message Directory {
    string path = 1; // Path to Directory
    Type type = 2;   // Type of Directory
    enum Type {
      TEMPORARY = 0; // Temporary Cache Storage
      DOWNLOADS = 1; // Transferred Files - Desktop
      SUPPORT = 2;   // Persistent Non Exposed Files - Mobile
      LIBRARY = 3;   // Persistent Non Exposed Files - Desktop
      DOCUMENTS = 4; // Transferred Files - Mobile
    }
  }
}

// KeyPair Encryption Type
enum KeyType {
  RSA = 0;       // RSA Encryption
  Ed25519 = 1;   // Ed25519 Encryption
  Secp256k1 = 2; // Secp256k1 Encryption
  ECDSA = 3;     // ECDSA Encryption
}

// Private Public Key Pair
message KeyPair {
  Private private = 1; // Private Key Ref
  Public public = 2;   // Public Key Ref
  KeyType type = 3;    // Type of Key Encryption

  // User Private Key Saved to Disk
  message Private {
    string path = 1;  // Private Key Path
    bytes buffer = 2; // Key Buffer
  }

  // Public Key for Thread ID/ Libp2p ID
  message Public {
    string base64 = 1; // Base64 Representation of Keys
    bytes buffer = 2;  // Public Key Buffer
  }
}

// Current Node Lifecycle State
enum Lifecycle {
  ACTIVE = 0;  // Resume or Start
  PAUSED = 1;  // User Paused
  STOPPED = 2; // User Quit
}

// Status is User Node Situation
enum Status {
  DEFAULT = 0;   // Default Status on Launch
  IDLE = 1;      // Node has not been Authenticated
  CONNECTED = 2; // Status after starting Host
  AVAILABLE = 3; // Bootstrapped and Visible Locally
  PENDING = 4;   // Awaiting Peer Authorization
  INVITED = 5;   // Has received Invitation
  TRANSFER = 6;  // In Progress of Transfer
  STANDBY = 7;   // Away from Sonr Application
  FAILED = 8;    // Failed to Connect Host
  LINKER = 9;    // Linker Status
}

// User is the Saved Data from Client that Passes to Proxy, During ConnRequest
message User {
  string sName = 1; // User Snr Domain

  // From InitializeRequest
  APIKeys apiKeys = 2; // App Env Variables for API Keys
  Status status = 3;   // Client Node Status
  Device device = 4;   // Clients Current Device

  // From ConnectionRequest
  Peer peer = 5;         // Clients Peer Reference
  Crypto crypto = 6;     // User Cryptographic Data
  Contact contact = 7;   // Users Contact Card
  Location location = 8; // Client Location for Routing
  string pushToken = 9;  // Push Notification Token
  Info info = 10;        // User Info

  // Crypto Data to Place in DHT
  message Crypto {
    string prefix = 1;   // Created from DeviceID and SName
    string mnemonic = 2; // Used to generate fingerprint
  }

  // User Device(s) Info
  message Info {
    Device primary = 1;          // Primary Device
    repeated Device devices = 2; // List of Devices
    KeyPair linkKeys = 3;        // KeyPair for User Device Link
  }
}
