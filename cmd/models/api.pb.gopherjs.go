// Code generated by protoc-gen-gopherjs. DO NOT EDIT.
// source: api.proto

/*
	Package models is a generated protocol buffer package.

	It is generated from these files:
		api.proto
		data.proto
		peer.proto
		error.proto
		user.proto

	It has these top-level messages:
		AuthRequest
		InitializeRequest
		ConnectionRequest
		InviteRequest
		MailboxRequest
		RestRequest
		UpdateRequest
		VerifyRequest
		AuthResponse
		ConnectionResponse
		InviteResponse
		MailboxResponse
		RestResponse
		VerifyResponse
		CompleteEvent
		MailEvent
		ProgressEvent
		StatusEvent
		TopicEvent
		GenericRequest
		GenericResponse
		GenericEvent
		Contact
		MIME
		SFile
		Transfer
		URLLink
		Lobby
		Location
		Peer
		Position
		Profile
		Topic
		ErrorMessage
		APIKeys
		Device
		FileSystem
		KeyPair
		User
*/
package models

import jspb "github.com/johanbrandhorst/protobuf/jspb"

// This is a compile-time assertion to ensure that this generated file
// is compatible with the jspb package it is being compiled against.
const _ = jspb.JspbPackageIsVersion2

// Logging Details
type InitializeRequest_LogLevel int

const (
	InitializeRequest_FATAL    InitializeRequest_LogLevel = 0
	InitializeRequest_CRITICAL InitializeRequest_LogLevel = 1
	InitializeRequest_WARNING  InitializeRequest_LogLevel = 2
	InitializeRequest_DEBUG    InitializeRequest_LogLevel = 3
	InitializeRequest_INFO     InitializeRequest_LogLevel = 4
	InitializeRequest_NONE     InitializeRequest_LogLevel = 5
)

var InitializeRequest_LogLevel_name = map[int]string{
	0: "FATAL",
	1: "CRITICAL",
	2: "WARNING",
	3: "DEBUG",
	4: "INFO",
	5: "NONE",
}
var InitializeRequest_LogLevel_value = map[string]int{
	"FATAL":    0,
	"CRITICAL": 1,
	"WARNING":  2,
	"DEBUG":    3,
	"INFO":     4,
	"NONE":     5,
}

func (x InitializeRequest_LogLevel) String() string {
	return InitializeRequest_LogLevel_name[int(x)]
}

// Internet Connection Type
type ConnectionRequest_InternetType int

const (
	ConnectionRequest_None   ConnectionRequest_InternetType = 0
	ConnectionRequest_Wifi   ConnectionRequest_InternetType = 1
	ConnectionRequest_Mobile ConnectionRequest_InternetType = 2
)

var ConnectionRequest_InternetType_name = map[int]string{
	0: "None",
	1: "Wifi",
	2: "Mobile",
}
var ConnectionRequest_InternetType_value = map[string]int{
	"None":   0,
	"Wifi":   1,
	"Mobile": 2,
}

func (x ConnectionRequest_InternetType) String() string {
	return ConnectionRequest_InternetType_name[int(x)]
}

// User is Returning or New
type ConnectionRequest_UserStatus int

const (
	ConnectionRequest_RETURNING ConnectionRequest_UserStatus = 0
	ConnectionRequest_NEW       ConnectionRequest_UserStatus = 1
)

var ConnectionRequest_UserStatus_name = map[int]string{
	0: "RETURNING",
	1: "NEW",
}
var ConnectionRequest_UserStatus_value = map[string]int{
	"RETURNING": 0,
	"NEW":       1,
}

func (x ConnectionRequest_UserStatus) String() string {
	return ConnectionRequest_UserStatus_name[int(x)]
}

type InviteRequest_Type int

const (
	InviteRequest_None   InviteRequest_Type = 0
	InviteRequest_Local  InviteRequest_Type = 1
	InviteRequest_Flat   InviteRequest_Type = 2
	InviteRequest_Remote InviteRequest_Type = 3
)

var InviteRequest_Type_name = map[int]string{
	0: "None",
	1: "Local",
	2: "Flat",
	3: "Remote",
}
var InviteRequest_Type_value = map[string]int{
	"None":   0,
	"Local":  1,
	"Flat":   2,
	"Remote": 3,
}

func (x InviteRequest_Type) String() string {
	return InviteRequest_Type_name[int(x)]
}

// Mailbox Action
type MailboxRequest_Action int

const (
	MailboxRequest_NONE   MailboxRequest_Action = 0
	MailboxRequest_READ   MailboxRequest_Action = 1
	MailboxRequest_DELETE MailboxRequest_Action = 2
)

var MailboxRequest_Action_name = map[int]string{
	0: "NONE",
	1: "READ",
	2: "DELETE",
}
var MailboxRequest_Action_value = map[string]int{
	"NONE":   0,
	"READ":   1,
	"DELETE": 2,
}

func (x MailboxRequest_Action) String() string {
	return MailboxRequest_Action_name[int(x)]
}

type RestRequest_Method int

const (
	RestRequest_GET    RestRequest_Method = 0
	RestRequest_POST   RestRequest_Method = 1
	RestRequest_PUT    RestRequest_Method = 2
	RestRequest_DELETE RestRequest_Method = 3
	RestRequest_PATCH  RestRequest_Method = 4
)

var RestRequest_Method_name = map[int]string{
	0: "GET",
	1: "POST",
	2: "PUT",
	3: "DELETE",
	4: "PATCH",
}
var RestRequest_Method_value = map[string]int{
	"GET":    0,
	"POST":   1,
	"PUT":    2,
	"DELETE": 3,
	"PATCH":  4,
}

func (x RestRequest_Method) String() string {
	return RestRequest_Method_name[int(x)]
}

// Request Type
type VerifyRequest_Type int

const (
	VerifyRequest_VERIFY VerifyRequest_Type = 0
	VerifyRequest_READ   VerifyRequest_Type = 1
)

var VerifyRequest_Type_name = map[int]string{
	0: "VERIFY",
	1: "READ",
}
var VerifyRequest_Type_value = map[string]int{
	"VERIFY": 0,
	"READ":   1,
}

func (x VerifyRequest_Type) String() string {
	return VerifyRequest_Type_name[int(x)]
}

type InviteResponse_Type int

const (
	InviteResponse_None     InviteResponse_Type = 0
	InviteResponse_Transfer InviteResponse_Type = 1
	InviteResponse_Contact  InviteResponse_Type = 2
)

var InviteResponse_Type_name = map[int]string{
	0: "None",
	1: "Transfer",
	2: "Contact",
}
var InviteResponse_Type_value = map[string]int{
	"None":     0,
	"Transfer": 1,
	"Contact":  2,
}

func (x InviteResponse_Type) String() string {
	return InviteResponse_Type_name[int(x)]
}

// Mailbox Action
type MailboxResponse_Action int

const (
	MailboxResponse_NONE   MailboxResponse_Action = 0
	MailboxResponse_READ   MailboxResponse_Action = 1
	MailboxResponse_DELETE MailboxResponse_Action = 2
)

var MailboxResponse_Action_name = map[int]string{
	0: "NONE",
	1: "READ",
	2: "DELETE",
}
var MailboxResponse_Action_value = map[string]int{
	"NONE":   0,
	"READ":   1,
	"DELETE": 2,
}

func (x MailboxResponse_Action) String() string {
	return MailboxResponse_Action_name[int(x)]
}

type RestResponse_Method int

const (
	RestResponse_GET    RestResponse_Method = 0
	RestResponse_POST   RestResponse_Method = 1
	RestResponse_PUT    RestResponse_Method = 2
	RestResponse_DELETE RestResponse_Method = 3
	RestResponse_PATCH  RestResponse_Method = 4
)

var RestResponse_Method_name = map[int]string{
	0: "GET",
	1: "POST",
	2: "PUT",
	3: "DELETE",
	4: "PATCH",
}
var RestResponse_Method_value = map[string]int{
	"GET":    0,
	"POST":   1,
	"PUT":    2,
	"DELETE": 3,
	"PATCH":  4,
}

func (x RestResponse_Method) String() string {
	return RestResponse_Method_name[int(x)]
}

// Traffic Direction of Session
type CompleteEvent_Direction int

const (
	CompleteEvent_Default  CompleteEvent_Direction = 0
	CompleteEvent_Incoming CompleteEvent_Direction = 1
	CompleteEvent_Outgoing CompleteEvent_Direction = 2
)

var CompleteEvent_Direction_name = map[int]string{
	0: "Default",
	1: "Incoming",
	2: "Outgoing",
}
var CompleteEvent_Direction_value = map[string]int{
	"Default":  0,
	"Incoming": 1,
	"Outgoing": 2,
}

func (x CompleteEvent_Direction) String() string {
	return CompleteEvent_Direction_name[int(x)]
}

// Local Type Event
type TopicEvent_Subject int

const (
	TopicEvent_JOIN    TopicEvent_Subject = 0
	TopicEvent_STANDBY TopicEvent_Subject = 1
	TopicEvent_RESUME  TopicEvent_Subject = 2
	TopicEvent_UPDATE  TopicEvent_Subject = 3
	TopicEvent_EXIT    TopicEvent_Subject = 4
)

var TopicEvent_Subject_name = map[int]string{
	0: "JOIN",
	1: "STANDBY",
	2: "RESUME",
	3: "UPDATE",
	4: "EXIT",
}
var TopicEvent_Subject_value = map[string]int{
	"JOIN":    0,
	"STANDBY": 1,
	"RESUME":  2,
	"UPDATE":  3,
	"EXIT":    4,
}

func (x TopicEvent_Subject) String() string {
	return TopicEvent_Subject_name[int(x)]
}

type GenericRequest_Type int

const (
	GenericRequest_INVITE GenericRequest_Type = 0
	GenericRequest_REST   GenericRequest_Type = 1
)

var GenericRequest_Type_name = map[int]string{
	0: "INVITE",
	1: "REST",
}
var GenericRequest_Type_value = map[string]int{
	"INVITE": 0,
	"REST":   1,
}

func (x GenericRequest_Type) String() string {
	return GenericRequest_Type_name[int(x)]
}

type GenericResponse_Type int

const (
	GenericResponse_CONNECTION GenericResponse_Type = 0
	GenericResponse_INVITE     GenericResponse_Type = 1
	GenericResponse_REST       GenericResponse_Type = 2
)

var GenericResponse_Type_name = map[int]string{
	0: "CONNECTION",
	1: "INVITE",
	2: "REST",
}
var GenericResponse_Type_value = map[string]int{
	"CONNECTION": 0,
	"INVITE":     1,
	"REST":       2,
}

func (x GenericResponse_Type) String() string {
	return GenericResponse_Type_name[int(x)]
}

// Type of Event
type GenericEvent_Type int

const (
	GenericEvent_COMPLETE GenericEvent_Type = 0
	GenericEvent_MAIL     GenericEvent_Type = 1
	GenericEvent_PROGRESS GenericEvent_Type = 2
	GenericEvent_TOPIC    GenericEvent_Type = 3
)

var GenericEvent_Type_name = map[int]string{
	0: "COMPLETE",
	1: "MAIL",
	2: "PROGRESS",
	3: "TOPIC",
}
var GenericEvent_Type_value = map[string]int{
	"COMPLETE": 0,
	"MAIL":     1,
	"PROGRESS": 2,
	"TOPIC":    3,
}

func (x GenericEvent_Type) String() string {
	return GenericEvent_Type_name[int(x)]
}

// Message for Signing Request (Hmac Sha256)
type AuthRequest struct {
	// Value to be signed
	SName    string
	Mnemonic string
}

// GetSName gets the SName of the AuthRequest.
func (m *AuthRequest) GetSName() (x string) {
	if m == nil {
		return x
	}
	return m.SName
}

// GetMnemonic gets the Mnemonic of the AuthRequest.
func (m *AuthRequest) GetMnemonic() (x string) {
	if m == nil {
		return x
	}
	return m.Mnemonic
}

// MarshalToWriter marshals AuthRequest to the provided writer.
func (m *AuthRequest) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.SName) > 0 {
		writer.WriteString(1, m.SName)
	}

	if len(m.Mnemonic) > 0 {
		writer.WriteString(2, m.Mnemonic)
	}

	return
}

// Marshal marshals AuthRequest to a slice of bytes.
func (m *AuthRequest) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a AuthRequest from the provided reader.
func (m *AuthRequest) UnmarshalFromReader(reader jspb.Reader) *AuthRequest {
	for reader.Next() {
		if m == nil {
			m = &AuthRequest{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.SName = reader.ReadString()
		case 2:
			m.Mnemonic = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a AuthRequest from a slice of bytes.
func (m *AuthRequest) Unmarshal(rawBytes []byte) (*AuthRequest, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// First Message Sent with Device and API Keys
type InitializeRequest struct {
	Device    *Device
	ApiKeys   *APIKeys
	LogLevel  InitializeRequest_LogLevel
	ResetKeys bool
}

// GetDevice gets the Device of the InitializeRequest.
func (m *InitializeRequest) GetDevice() (x *Device) {
	if m == nil {
		return x
	}
	return m.Device
}

// GetApiKeys gets the ApiKeys of the InitializeRequest.
func (m *InitializeRequest) GetApiKeys() (x *APIKeys) {
	if m == nil {
		return x
	}
	return m.ApiKeys
}

// GetLogLevel gets the LogLevel of the InitializeRequest.
func (m *InitializeRequest) GetLogLevel() (x InitializeRequest_LogLevel) {
	if m == nil {
		return x
	}
	return m.LogLevel
}

// GetResetKeys gets the ResetKeys of the InitializeRequest.
func (m *InitializeRequest) GetResetKeys() (x bool) {
	if m == nil {
		return x
	}
	return m.ResetKeys
}

// MarshalToWriter marshals InitializeRequest to the provided writer.
func (m *InitializeRequest) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.Device != nil {
		writer.WriteMessage(1, func() {
			m.Device.MarshalToWriter(writer)
		})
	}

	if m.ApiKeys != nil {
		writer.WriteMessage(2, func() {
			m.ApiKeys.MarshalToWriter(writer)
		})
	}

	if int(m.LogLevel) != 0 {
		writer.WriteEnum(3, int(m.LogLevel))
	}

	if m.ResetKeys {
		writer.WriteBool(4, m.ResetKeys)
	}

	return
}

// Marshal marshals InitializeRequest to a slice of bytes.
func (m *InitializeRequest) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a InitializeRequest from the provided reader.
func (m *InitializeRequest) UnmarshalFromReader(reader jspb.Reader) *InitializeRequest {
	for reader.Next() {
		if m == nil {
			m = &InitializeRequest{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			reader.ReadMessage(func() {
				m.Device = m.Device.UnmarshalFromReader(reader)
			})
		case 2:
			reader.ReadMessage(func() {
				m.ApiKeys = m.ApiKeys.UnmarshalFromReader(reader)
			})
		case 3:
			m.LogLevel = InitializeRequest_LogLevel(reader.ReadEnum())
		case 4:
			m.ResetKeys = reader.ReadBool()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a InitializeRequest from a slice of bytes.
func (m *InitializeRequest) Unmarshal(rawBytes []byte) (*InitializeRequest, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Connection Message to Establish Sonr Host/API/Topic
type ConnectionRequest struct {
	ApiKeys        *APIKeys
	Location       *Location
	Contact        *Contact
	Type           ConnectionRequest_InternetType
	HostOptions    *ConnectionRequest_HostOptions
	ServiceOptions *ConnectionRequest_ServiceOptions
	Status         ConnectionRequest_UserStatus
	PushToken      string
}

// GetApiKeys gets the ApiKeys of the ConnectionRequest.
func (m *ConnectionRequest) GetApiKeys() (x *APIKeys) {
	if m == nil {
		return x
	}
	return m.ApiKeys
}

// GetLocation gets the Location of the ConnectionRequest.
func (m *ConnectionRequest) GetLocation() (x *Location) {
	if m == nil {
		return x
	}
	return m.Location
}

// GetContact gets the Contact of the ConnectionRequest.
func (m *ConnectionRequest) GetContact() (x *Contact) {
	if m == nil {
		return x
	}
	return m.Contact
}

// GetType gets the Type of the ConnectionRequest.
func (m *ConnectionRequest) GetType() (x ConnectionRequest_InternetType) {
	if m == nil {
		return x
	}
	return m.Type
}

// GetHostOptions gets the HostOptions of the ConnectionRequest.
func (m *ConnectionRequest) GetHostOptions() (x *ConnectionRequest_HostOptions) {
	if m == nil {
		return x
	}
	return m.HostOptions
}

// GetServiceOptions gets the ServiceOptions of the ConnectionRequest.
func (m *ConnectionRequest) GetServiceOptions() (x *ConnectionRequest_ServiceOptions) {
	if m == nil {
		return x
	}
	return m.ServiceOptions
}

// GetStatus gets the Status of the ConnectionRequest.
func (m *ConnectionRequest) GetStatus() (x ConnectionRequest_UserStatus) {
	if m == nil {
		return x
	}
	return m.Status
}

// GetPushToken gets the PushToken of the ConnectionRequest.
func (m *ConnectionRequest) GetPushToken() (x string) {
	if m == nil {
		return x
	}
	return m.PushToken
}

// MarshalToWriter marshals ConnectionRequest to the provided writer.
func (m *ConnectionRequest) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.ApiKeys != nil {
		writer.WriteMessage(1, func() {
			m.ApiKeys.MarshalToWriter(writer)
		})
	}

	if m.Location != nil {
		writer.WriteMessage(2, func() {
			m.Location.MarshalToWriter(writer)
		})
	}

	if m.Contact != nil {
		writer.WriteMessage(3, func() {
			m.Contact.MarshalToWriter(writer)
		})
	}

	if int(m.Type) != 0 {
		writer.WriteEnum(4, int(m.Type))
	}

	if m.HostOptions != nil {
		writer.WriteMessage(5, func() {
			m.HostOptions.MarshalToWriter(writer)
		})
	}

	if m.ServiceOptions != nil {
		writer.WriteMessage(6, func() {
			m.ServiceOptions.MarshalToWriter(writer)
		})
	}

	if int(m.Status) != 0 {
		writer.WriteEnum(7, int(m.Status))
	}

	if len(m.PushToken) > 0 {
		writer.WriteString(8, m.PushToken)
	}

	return
}

// Marshal marshals ConnectionRequest to a slice of bytes.
func (m *ConnectionRequest) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a ConnectionRequest from the provided reader.
func (m *ConnectionRequest) UnmarshalFromReader(reader jspb.Reader) *ConnectionRequest {
	for reader.Next() {
		if m == nil {
			m = &ConnectionRequest{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			reader.ReadMessage(func() {
				m.ApiKeys = m.ApiKeys.UnmarshalFromReader(reader)
			})
		case 2:
			reader.ReadMessage(func() {
				m.Location = m.Location.UnmarshalFromReader(reader)
			})
		case 3:
			reader.ReadMessage(func() {
				m.Contact = m.Contact.UnmarshalFromReader(reader)
			})
		case 4:
			m.Type = ConnectionRequest_InternetType(reader.ReadEnum())
		case 5:
			reader.ReadMessage(func() {
				m.HostOptions = m.HostOptions.UnmarshalFromReader(reader)
			})
		case 6:
			reader.ReadMessage(func() {
				m.ServiceOptions = m.ServiceOptions.UnmarshalFromReader(reader)
			})
		case 7:
			m.Status = ConnectionRequest_UserStatus(reader.ReadEnum())
		case 8:
			m.PushToken = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a ConnectionRequest from a slice of bytes.
func (m *ConnectionRequest) Unmarshal(rawBytes []byte) (*ConnectionRequest, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Libp2p Host Options
type ConnectionRequest_HostOptions struct {
	QuicTransport   bool
	HttpTransport   bool
	WebrtcTransport bool
	MdnsDiscovery   bool
}

// GetQuicTransport gets the QuicTransport of the ConnectionRequest_HostOptions.
func (m *ConnectionRequest_HostOptions) GetQuicTransport() (x bool) {
	if m == nil {
		return x
	}
	return m.QuicTransport
}

// GetHttpTransport gets the HttpTransport of the ConnectionRequest_HostOptions.
func (m *ConnectionRequest_HostOptions) GetHttpTransport() (x bool) {
	if m == nil {
		return x
	}
	return m.HttpTransport
}

// GetWebrtcTransport gets the WebrtcTransport of the ConnectionRequest_HostOptions.
func (m *ConnectionRequest_HostOptions) GetWebrtcTransport() (x bool) {
	if m == nil {
		return x
	}
	return m.WebrtcTransport
}

// GetMdnsDiscovery gets the MdnsDiscovery of the ConnectionRequest_HostOptions.
func (m *ConnectionRequest_HostOptions) GetMdnsDiscovery() (x bool) {
	if m == nil {
		return x
	}
	return m.MdnsDiscovery
}

// MarshalToWriter marshals ConnectionRequest_HostOptions to the provided writer.
func (m *ConnectionRequest_HostOptions) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.QuicTransport {
		writer.WriteBool(1, m.QuicTransport)
	}

	if m.HttpTransport {
		writer.WriteBool(2, m.HttpTransport)
	}

	if m.WebrtcTransport {
		writer.WriteBool(3, m.WebrtcTransport)
	}

	if m.MdnsDiscovery {
		writer.WriteBool(4, m.MdnsDiscovery)
	}

	return
}

// Marshal marshals ConnectionRequest_HostOptions to a slice of bytes.
func (m *ConnectionRequest_HostOptions) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a ConnectionRequest_HostOptions from the provided reader.
func (m *ConnectionRequest_HostOptions) UnmarshalFromReader(reader jspb.Reader) *ConnectionRequest_HostOptions {
	for reader.Next() {
		if m == nil {
			m = &ConnectionRequest_HostOptions{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.QuicTransport = reader.ReadBool()
		case 2:
			m.HttpTransport = reader.ReadBool()
		case 3:
			m.WebrtcTransport = reader.ReadBool()
		case 4:
			m.MdnsDiscovery = reader.ReadBool()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a ConnectionRequest_HostOptions from a slice of bytes.
func (m *ConnectionRequest_HostOptions) Unmarshal(rawBytes []byte) (*ConnectionRequest_HostOptions, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Service Configuration
type ConnectionRequest_ServiceOptions struct {
	Textile  bool
	Mailbox  bool
	Buckets  bool
	Push     bool
	ThreadDB string
}

// GetTextile gets the Textile of the ConnectionRequest_ServiceOptions.
func (m *ConnectionRequest_ServiceOptions) GetTextile() (x bool) {
	if m == nil {
		return x
	}
	return m.Textile
}

// GetMailbox gets the Mailbox of the ConnectionRequest_ServiceOptions.
func (m *ConnectionRequest_ServiceOptions) GetMailbox() (x bool) {
	if m == nil {
		return x
	}
	return m.Mailbox
}

// GetBuckets gets the Buckets of the ConnectionRequest_ServiceOptions.
func (m *ConnectionRequest_ServiceOptions) GetBuckets() (x bool) {
	if m == nil {
		return x
	}
	return m.Buckets
}

// GetPush gets the Push of the ConnectionRequest_ServiceOptions.
func (m *ConnectionRequest_ServiceOptions) GetPush() (x bool) {
	if m == nil {
		return x
	}
	return m.Push
}

// GetThreadDB gets the ThreadDB of the ConnectionRequest_ServiceOptions.
func (m *ConnectionRequest_ServiceOptions) GetThreadDB() (x string) {
	if m == nil {
		return x
	}
	return m.ThreadDB
}

// MarshalToWriter marshals ConnectionRequest_ServiceOptions to the provided writer.
func (m *ConnectionRequest_ServiceOptions) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.Textile {
		writer.WriteBool(1, m.Textile)
	}

	if m.Mailbox {
		writer.WriteBool(2, m.Mailbox)
	}

	if m.Buckets {
		writer.WriteBool(3, m.Buckets)
	}

	if m.Push {
		writer.WriteBool(4, m.Push)
	}

	if len(m.ThreadDB) > 0 {
		writer.WriteString(5, m.ThreadDB)
	}

	return
}

// Marshal marshals ConnectionRequest_ServiceOptions to a slice of bytes.
func (m *ConnectionRequest_ServiceOptions) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a ConnectionRequest_ServiceOptions from the provided reader.
func (m *ConnectionRequest_ServiceOptions) UnmarshalFromReader(reader jspb.Reader) *ConnectionRequest_ServiceOptions {
	for reader.Next() {
		if m == nil {
			m = &ConnectionRequest_ServiceOptions{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Textile = reader.ReadBool()
		case 2:
			m.Mailbox = reader.ReadBool()
		case 3:
			m.Buckets = reader.ReadBool()
		case 4:
			m.Push = reader.ReadBool()
		case 5:
			m.ThreadDB = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a ConnectionRequest_ServiceOptions from a slice of bytes.
func (m *ConnectionRequest_ServiceOptions) Unmarshal(rawBytes []byte) (*ConnectionRequest_ServiceOptions, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Invitation Message sent on RPC
type InviteRequest struct {
	Payload  Payload
	From     *Peer
	To       *Peer
	Transfer *Transfer
	Type     InviteRequest_Type
	Protocol string
}

// GetPayload gets the Payload of the InviteRequest.
func (m *InviteRequest) GetPayload() (x Payload) {
	if m == nil {
		return x
	}
	return m.Payload
}

// GetFrom gets the From of the InviteRequest.
func (m *InviteRequest) GetFrom() (x *Peer) {
	if m == nil {
		return x
	}
	return m.From
}

// GetTo gets the To of the InviteRequest.
func (m *InviteRequest) GetTo() (x *Peer) {
	if m == nil {
		return x
	}
	return m.To
}

// GetTransfer gets the Transfer of the InviteRequest.
func (m *InviteRequest) GetTransfer() (x *Transfer) {
	if m == nil {
		return x
	}
	return m.Transfer
}

// GetType gets the Type of the InviteRequest.
func (m *InviteRequest) GetType() (x InviteRequest_Type) {
	if m == nil {
		return x
	}
	return m.Type
}

// GetProtocol gets the Protocol of the InviteRequest.
func (m *InviteRequest) GetProtocol() (x string) {
	if m == nil {
		return x
	}
	return m.Protocol
}

// MarshalToWriter marshals InviteRequest to the provided writer.
func (m *InviteRequest) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if int(m.Payload) != 0 {
		writer.WriteEnum(1, int(m.Payload))
	}

	if m.From != nil {
		writer.WriteMessage(2, func() {
			m.From.MarshalToWriter(writer)
		})
	}

	if m.To != nil {
		writer.WriteMessage(3, func() {
			m.To.MarshalToWriter(writer)
		})
	}

	if m.Transfer != nil {
		writer.WriteMessage(4, func() {
			m.Transfer.MarshalToWriter(writer)
		})
	}

	if int(m.Type) != 0 {
		writer.WriteEnum(5, int(m.Type))
	}

	if len(m.Protocol) > 0 {
		writer.WriteString(6, m.Protocol)
	}

	return
}

// Marshal marshals InviteRequest to a slice of bytes.
func (m *InviteRequest) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a InviteRequest from the provided reader.
func (m *InviteRequest) UnmarshalFromReader(reader jspb.Reader) *InviteRequest {
	for reader.Next() {
		if m == nil {
			m = &InviteRequest{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Payload = Payload(reader.ReadEnum())
		case 2:
			reader.ReadMessage(func() {
				m.From = m.From.UnmarshalFromReader(reader)
			})
		case 3:
			reader.ReadMessage(func() {
				m.To = m.To.UnmarshalFromReader(reader)
			})
		case 4:
			reader.ReadMessage(func() {
				m.Transfer = m.Transfer.UnmarshalFromReader(reader)
			})
		case 5:
			m.Type = InviteRequest_Type(reader.ReadEnum())
		case 6:
			m.Protocol = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a InviteRequest from a slice of bytes.
func (m *InviteRequest) Unmarshal(rawBytes []byte) (*InviteRequest, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Mailbox message handling
type MailboxRequest struct {
	ID     string
	Action MailboxRequest_Action
}

// GetID gets the ID of the MailboxRequest.
func (m *MailboxRequest) GetID() (x string) {
	if m == nil {
		return x
	}
	return m.ID
}

// GetAction gets the Action of the MailboxRequest.
func (m *MailboxRequest) GetAction() (x MailboxRequest_Action) {
	if m == nil {
		return x
	}
	return m.Action
}

// MarshalToWriter marshals MailboxRequest to the provided writer.
func (m *MailboxRequest) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.ID) > 0 {
		writer.WriteString(1, m.ID)
	}

	if int(m.Action) != 0 {
		writer.WriteEnum(2, int(m.Action))
	}

	return
}

// Marshal marshals MailboxRequest to a slice of bytes.
func (m *MailboxRequest) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a MailboxRequest from the provided reader.
func (m *MailboxRequest) UnmarshalFromReader(reader jspb.Reader) *MailboxRequest {
	for reader.Next() {
		if m == nil {
			m = &MailboxRequest{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.ID = reader.ReadString()
		case 2:
			m.Action = MailboxRequest_Action(reader.ReadEnum())
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a MailboxRequest from a slice of bytes.
func (m *MailboxRequest) Unmarshal(rawBytes []byte) (*MailboxRequest, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// REST API Request over HTTP
type RestRequest struct {
	Method     RestRequest_Method
	Function   string
	Parameters map[string]string
	// User Address to Perform Method on
	//
	// Types that are valid to be assigned to Address:
	//	*RestRequest_Peer
	//	*RestRequest_Id
	//	*RestRequest_SName
	Address isRestRequest_Address
}

// isRestRequest_Address is used to distinguish types assignable to Address
type isRestRequest_Address interface{ isRestRequest_Address() }

// RestRequest_Peer is assignable to Address
type RestRequest_Peer struct {
	Peer *Peer
}

// RestRequest_Id is assignable to Address
type RestRequest_Id struct {
	Id string
}

// RestRequest_SName is assignable to Address
type RestRequest_SName struct {
	SName string
}

func (*RestRequest_Peer) isRestRequest_Address()  {}
func (*RestRequest_Id) isRestRequest_Address()    {}
func (*RestRequest_SName) isRestRequest_Address() {}

// GetAddress gets the Address of the RestRequest.
func (m *RestRequest) GetAddress() (x isRestRequest_Address) {
	if m == nil {
		return x
	}
	return m.Address
}

// GetMethod gets the Method of the RestRequest.
func (m *RestRequest) GetMethod() (x RestRequest_Method) {
	if m == nil {
		return x
	}
	return m.Method
}

// GetFunction gets the Function of the RestRequest.
func (m *RestRequest) GetFunction() (x string) {
	if m == nil {
		return x
	}
	return m.Function
}

// GetParameters gets the Parameters of the RestRequest.
func (m *RestRequest) GetParameters() (x map[string]string) {
	if m == nil {
		return x
	}
	return m.Parameters
}

// GetPeer gets the Peer of the RestRequest.
func (m *RestRequest) GetPeer() (x *Peer) {
	if v, ok := m.GetAddress().(*RestRequest_Peer); ok {
		return v.Peer
	}
	return x
}

// GetId gets the Id of the RestRequest.
func (m *RestRequest) GetId() (x string) {
	if v, ok := m.GetAddress().(*RestRequest_Id); ok {
		return v.Id
	}
	return x
}

// GetSName gets the SName of the RestRequest.
func (m *RestRequest) GetSName() (x string) {
	if v, ok := m.GetAddress().(*RestRequest_SName); ok {
		return v.SName
	}
	return x
}

// MarshalToWriter marshals RestRequest to the provided writer.
func (m *RestRequest) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	switch t := m.Address.(type) {
	case *RestRequest_Peer:
		if t.Peer != nil {
			writer.WriteMessage(4, func() {
				t.Peer.MarshalToWriter(writer)
			})
		}
	case *RestRequest_Id:
		if len(t.Id) > 0 {
			writer.WriteString(5, t.Id)
		}
	case *RestRequest_SName:
		if len(t.SName) > 0 {
			writer.WriteString(6, t.SName)
		}
	}

	if int(m.Method) != 0 {
		writer.WriteEnum(1, int(m.Method))
	}

	if len(m.Function) > 0 {
		writer.WriteString(2, m.Function)
	}

	if len(m.Parameters) > 0 {
		for key, value := range m.Parameters {
			writer.WriteMessage(3, func() {
				writer.WriteString(1, key)
				writer.WriteString(2, value)
			})
		}
	}

	return
}

// Marshal marshals RestRequest to a slice of bytes.
func (m *RestRequest) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a RestRequest from the provided reader.
func (m *RestRequest) UnmarshalFromReader(reader jspb.Reader) *RestRequest {
	for reader.Next() {
		if m == nil {
			m = &RestRequest{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Method = RestRequest_Method(reader.ReadEnum())
		case 2:
			m.Function = reader.ReadString()
		case 3:
			if m.Parameters == nil {
				m.Parameters = map[string]string{}
			}
			reader.ReadMessage(func() {
				var key string
				var value string
				for reader.Next() {
					switch reader.GetFieldNumber() {
					case 1:
						key = reader.ReadString()
					case 2:
						value = reader.ReadString()
					}
					m.Parameters[key] = value
				}
			})
		case 4:
			reader.ReadMessage(func() {
				m.Address = &RestRequest_Peer{
					Peer: new(Peer).UnmarshalFromReader(reader),
				}
			})
		case 5:
			m.Address = &RestRequest_Id{
				Id: reader.ReadString(),
			}
		case 6:
			m.Address = &RestRequest_SName{
				SName: reader.ReadString(),
			}
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a RestRequest from a slice of bytes.
func (m *RestRequest) Unmarshal(rawBytes []byte) (*RestRequest, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Updated Peer Info Request
type UpdateRequest struct {
	// Types that are valid to be assigned to Data:
	//	*UpdateRequest_Properties
	//	*UpdateRequest_Contact
	//	*UpdateRequest_Position
	//	*UpdateRequest_Connectivity
	//	*UpdateRequest_PushToken
	Data isUpdateRequest_Data
}

// isUpdateRequest_Data is used to distinguish types assignable to Data
type isUpdateRequest_Data interface{ isUpdateRequest_Data() }

// UpdateRequest_Properties is assignable to Data
type UpdateRequest_Properties struct {
	Properties *Peer_Properties
}

// UpdateRequest_Contact is assignable to Data
type UpdateRequest_Contact struct {
	Contact *Contact
}

// UpdateRequest_Position is assignable to Data
type UpdateRequest_Position struct {
	Position *Position
}

// UpdateRequest_Connectivity is assignable to Data
type UpdateRequest_Connectivity struct {
	Connectivity ConnectionRequest_InternetType
}

// UpdateRequest_PushToken is assignable to Data
type UpdateRequest_PushToken struct {
	PushToken string
}

func (*UpdateRequest_Properties) isUpdateRequest_Data()   {}
func (*UpdateRequest_Contact) isUpdateRequest_Data()      {}
func (*UpdateRequest_Position) isUpdateRequest_Data()     {}
func (*UpdateRequest_Connectivity) isUpdateRequest_Data() {}
func (*UpdateRequest_PushToken) isUpdateRequest_Data()    {}

// GetData gets the Data of the UpdateRequest.
func (m *UpdateRequest) GetData() (x isUpdateRequest_Data) {
	if m == nil {
		return x
	}
	return m.Data
}

// GetProperties gets the Properties of the UpdateRequest.
func (m *UpdateRequest) GetProperties() (x *Peer_Properties) {
	if v, ok := m.GetData().(*UpdateRequest_Properties); ok {
		return v.Properties
	}
	return x
}

// GetContact gets the Contact of the UpdateRequest.
func (m *UpdateRequest) GetContact() (x *Contact) {
	if v, ok := m.GetData().(*UpdateRequest_Contact); ok {
		return v.Contact
	}
	return x
}

// GetPosition gets the Position of the UpdateRequest.
func (m *UpdateRequest) GetPosition() (x *Position) {
	if v, ok := m.GetData().(*UpdateRequest_Position); ok {
		return v.Position
	}
	return x
}

// GetConnectivity gets the Connectivity of the UpdateRequest.
func (m *UpdateRequest) GetConnectivity() (x ConnectionRequest_InternetType) {
	if v, ok := m.GetData().(*UpdateRequest_Connectivity); ok {
		return v.Connectivity
	}
	return x
}

// GetPushToken gets the PushToken of the UpdateRequest.
func (m *UpdateRequest) GetPushToken() (x string) {
	if v, ok := m.GetData().(*UpdateRequest_PushToken); ok {
		return v.PushToken
	}
	return x
}

// MarshalToWriter marshals UpdateRequest to the provided writer.
func (m *UpdateRequest) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	switch t := m.Data.(type) {
	case *UpdateRequest_Properties:
		if t.Properties != nil {
			writer.WriteMessage(1, func() {
				t.Properties.MarshalToWriter(writer)
			})
		}
	case *UpdateRequest_Contact:
		if t.Contact != nil {
			writer.WriteMessage(2, func() {
				t.Contact.MarshalToWriter(writer)
			})
		}
	case *UpdateRequest_Position:
		if t.Position != nil {
			writer.WriteMessage(3, func() {
				t.Position.MarshalToWriter(writer)
			})
		}
	case *UpdateRequest_Connectivity:
		if int(t.Connectivity) != 0 {
			writer.WriteEnum(4, int(t.Connectivity))
		}
	case *UpdateRequest_PushToken:
		if len(t.PushToken) > 0 {
			writer.WriteString(5, t.PushToken)
		}
	}

	return
}

// Marshal marshals UpdateRequest to a slice of bytes.
func (m *UpdateRequest) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a UpdateRequest from the provided reader.
func (m *UpdateRequest) UnmarshalFromReader(reader jspb.Reader) *UpdateRequest {
	for reader.Next() {
		if m == nil {
			m = &UpdateRequest{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			reader.ReadMessage(func() {
				m.Data = &UpdateRequest_Properties{
					Properties: new(Peer_Properties).UnmarshalFromReader(reader),
				}
			})
		case 2:
			reader.ReadMessage(func() {
				m.Data = &UpdateRequest_Contact{
					Contact: new(Contact).UnmarshalFromReader(reader),
				}
			})
		case 3:
			reader.ReadMessage(func() {
				m.Data = &UpdateRequest_Position{
					Position: new(Position).UnmarshalFromReader(reader),
				}
			})
		case 4:
			m.Data = &UpdateRequest_Connectivity{
				Connectivity: ConnectionRequest_InternetType(reader.ReadEnum()),
			}
		case 5:
			m.Data = &UpdateRequest_PushToken{
				PushToken: reader.ReadString(),
			}
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a UpdateRequest from a slice of bytes.
func (m *UpdateRequest) Unmarshal(rawBytes []byte) (*UpdateRequest, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Message for Verification Request
type VerifyRequest struct {
	// Data is the original value
	//
	// Types that are valid to be assigned to Data:
	//	*VerifyRequest_BufferValue
	//	*VerifyRequest_TextValue
	Data isVerifyRequest_Data
	// Sig is the value to be verified against data
	//
	// Types that are valid to be assigned to Sig:
	//	*VerifyRequest_SignedBuffer
	//	*VerifyRequest_SignedText
	Sig  isVerifyRequest_Sig
	Type VerifyRequest_Type
}

// isVerifyRequest_Data is used to distinguish types assignable to Data
type isVerifyRequest_Data interface{ isVerifyRequest_Data() }

// isVerifyRequest_Sig is used to distinguish types assignable to Sig
type isVerifyRequest_Sig interface{ isVerifyRequest_Sig() }

// VerifyRequest_BufferValue is assignable to Data
type VerifyRequest_BufferValue struct {
	BufferValue []byte
}

// VerifyRequest_TextValue is assignable to Data
type VerifyRequest_TextValue struct {
	TextValue string
}

// VerifyRequest_SignedBuffer is assignable to Sig
type VerifyRequest_SignedBuffer struct {
	SignedBuffer []byte
}

// VerifyRequest_SignedText is assignable to Sig
type VerifyRequest_SignedText struct {
	SignedText string
}

func (*VerifyRequest_BufferValue) isVerifyRequest_Data() {}
func (*VerifyRequest_TextValue) isVerifyRequest_Data()   {}
func (*VerifyRequest_SignedBuffer) isVerifyRequest_Sig() {}
func (*VerifyRequest_SignedText) isVerifyRequest_Sig()   {}

// GetData gets the Data of the VerifyRequest.
func (m *VerifyRequest) GetData() (x isVerifyRequest_Data) {
	if m == nil {
		return x
	}
	return m.Data
}

// GetSig gets the Sig of the VerifyRequest.
func (m *VerifyRequest) GetSig() (x isVerifyRequest_Sig) {
	if m == nil {
		return x
	}
	return m.Sig
}

// GetBufferValue gets the BufferValue of the VerifyRequest.
func (m *VerifyRequest) GetBufferValue() (x []byte) {
	if v, ok := m.GetData().(*VerifyRequest_BufferValue); ok {
		return v.BufferValue
	}
	return x
}

// GetTextValue gets the TextValue of the VerifyRequest.
func (m *VerifyRequest) GetTextValue() (x string) {
	if v, ok := m.GetData().(*VerifyRequest_TextValue); ok {
		return v.TextValue
	}
	return x
}

// GetSignedBuffer gets the SignedBuffer of the VerifyRequest.
func (m *VerifyRequest) GetSignedBuffer() (x []byte) {
	if v, ok := m.GetSig().(*VerifyRequest_SignedBuffer); ok {
		return v.SignedBuffer
	}
	return x
}

// GetSignedText gets the SignedText of the VerifyRequest.
func (m *VerifyRequest) GetSignedText() (x string) {
	if v, ok := m.GetSig().(*VerifyRequest_SignedText); ok {
		return v.SignedText
	}
	return x
}

// GetType gets the Type of the VerifyRequest.
func (m *VerifyRequest) GetType() (x VerifyRequest_Type) {
	if m == nil {
		return x
	}
	return m.Type
}

// MarshalToWriter marshals VerifyRequest to the provided writer.
func (m *VerifyRequest) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	switch t := m.Data.(type) {
	case *VerifyRequest_BufferValue:
		if len(t.BufferValue) > 0 {
			writer.WriteBytes(1, t.BufferValue)
		}
	case *VerifyRequest_TextValue:
		if len(t.TextValue) > 0 {
			writer.WriteString(2, t.TextValue)
		}
	}

	switch t := m.Sig.(type) {
	case *VerifyRequest_SignedBuffer:
		if len(t.SignedBuffer) > 0 {
			writer.WriteBytes(3, t.SignedBuffer)
		}
	case *VerifyRequest_SignedText:
		if len(t.SignedText) > 0 {
			writer.WriteString(4, t.SignedText)
		}
	}

	if int(m.Type) != 0 {
		writer.WriteEnum(5, int(m.Type))
	}

	return
}

// Marshal marshals VerifyRequest to a slice of bytes.
func (m *VerifyRequest) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a VerifyRequest from the provided reader.
func (m *VerifyRequest) UnmarshalFromReader(reader jspb.Reader) *VerifyRequest {
	for reader.Next() {
		if m == nil {
			m = &VerifyRequest{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Data = &VerifyRequest_BufferValue{
				BufferValue: reader.ReadBytes(),
			}
		case 2:
			m.Data = &VerifyRequest_TextValue{
				TextValue: reader.ReadString(),
			}
		case 3:
			m.Sig = &VerifyRequest_SignedBuffer{
				SignedBuffer: reader.ReadBytes(),
			}
		case 4:
			m.Sig = &VerifyRequest_SignedText{
				SignedText: reader.ReadString(),
			}
		case 5:
			m.Type = VerifyRequest_Type(reader.ReadEnum())
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a VerifyRequest from a slice of bytes.
func (m *VerifyRequest) Unmarshal(rawBytes []byte) (*VerifyRequest, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Message for Signing Response (Hmac Sha256)
type AuthResponse struct {
	IsSigned bool
	// Resulting Signed Values
	SignedPrefix      string
	SignedFingerprint string
	PublicKey         string
	GivenSName        string
	GivenMnemonic     string
}

// GetIsSigned gets the IsSigned of the AuthResponse.
func (m *AuthResponse) GetIsSigned() (x bool) {
	if m == nil {
		return x
	}
	return m.IsSigned
}

// GetSignedPrefix gets the SignedPrefix of the AuthResponse.
func (m *AuthResponse) GetSignedPrefix() (x string) {
	if m == nil {
		return x
	}
	return m.SignedPrefix
}

// GetSignedFingerprint gets the SignedFingerprint of the AuthResponse.
func (m *AuthResponse) GetSignedFingerprint() (x string) {
	if m == nil {
		return x
	}
	return m.SignedFingerprint
}

// GetPublicKey gets the PublicKey of the AuthResponse.
func (m *AuthResponse) GetPublicKey() (x string) {
	if m == nil {
		return x
	}
	return m.PublicKey
}

// GetGivenSName gets the GivenSName of the AuthResponse.
func (m *AuthResponse) GetGivenSName() (x string) {
	if m == nil {
		return x
	}
	return m.GivenSName
}

// GetGivenMnemonic gets the GivenMnemonic of the AuthResponse.
func (m *AuthResponse) GetGivenMnemonic() (x string) {
	if m == nil {
		return x
	}
	return m.GivenMnemonic
}

// MarshalToWriter marshals AuthResponse to the provided writer.
func (m *AuthResponse) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.IsSigned {
		writer.WriteBool(1, m.IsSigned)
	}

	if len(m.SignedPrefix) > 0 {
		writer.WriteString(2, m.SignedPrefix)
	}

	if len(m.SignedFingerprint) > 0 {
		writer.WriteString(3, m.SignedFingerprint)
	}

	if len(m.PublicKey) > 0 {
		writer.WriteString(4, m.PublicKey)
	}

	if len(m.GivenSName) > 0 {
		writer.WriteString(5, m.GivenSName)
	}

	if len(m.GivenMnemonic) > 0 {
		writer.WriteString(6, m.GivenMnemonic)
	}

	return
}

// Marshal marshals AuthResponse to a slice of bytes.
func (m *AuthResponse) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a AuthResponse from the provided reader.
func (m *AuthResponse) UnmarshalFromReader(reader jspb.Reader) *AuthResponse {
	for reader.Next() {
		if m == nil {
			m = &AuthResponse{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.IsSigned = reader.ReadBool()
		case 2:
			m.SignedPrefix = reader.ReadString()
		case 3:
			m.SignedFingerprint = reader.ReadString()
		case 4:
			m.PublicKey = reader.ReadString()
		case 5:
			m.GivenSName = reader.ReadString()
		case 6:
			m.GivenMnemonic = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a AuthResponse from a slice of bytes.
func (m *AuthResponse) Unmarshal(rawBytes []byte) (*AuthResponse, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Response from Connection Request
type ConnectionResponse struct {
	HostActive    bool
	MdnsActive    bool
	TextileActive bool
	LocalTopic    *Topic
	Threads       map[string]*ConnectionResponse_TextileThread
}

// GetHostActive gets the HostActive of the ConnectionResponse.
func (m *ConnectionResponse) GetHostActive() (x bool) {
	if m == nil {
		return x
	}
	return m.HostActive
}

// GetMdnsActive gets the MdnsActive of the ConnectionResponse.
func (m *ConnectionResponse) GetMdnsActive() (x bool) {
	if m == nil {
		return x
	}
	return m.MdnsActive
}

// GetTextileActive gets the TextileActive of the ConnectionResponse.
func (m *ConnectionResponse) GetTextileActive() (x bool) {
	if m == nil {
		return x
	}
	return m.TextileActive
}

// GetLocalTopic gets the LocalTopic of the ConnectionResponse.
func (m *ConnectionResponse) GetLocalTopic() (x *Topic) {
	if m == nil {
		return x
	}
	return m.LocalTopic
}

// GetThreads gets the Threads of the ConnectionResponse.
func (m *ConnectionResponse) GetThreads() (x map[string]*ConnectionResponse_TextileThread) {
	if m == nil {
		return x
	}
	return m.Threads
}

// MarshalToWriter marshals ConnectionResponse to the provided writer.
func (m *ConnectionResponse) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.HostActive {
		writer.WriteBool(1, m.HostActive)
	}

	if m.MdnsActive {
		writer.WriteBool(2, m.MdnsActive)
	}

	if m.TextileActive {
		writer.WriteBool(3, m.TextileActive)
	}

	if m.LocalTopic != nil {
		writer.WriteMessage(4, func() {
			m.LocalTopic.MarshalToWriter(writer)
		})
	}

	if len(m.Threads) > 0 {
		for key, value := range m.Threads {
			writer.WriteMessage(5, func() {
				writer.WriteString(1, key)
				writer.WriteMessage(2, func() {
					value.MarshalToWriter(writer)
				})
			})
		}
	}

	return
}

// Marshal marshals ConnectionResponse to a slice of bytes.
func (m *ConnectionResponse) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a ConnectionResponse from the provided reader.
func (m *ConnectionResponse) UnmarshalFromReader(reader jspb.Reader) *ConnectionResponse {
	for reader.Next() {
		if m == nil {
			m = &ConnectionResponse{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.HostActive = reader.ReadBool()
		case 2:
			m.MdnsActive = reader.ReadBool()
		case 3:
			m.TextileActive = reader.ReadBool()
		case 4:
			reader.ReadMessage(func() {
				m.LocalTopic = m.LocalTopic.UnmarshalFromReader(reader)
			})
		case 5:
			if m.Threads == nil {
				m.Threads = map[string]*ConnectionResponse_TextileThread{}
			}
			reader.ReadMessage(func() {
				var key string
				var value *ConnectionResponse_TextileThread
				for reader.Next() {
					switch reader.GetFieldNumber() {
					case 1:
						key = reader.ReadString()
					case 2:
						reader.ReadMessage(func() {
							value = new(ConnectionResponse_TextileThread).UnmarshalFromReader(reader)
						})
					}
					m.Threads[key] = value
				}
			})
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a ConnectionResponse from a slice of bytes.
func (m *ConnectionResponse) Unmarshal(rawBytes []byte) (*ConnectionResponse, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Textile Thread
type ConnectionResponse_TextileThread struct {
	Id        string
	Multiaddr string
	Key       string
	Name      string
}

// GetId gets the Id of the ConnectionResponse_TextileThread.
func (m *ConnectionResponse_TextileThread) GetId() (x string) {
	if m == nil {
		return x
	}
	return m.Id
}

// GetMultiaddr gets the Multiaddr of the ConnectionResponse_TextileThread.
func (m *ConnectionResponse_TextileThread) GetMultiaddr() (x string) {
	if m == nil {
		return x
	}
	return m.Multiaddr
}

// GetKey gets the Key of the ConnectionResponse_TextileThread.
func (m *ConnectionResponse_TextileThread) GetKey() (x string) {
	if m == nil {
		return x
	}
	return m.Key
}

// GetName gets the Name of the ConnectionResponse_TextileThread.
func (m *ConnectionResponse_TextileThread) GetName() (x string) {
	if m == nil {
		return x
	}
	return m.Name
}

// MarshalToWriter marshals ConnectionResponse_TextileThread to the provided writer.
func (m *ConnectionResponse_TextileThread) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Id) > 0 {
		writer.WriteString(1, m.Id)
	}

	if len(m.Multiaddr) > 0 {
		writer.WriteString(2, m.Multiaddr)
	}

	if len(m.Key) > 0 {
		writer.WriteString(3, m.Key)
	}

	if len(m.Name) > 0 {
		writer.WriteString(4, m.Name)
	}

	return
}

// Marshal marshals ConnectionResponse_TextileThread to a slice of bytes.
func (m *ConnectionResponse_TextileThread) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a ConnectionResponse_TextileThread from the provided reader.
func (m *ConnectionResponse_TextileThread) UnmarshalFromReader(reader jspb.Reader) *ConnectionResponse_TextileThread {
	for reader.Next() {
		if m == nil {
			m = &ConnectionResponse_TextileThread{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Id = reader.ReadString()
		case 2:
			m.Multiaddr = reader.ReadString()
		case 3:
			m.Key = reader.ReadString()
		case 4:
			m.Name = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a ConnectionResponse_TextileThread from a slice of bytes.
func (m *ConnectionResponse_TextileThread) Unmarshal(rawBytes []byte) (*ConnectionResponse_TextileThread, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Reply Message sent on RPC
type InviteResponse struct {
	Type     InviteResponse_Type
	Decision bool
	From     *Peer
	To       *Peer
	FlatMode bool
	Transfer *Transfer
	Protocol string
}

// GetType gets the Type of the InviteResponse.
func (m *InviteResponse) GetType() (x InviteResponse_Type) {
	if m == nil {
		return x
	}
	return m.Type
}

// GetDecision gets the Decision of the InviteResponse.
func (m *InviteResponse) GetDecision() (x bool) {
	if m == nil {
		return x
	}
	return m.Decision
}

// GetFrom gets the From of the InviteResponse.
func (m *InviteResponse) GetFrom() (x *Peer) {
	if m == nil {
		return x
	}
	return m.From
}

// GetTo gets the To of the InviteResponse.
func (m *InviteResponse) GetTo() (x *Peer) {
	if m == nil {
		return x
	}
	return m.To
}

// GetFlatMode gets the FlatMode of the InviteResponse.
func (m *InviteResponse) GetFlatMode() (x bool) {
	if m == nil {
		return x
	}
	return m.FlatMode
}

// GetTransfer gets the Transfer of the InviteResponse.
func (m *InviteResponse) GetTransfer() (x *Transfer) {
	if m == nil {
		return x
	}
	return m.Transfer
}

// GetProtocol gets the Protocol of the InviteResponse.
func (m *InviteResponse) GetProtocol() (x string) {
	if m == nil {
		return x
	}
	return m.Protocol
}

// MarshalToWriter marshals InviteResponse to the provided writer.
func (m *InviteResponse) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if int(m.Type) != 0 {
		writer.WriteEnum(1, int(m.Type))
	}

	if m.Decision {
		writer.WriteBool(2, m.Decision)
	}

	if m.From != nil {
		writer.WriteMessage(3, func() {
			m.From.MarshalToWriter(writer)
		})
	}

	if m.To != nil {
		writer.WriteMessage(4, func() {
			m.To.MarshalToWriter(writer)
		})
	}

	if m.FlatMode {
		writer.WriteBool(5, m.FlatMode)
	}

	if m.Transfer != nil {
		writer.WriteMessage(6, func() {
			m.Transfer.MarshalToWriter(writer)
		})
	}

	if len(m.Protocol) > 0 {
		writer.WriteString(7, m.Protocol)
	}

	return
}

// Marshal marshals InviteResponse to a slice of bytes.
func (m *InviteResponse) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a InviteResponse from the provided reader.
func (m *InviteResponse) UnmarshalFromReader(reader jspb.Reader) *InviteResponse {
	for reader.Next() {
		if m == nil {
			m = &InviteResponse{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Type = InviteResponse_Type(reader.ReadEnum())
		case 2:
			m.Decision = reader.ReadBool()
		case 3:
			reader.ReadMessage(func() {
				m.From = m.From.UnmarshalFromReader(reader)
			})
		case 4:
			reader.ReadMessage(func() {
				m.To = m.To.UnmarshalFromReader(reader)
			})
		case 5:
			m.FlatMode = reader.ReadBool()
		case 6:
			reader.ReadMessage(func() {
				m.Transfer = m.Transfer.UnmarshalFromReader(reader)
			})
		case 7:
			m.Protocol = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a InviteResponse from a slice of bytes.
func (m *InviteResponse) Unmarshal(rawBytes []byte) (*InviteResponse, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Mailbox message handling
type MailboxResponse struct {
	ID      string
	Action  MailboxResponse_Action
	Success bool
}

// GetID gets the ID of the MailboxResponse.
func (m *MailboxResponse) GetID() (x string) {
	if m == nil {
		return x
	}
	return m.ID
}

// GetAction gets the Action of the MailboxResponse.
func (m *MailboxResponse) GetAction() (x MailboxResponse_Action) {
	if m == nil {
		return x
	}
	return m.Action
}

// GetSuccess gets the Success of the MailboxResponse.
func (m *MailboxResponse) GetSuccess() (x bool) {
	if m == nil {
		return x
	}
	return m.Success
}

// MarshalToWriter marshals MailboxResponse to the provided writer.
func (m *MailboxResponse) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.ID) > 0 {
		writer.WriteString(1, m.ID)
	}

	if int(m.Action) != 0 {
		writer.WriteEnum(2, int(m.Action))
	}

	if m.Success {
		writer.WriteBool(3, m.Success)
	}

	return
}

// Marshal marshals MailboxResponse to a slice of bytes.
func (m *MailboxResponse) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a MailboxResponse from the provided reader.
func (m *MailboxResponse) UnmarshalFromReader(reader jspb.Reader) *MailboxResponse {
	for reader.Next() {
		if m == nil {
			m = &MailboxResponse{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.ID = reader.ReadString()
		case 2:
			m.Action = MailboxResponse_Action(reader.ReadEnum())
		case 3:
			m.Success = reader.ReadBool()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a MailboxResponse from a slice of bytes.
func (m *MailboxResponse) Unmarshal(rawBytes []byte) (*MailboxResponse, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// REST API Response over HTTP
type RestResponse struct {
	Method   RestResponse_Method
	Function string
	Code     int32
	Body     map[string]string
}

// GetMethod gets the Method of the RestResponse.
func (m *RestResponse) GetMethod() (x RestResponse_Method) {
	if m == nil {
		return x
	}
	return m.Method
}

// GetFunction gets the Function of the RestResponse.
func (m *RestResponse) GetFunction() (x string) {
	if m == nil {
		return x
	}
	return m.Function
}

// GetCode gets the Code of the RestResponse.
func (m *RestResponse) GetCode() (x int32) {
	if m == nil {
		return x
	}
	return m.Code
}

// GetBody gets the Body of the RestResponse.
func (m *RestResponse) GetBody() (x map[string]string) {
	if m == nil {
		return x
	}
	return m.Body
}

// MarshalToWriter marshals RestResponse to the provided writer.
func (m *RestResponse) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if int(m.Method) != 0 {
		writer.WriteEnum(1, int(m.Method))
	}

	if len(m.Function) > 0 {
		writer.WriteString(2, m.Function)
	}

	if m.Code != 0 {
		writer.WriteInt32(3, m.Code)
	}

	if len(m.Body) > 0 {
		for key, value := range m.Body {
			writer.WriteMessage(4, func() {
				writer.WriteString(1, key)
				writer.WriteString(2, value)
			})
		}
	}

	return
}

// Marshal marshals RestResponse to a slice of bytes.
func (m *RestResponse) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a RestResponse from the provided reader.
func (m *RestResponse) UnmarshalFromReader(reader jspb.Reader) *RestResponse {
	for reader.Next() {
		if m == nil {
			m = &RestResponse{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Method = RestResponse_Method(reader.ReadEnum())
		case 2:
			m.Function = reader.ReadString()
		case 3:
			m.Code = reader.ReadInt32()
		case 4:
			if m.Body == nil {
				m.Body = map[string]string{}
			}
			reader.ReadMessage(func() {
				var key string
				var value string
				for reader.Next() {
					switch reader.GetFieldNumber() {
					case 1:
						key = reader.ReadString()
					case 2:
						value = reader.ReadString()
					}
					m.Body[key] = value
				}
			})
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a RestResponse from a slice of bytes.
func (m *RestResponse) Unmarshal(rawBytes []byte) (*RestResponse, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Message for Verification Response
type VerifyResponse struct {
	IsVerified bool
	PublicKey  string
	Error      *ErrorMessage
}

// GetIsVerified gets the IsVerified of the VerifyResponse.
func (m *VerifyResponse) GetIsVerified() (x bool) {
	if m == nil {
		return x
	}
	return m.IsVerified
}

// GetPublicKey gets the PublicKey of the VerifyResponse.
func (m *VerifyResponse) GetPublicKey() (x string) {
	if m == nil {
		return x
	}
	return m.PublicKey
}

// GetError gets the Error of the VerifyResponse.
func (m *VerifyResponse) GetError() (x *ErrorMessage) {
	if m == nil {
		return x
	}
	return m.Error
}

// MarshalToWriter marshals VerifyResponse to the provided writer.
func (m *VerifyResponse) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.IsVerified {
		writer.WriteBool(1, m.IsVerified)
	}

	if len(m.PublicKey) > 0 {
		writer.WriteString(2, m.PublicKey)
	}

	if m.Error != nil {
		writer.WriteMessage(3, func() {
			m.Error.MarshalToWriter(writer)
		})
	}

	return
}

// Marshal marshals VerifyResponse to a slice of bytes.
func (m *VerifyResponse) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a VerifyResponse from the provided reader.
func (m *VerifyResponse) UnmarshalFromReader(reader jspb.Reader) *VerifyResponse {
	for reader.Next() {
		if m == nil {
			m = &VerifyResponse{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.IsVerified = reader.ReadBool()
		case 2:
			m.PublicKey = reader.ReadString()
		case 3:
			reader.ReadMessage(func() {
				m.Error = m.Error.UnmarshalFromReader(reader)
			})
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a VerifyResponse from a slice of bytes.
func (m *VerifyResponse) Unmarshal(rawBytes []byte) (*VerifyResponse, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// --------------------------- //
// -------- Events ----------- //
// --------------------------- //
// Message Sent after Completed Transfer
type CompleteEvent struct {
	Direction CompleteEvent_Direction
	Transfer  *Transfer
}

// GetDirection gets the Direction of the CompleteEvent.
func (m *CompleteEvent) GetDirection() (x CompleteEvent_Direction) {
	if m == nil {
		return x
	}
	return m.Direction
}

// GetTransfer gets the Transfer of the CompleteEvent.
func (m *CompleteEvent) GetTransfer() (x *Transfer) {
	if m == nil {
		return x
	}
	return m.Transfer
}

// MarshalToWriter marshals CompleteEvent to the provided writer.
func (m *CompleteEvent) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if int(m.Direction) != 0 {
		writer.WriteEnum(1, int(m.Direction))
	}

	if m.Transfer != nil {
		writer.WriteMessage(2, func() {
			m.Transfer.MarshalToWriter(writer)
		})
	}

	return
}

// Marshal marshals CompleteEvent to a slice of bytes.
func (m *CompleteEvent) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a CompleteEvent from the provided reader.
func (m *CompleteEvent) UnmarshalFromReader(reader jspb.Reader) *CompleteEvent {
	for reader.Next() {
		if m == nil {
			m = &CompleteEvent{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Direction = CompleteEvent_Direction(reader.ReadEnum())
		case 2:
			reader.ReadMessage(func() {
				m.Transfer = m.Transfer.UnmarshalFromReader(reader)
			})
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a CompleteEvent from a slice of bytes.
func (m *CompleteEvent) Unmarshal(rawBytes []byte) (*CompleteEvent, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// List of Pending Invites through Mailbox
type MailEvent struct {
	CreatedAt int32
	To        string
	Invite    *InviteRequest
	From      string
	ReadAt    int32
	Signature []byte
	ID        string
}

// GetCreatedAt gets the CreatedAt of the MailEvent.
func (m *MailEvent) GetCreatedAt() (x int32) {
	if m == nil {
		return x
	}
	return m.CreatedAt
}

// GetTo gets the To of the MailEvent.
func (m *MailEvent) GetTo() (x string) {
	if m == nil {
		return x
	}
	return m.To
}

// GetInvite gets the Invite of the MailEvent.
func (m *MailEvent) GetInvite() (x *InviteRequest) {
	if m == nil {
		return x
	}
	return m.Invite
}

// GetFrom gets the From of the MailEvent.
func (m *MailEvent) GetFrom() (x string) {
	if m == nil {
		return x
	}
	return m.From
}

// GetReadAt gets the ReadAt of the MailEvent.
func (m *MailEvent) GetReadAt() (x int32) {
	if m == nil {
		return x
	}
	return m.ReadAt
}

// GetSignature gets the Signature of the MailEvent.
func (m *MailEvent) GetSignature() (x []byte) {
	if m == nil {
		return x
	}
	return m.Signature
}

// GetID gets the ID of the MailEvent.
func (m *MailEvent) GetID() (x string) {
	if m == nil {
		return x
	}
	return m.ID
}

// MarshalToWriter marshals MailEvent to the provided writer.
func (m *MailEvent) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.CreatedAt != 0 {
		writer.WriteInt32(1, m.CreatedAt)
	}

	if len(m.To) > 0 {
		writer.WriteString(2, m.To)
	}

	if m.Invite != nil {
		writer.WriteMessage(3, func() {
			m.Invite.MarshalToWriter(writer)
		})
	}

	if len(m.From) > 0 {
		writer.WriteString(4, m.From)
	}

	if m.ReadAt != 0 {
		writer.WriteInt32(5, m.ReadAt)
	}

	if len(m.Signature) > 0 {
		writer.WriteBytes(6, m.Signature)
	}

	if len(m.ID) > 0 {
		writer.WriteString(7, m.ID)
	}

	return
}

// Marshal marshals MailEvent to a slice of bytes.
func (m *MailEvent) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a MailEvent from the provided reader.
func (m *MailEvent) UnmarshalFromReader(reader jspb.Reader) *MailEvent {
	for reader.Next() {
		if m == nil {
			m = &MailEvent{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.CreatedAt = reader.ReadInt32()
		case 2:
			m.To = reader.ReadString()
		case 3:
			reader.ReadMessage(func() {
				m.Invite = m.Invite.UnmarshalFromReader(reader)
			})
		case 4:
			m.From = reader.ReadString()
		case 5:
			m.ReadAt = reader.ReadInt32()
		case 6:
			m.Signature = reader.ReadBytes()
		case 7:
			m.ID = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a MailEvent from a slice of bytes.
func (m *MailEvent) Unmarshal(rawBytes []byte) (*MailEvent, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Transfer Progress Event
type ProgressEvent struct {
	Current  int32
	Total    int32
	Progress float64
}

// GetCurrent gets the Current of the ProgressEvent.
func (m *ProgressEvent) GetCurrent() (x int32) {
	if m == nil {
		return x
	}
	return m.Current
}

// GetTotal gets the Total of the ProgressEvent.
func (m *ProgressEvent) GetTotal() (x int32) {
	if m == nil {
		return x
	}
	return m.Total
}

// GetProgress gets the Progress of the ProgressEvent.
func (m *ProgressEvent) GetProgress() (x float64) {
	if m == nil {
		return x
	}
	return m.Progress
}

// MarshalToWriter marshals ProgressEvent to the provided writer.
func (m *ProgressEvent) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.Current != 0 {
		writer.WriteInt32(1, m.Current)
	}

	if m.Total != 0 {
		writer.WriteInt32(2, m.Total)
	}

	if m.Progress != 0 {
		writer.WriteFloat64(3, m.Progress)
	}

	return
}

// Marshal marshals ProgressEvent to a slice of bytes.
func (m *ProgressEvent) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a ProgressEvent from the provided reader.
func (m *ProgressEvent) UnmarshalFromReader(reader jspb.Reader) *ProgressEvent {
	for reader.Next() {
		if m == nil {
			m = &ProgressEvent{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Current = reader.ReadInt32()
		case 2:
			m.Total = reader.ReadInt32()
		case 3:
			m.Progress = reader.ReadFloat64()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a ProgressEvent from a slice of bytes.
func (m *ProgressEvent) Unmarshal(rawBytes []byte) (*ProgressEvent, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Message for Status Update Event
type StatusEvent struct {
	Value Status
	User  *User
}

// GetValue gets the Value of the StatusEvent.
func (m *StatusEvent) GetValue() (x Status) {
	if m == nil {
		return x
	}
	return m.Value
}

// GetUser gets the User of the StatusEvent.
func (m *StatusEvent) GetUser() (x *User) {
	if m == nil {
		return x
	}
	return m.User
}

// MarshalToWriter marshals StatusEvent to the provided writer.
func (m *StatusEvent) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if int(m.Value) != 0 {
		writer.WriteEnum(1, int(m.Value))
	}

	if m.User != nil {
		writer.WriteMessage(2, func() {
			m.User.MarshalToWriter(writer)
		})
	}

	return
}

// Marshal marshals StatusEvent to a slice of bytes.
func (m *StatusEvent) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a StatusEvent from the provided reader.
func (m *StatusEvent) UnmarshalFromReader(reader jspb.Reader) *StatusEvent {
	for reader.Next() {
		if m == nil {
			m = &StatusEvent{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Value = Status(reader.ReadEnum())
		case 2:
			reader.ReadMessage(func() {
				m.User = m.User.UnmarshalFromReader(reader)
			})
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a StatusEvent from a slice of bytes.
func (m *StatusEvent) Unmarshal(rawBytes []byte) (*StatusEvent, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Message Sent when peer messages Local Topic
type TopicEvent struct {
	Topic   *Topic
	Id      string
	Peer    *Peer
	Subject TopicEvent_Subject
}

// GetTopic gets the Topic of the TopicEvent.
func (m *TopicEvent) GetTopic() (x *Topic) {
	if m == nil {
		return x
	}
	return m.Topic
}

// GetId gets the Id of the TopicEvent.
func (m *TopicEvent) GetId() (x string) {
	if m == nil {
		return x
	}
	return m.Id
}

// GetPeer gets the Peer of the TopicEvent.
func (m *TopicEvent) GetPeer() (x *Peer) {
	if m == nil {
		return x
	}
	return m.Peer
}

// GetSubject gets the Subject of the TopicEvent.
func (m *TopicEvent) GetSubject() (x TopicEvent_Subject) {
	if m == nil {
		return x
	}
	return m.Subject
}

// MarshalToWriter marshals TopicEvent to the provided writer.
func (m *TopicEvent) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.Topic != nil {
		writer.WriteMessage(1, func() {
			m.Topic.MarshalToWriter(writer)
		})
	}

	if len(m.Id) > 0 {
		writer.WriteString(2, m.Id)
	}

	if m.Peer != nil {
		writer.WriteMessage(3, func() {
			m.Peer.MarshalToWriter(writer)
		})
	}

	if int(m.Subject) != 0 {
		writer.WriteEnum(4, int(m.Subject))
	}

	return
}

// Marshal marshals TopicEvent to a slice of bytes.
func (m *TopicEvent) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a TopicEvent from the provided reader.
func (m *TopicEvent) UnmarshalFromReader(reader jspb.Reader) *TopicEvent {
	for reader.Next() {
		if m == nil {
			m = &TopicEvent{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			reader.ReadMessage(func() {
				m.Topic = m.Topic.UnmarshalFromReader(reader)
			})
		case 2:
			m.Id = reader.ReadString()
		case 3:
			reader.ReadMessage(func() {
				m.Peer = m.Peer.UnmarshalFromReader(reader)
			})
		case 4:
			m.Subject = TopicEvent_Subject(reader.ReadEnum())
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a TopicEvent from a slice of bytes.
func (m *TopicEvent) Unmarshal(rawBytes []byte) (*TopicEvent, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Generic Request Message
type GenericRequest struct {
	Type GenericRequest_Type
	Data []byte
}

// GetType gets the Type of the GenericRequest.
func (m *GenericRequest) GetType() (x GenericRequest_Type) {
	if m == nil {
		return x
	}
	return m.Type
}

// GetData gets the Data of the GenericRequest.
func (m *GenericRequest) GetData() (x []byte) {
	if m == nil {
		return x
	}
	return m.Data
}

// MarshalToWriter marshals GenericRequest to the provided writer.
func (m *GenericRequest) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if int(m.Type) != 0 {
		writer.WriteEnum(1, int(m.Type))
	}

	if len(m.Data) > 0 {
		writer.WriteBytes(2, m.Data)
	}

	return
}

// Marshal marshals GenericRequest to a slice of bytes.
func (m *GenericRequest) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a GenericRequest from the provided reader.
func (m *GenericRequest) UnmarshalFromReader(reader jspb.Reader) *GenericRequest {
	for reader.Next() {
		if m == nil {
			m = &GenericRequest{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Type = GenericRequest_Type(reader.ReadEnum())
		case 2:
			m.Data = reader.ReadBytes()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a GenericRequest from a slice of bytes.
func (m *GenericRequest) Unmarshal(rawBytes []byte) (*GenericRequest, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Generic Response Message
type GenericResponse struct {
	Type GenericResponse_Type
	Data []byte
}

// GetType gets the Type of the GenericResponse.
func (m *GenericResponse) GetType() (x GenericResponse_Type) {
	if m == nil {
		return x
	}
	return m.Type
}

// GetData gets the Data of the GenericResponse.
func (m *GenericResponse) GetData() (x []byte) {
	if m == nil {
		return x
	}
	return m.Data
}

// MarshalToWriter marshals GenericResponse to the provided writer.
func (m *GenericResponse) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if int(m.Type) != 0 {
		writer.WriteEnum(1, int(m.Type))
	}

	if len(m.Data) > 0 {
		writer.WriteBytes(2, m.Data)
	}

	return
}

// Marshal marshals GenericResponse to a slice of bytes.
func (m *GenericResponse) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a GenericResponse from the provided reader.
func (m *GenericResponse) UnmarshalFromReader(reader jspb.Reader) *GenericResponse {
	for reader.Next() {
		if m == nil {
			m = &GenericResponse{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Type = GenericResponse_Type(reader.ReadEnum())
		case 2:
			m.Data = reader.ReadBytes()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a GenericResponse from a slice of bytes.
func (m *GenericResponse) Unmarshal(rawBytes []byte) (*GenericResponse, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Generic Event Message
type GenericEvent struct {
	Type GenericEvent_Type
	Data []byte
}

// GetType gets the Type of the GenericEvent.
func (m *GenericEvent) GetType() (x GenericEvent_Type) {
	if m == nil {
		return x
	}
	return m.Type
}

// GetData gets the Data of the GenericEvent.
func (m *GenericEvent) GetData() (x []byte) {
	if m == nil {
		return x
	}
	return m.Data
}

// MarshalToWriter marshals GenericEvent to the provided writer.
func (m *GenericEvent) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if int(m.Type) != 0 {
		writer.WriteEnum(1, int(m.Type))
	}

	if len(m.Data) > 0 {
		writer.WriteBytes(2, m.Data)
	}

	return
}

// Marshal marshals GenericEvent to a slice of bytes.
func (m *GenericEvent) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a GenericEvent from the provided reader.
func (m *GenericEvent) UnmarshalFromReader(reader jspb.Reader) *GenericEvent {
	for reader.Next() {
		if m == nil {
			m = &GenericEvent{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Type = GenericEvent_Type(reader.ReadEnum())
		case 2:
			m.Data = reader.ReadBytes()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a GenericEvent from a slice of bytes.
func (m *GenericEvent) Unmarshal(rawBytes []byte) (*GenericEvent, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}
