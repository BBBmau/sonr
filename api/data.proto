syntax = "proto3";

import "user.proto";

// Require Go Package
option go_package = "/models";

// For Info about Lobby
message Lobby {
  bool isLocal = 1;            // Is Local Lobby
  string name = 2;             // Open Location Code of Lobby
  int32 size = 3;              // Total Number of Devices in Lobby
  int32 count = 4;             // Total Devices in Lobby EXCLUDING User
  map<string, Peer> peers = 5; // Total Data of Active Peers
  Peer user = 6;               // User Peer reference
}

// Message Sent when peer messages Lobby Topic
message LobbyEvent {
  string id = 1;      // Peer ID
  Event event = 2;    // What Peer is Doing
  Peer from = 3;      // User Information
  string to = 4;      // Peer ID for DM
  string message = 5; // Message being sent

  enum Event {
    EXCHANGE = 0; // Peer has joined wants Info
    STANDBY = 1;  // Peer is taking break from lobby
    RESUME = 2;   // Peer has rejoined Lobby
    UPDATE = 3;   // Peer has changed position
    MESSAGE = 4;  // Peer has been messaged by a user
  }
}

// Location from GeoIP and OLC information
message Location {
  bool isFromIP = 1;
  string name = 2;
  string continent = 3;
  string countryCode = 4;
  double latitude = 5;
  double longitude = 6;
  string minorOlc = 7;
  string majorOlc = 8;
}

// For Received Transfer File Information
message Metadata {
  string id = 1;             // Local Asset ID
  string name = 2;           // File Name without Path
  string path = 3;           // File Location
  int32 size = 4;            // File Size in Bytes
  MIME mime = 5;             // Standard Mime Type
  bytes thumbnail = 6;       // Thumbnail Preview of File
  Properties properties = 7; // Media Properties

  message Properties {
    bool isAudio = 1;      // If File is Audio
    bool isImage = 2;      // If File is Image
    bool isVideo = 3;      // If File is Video
    bool hasThumbnail = 4; // If File has thumbnail
    int32 width = 5;       // Media Width
    int32 height = 6;      // Media Height
    int32 duration = 7;    // Length of Video - Optional
    Payload payload = 8;   // SQL: Type of Data received
  }
}

// Protobuf for Standard MIME
message MIME {
  Type type = 1;      // Type of File
  string subtype = 2; // Extension of File
  string value = 3;   // Type/Subtype i.e. (image/jpeg)

  enum Type {
    application = 0; // Document Files
    audio = 1;       // Sound, Audio Files
    image = 2;       // Image Files
    text = 3;        // Text Based Files
    video = 4;       // Video Files
  }
}

// Payload is type of Data being transferred
enum Payload {
  UNDEFINED = 0;    // Not Specified
  CONTACT = 1;      // Sonr Based Contact
  MEDIA = 2;        // Image, Audio, Video
  URL = 3;          // Link to Site
  TEXT = 4;         // Text based document
  PDF = 5;          // PDF File
  PRESENTATION = 6; // Presentation based File from PPT or Keynote
  SPREADSHEET = 7;  // Spreadsheet based File from Excel or Numbers
  OTHER = 8;        // Any other Kind of File
}

// RemoteInfo is for Joining/Creating a New Topic
message RemoteInfo {
  bool isJoin = 1;
  int32 count = 2;
  string display = 3;
  string topic = 4;
  repeated string words = 5;
}

// TransferCard holds data passed between Exchange
message TransferCard {
  int32 id = 1;        // SQL: Id reference
  Payload payload = 2; // SQL: Type of Data received
  int32 received = 3;  // SQL: UnixTime of received Date/Time
  bytes preview = 4;   // SQL: Thumbnail Preview Bytes

  Profile receiver = 5; // PROFILE: General Receiver Info
  Profile owner = 6;    // PROFILE: General Owner Info

  Status status = 7;     // TRANSFER: Status of the Card - File Only
  Contact contact = 8;   // DATA(Optional): Received Contact Information
  Metadata metadata = 9; // DATA(Optional): Received a File or Media
  URLLink url = 10;      // DATA(Optional): Received a Website Link

  // Card Transfer Status
  enum Status {
    NONE = 0;       // Default, Idle or Post-Completion
    INVITE = 1;     // An Invited Transfer
    DIRECT = 2;     // A Direct Transfer
    REPLY = 3;      // A Response Card (Usually Contact only)
    INPROGRESS = 4; // A Transfer in Progress
    COMPLETED = 5;  // A Received and Completed Transfer
  }
}

// URLLink Contains metadata of provided URL
message URLLink {
  string link = 1;                     // Entered URL
  string title = 2;                    // Meta Field for Title
  string type = 3;                     // OG Type
  string url = 4;                      // OG URL Link
  string site = 5;                     // Meta field for site
  string siteName = 6;                 // Meta field for sitename
  string description = 7;              // Meta field for description
  string locale = 8;                   // Meta field for locale
  repeated OpenGraphImage images = 9;  // Images
  repeated OpenGraphVideo videos = 10; // Videos
  repeated OpenGraphAudio audios = 11; // Audios
  TwitterCard twitter = 12;            // Twitter Card
  string content = 13;                 // URL Content

  // OpenGraph Image
  message OpenGraphImage {
    string url = 1;       // `meta:"og:image,og:image:url"`
    string secureUrl = 2; // `meta:"og:image:secure_url"`
    int32 width = 3;      // `meta:"og:image:width"`
    int32 height = 4;     // `meta:"og:image:height"`
    string type = 5;      // `meta:"og:image:type"`
  }

  // OpenGraph Video
  message OpenGraphVideo {
    string url = 1;       // `meta:"og:video,og:video:url"`
    string secureUrl = 2; // `meta:"og:video:secure_url"`
    int32 width = 3;      // `meta:"og:video:width"`
    int32 height = 4;     // `meta:"og:video:height"`
    string type = 5;      // `meta:"og:video:type"`
  }

  // OpenGraph Audio
  message OpenGraphAudio {
    string url = 1;       // `meta:"og:audio,og:audio:url"`
    string secureUrl = 2; // `meta:"og:audio:secure_url"`
    string type = 3;      // `meta:"og:audio:type"`
  }

  // Twitter Card
  message TwitterCard {
    string card = 1;            // `meta:"twitter:card"`
    string site = 2;            // `meta:"twitter:site"`
    string siteId = 3;          // `meta:"twitter:site:id"`
    string creator = 4;         // `meta:"twitter:creator"`
    string creatorId = 5;       // `meta:"twitter:creator:id"`
    string description = 6;     // `meta:"twitter:description"`
    string title = 7;           // `meta:"twitter:title"`
    string image = 8;           // `meta:"twitter:image,twitter:image:src"`
    string imageAlt = 9;        // `meta:"twitter:image:alt"`
    string url = 10;            // `meta:"twitter:url"`
    Player player = 11;         // Twitter Item Player
    IPhone iphone = 12;         // Twitter iPhone Data
    IPad ipad = 13;             // Twitter iPad Data
    GooglePlay googlePlay = 14; // Twitter Android Data

    message Player {
      string url = 1;    // `meta:"twitter:player"`
      int32 width = 2;   // `meta:"twitter:width"`
      int32 height = 3;  // `meta:"twitter:height"`
      string stream = 4; // `meta:"twitter:stream"`
    }

    message IPhone {
      string name = 1; // `meta:"twitter:app:name:iphone"`
      string id = 2;   // `meta:"twitter:app:id:iphone"`
      string url = 3;  // `meta:"twitter:app:url:iphone"`
    }

    message IPad {
      string name = 1; // `meta:"twitter:app:name:ipad"`
      string id = 2;   // `meta:"twitter:app:id:ipad"`
      string url = 3;  // `meta:"twitter:app:url:ipad"`
    }

    message GooglePlay {
      string name = 1; // `meta:"twitter:app:name:googleplay"`
      string id = 2;   // `meta:"twitter:app:id:googleplay"`
      string url = 3;  // `meta:"twitter:app:url:googleplay"`
    }
  }
}
