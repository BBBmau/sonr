syntax = "proto3";

import "user.proto";

// Require Go Package
option go_package = "/models";

// Asset for Images/Files
message Asset {
  Source source = 1;    // Asset Type
  string value = 2;     // Asset Source Value
  string name = 3;      // Asset Name, File Name
  int32 identifier = 4; // Asset Identifier if Name is Number

  enum Source {
    FILE = 0;    // Asset from File
    MEMORY = 1;  // Asset in Memory
    NETWORK = 2; // Asset from Network
    LOCAL = 3;   // Asset from Packaging Flutter/Hover
  }
}

// Contact is Extensive User Info that can be passed
message Contact {
  bool isPublic = 1;      // If Contact card is Public
  Profile profile = 2;    // General Profile Information
  string about = 3;       // Bio of User/About Value
  URLLink publicLink = 4; // URLLink for Public Card if Applicable
  Design design = 5;      // Card Design Properties

  map<string, Field> general = 6; // Base General Contact Fields, Key is Label
  map<string, Address> addresses = 7; // Address Fields, Key is Label
  map<string, Social> socials = 8;    // Social Media Fields, Key is Username

  // Address: Field for Contact field
  message Address {
    bool isPrimary = 1;     // If this is the Primary field for Address
    string label = 2;       // Address Label for Type
    string street = 3;      // Address First Line Street
    string streetTwo = 4;   // Address Second Line Street
    string city = 5;        // City of Address
    string state = 6;       // Address State
    string zipcode = 7;     // Address Zip Code
    string country = 8;     // Address Country
    string countryCode = 9; // Address Country Code
  }

  // Design: Card Design Values
  message Design {
    Asset background = 1; // Background Card Value
    Color primary = 2;    // Primary Color
    Color accent = 3;     // Accent Color for Text/Buttons

    enum Color {
      Transparent = 0;  // Clear Color
      Primary = 1;      // Blue Varient
      Secondary = 2;    // Purple Varient
      Tertiary = 3;     // Green Varient
      Critical = 4;     // Red Varient
      AccentPink = 5;   // Light Pink
      AccentBlue = 6;   // Light Blue
      AccentNavy = 7;   // Strong Navy
      AccentPurple = 8; // Light Purple
      Black = 9;        // Black Varient
      White = 10;       // White Varient
      Grey = 11;        // Grey Varient
    }
  }

  // Field : General Field for Contact field
  message Field {
    bool isPrimary = 1; // If this is the Primary field for Kind
    Kind kind = 2;      // Type of Field
    string label = 3;   // Identifier for Field
    string value = 4;   // Convert Values to String

    enum Kind {
      NAME = 0;    // Name type Field
      DATE = 1;    // DateTime type Field
      GENDER = 2;  // Gender: Male/Female
      PHONE = 3;   // Phone Field
      EMAIL = 4;   // Email Field
      COMPANY = 5; // Company Type Field
      TITLE = 6;   // Title Type Field
    }
  }

  // Social: Field provides Display Information and Provider Information
  message Social {
    // Properties
    bool isPrimary = 1; // If this is the Primary field for SocialMedia Provider
    Provider provider = 2;     // Type of Social Provider
    string username = 3;       // Users handle on Service
    Tile tile = 4;             // Social Tile Position
    Links links = 5;           // Social Links
    Visibility visibility = 6; // Is the User's Account Private

    // Social Provider Links
    message Links {
      URLLink feedLink = 1;    // Link to a Social Feed
      URLLink postLink = 2;    // Link to a Users Post
      URLLink profileLink = 3; // Link to Users Profile
    }

    // Social Media Service
    enum Provider {
      Instagram = 0; // Feed/Post/Link
      TikTok = 1;    // Post/Link
      Facebook = 2;  // Link Only
      YouTube = 3;   // Post/Link
      Spotify = 4;   // Post/Link
      Medium = 5;    // Feed/Post/Link
      Twitter = 6;   // Feed/Post/Link
      Snapchat = 7;  // Link Only
      Github = 8;    // Link Only
      LinkedIn = 9;
    }

    // Tile Display Position
    message Tile {
      Display type = 1; // Type of Tile to be Displayed
      int32 index = 2;  // Position in Contact Array
      int32 row = 3;    // Row Location
      int32 column = 4; // Column Location
      int32 size = 5;   // Size of Tile

      // Social Tile Display Type
      enum Display {
        Icon = 0;     // Default Tile Type, Icon for Provider
        Feed = 1;     // Big Tile Showcases Current User Feed
        Post = 2;     // Medium Tile Showcases a Featured Post
        Profile = 3;  // Small Tile is Direct Link to User Profile
        Playlist = 4; // Playlist type similar to Feed
      }
    }

    // Social Tile Display Type
    enum Visibility {
      Unknown = 0;
      Private = 1;       // Default Tile Type, Icon for Provider
      Public = 2;        // Big Tile Showcases Current User Feed
      PrivateHidden = 3; // Medium Tile Showcases a Featured Post
      PublicHidden = 4;  // Small Tile is Direct Link to User Profile
    }
  }
}

// For Info about Lobby
message Lobby {
  bool isLocal = 1;            // Is Local Lobby
  string name = 2;             // Open Location Code of Lobby
  int32 size = 3;              // Total Number of Devices in Lobby
  int32 count = 4;             // Total Devices in Lobby EXCLUDING User
  map<string, Peer> peers = 5; // Total Data of Active Peers
  Peer user = 6;               // User Peer reference
}

// Message Sent when peer messages Lobby Topic
message LobbyEvent {
  string id = 1;      // Peer ID
  Event event = 2;    // What Peer is Doing
  Peer from = 3;      // User Information
  string to = 4;      // Peer ID for DM
  string message = 5; // Message being sent

  enum Event {
    EXCHANGE = 0; // Peer has joined wants Info
    STANDBY = 1;  // Peer is taking break from lobby
    RESUME = 2;   // Peer has rejoined Lobby
    UPDATE = 3;   // Peer has changed position
    MESSAGE = 4;  // Peer has been messaged by a user
    EXIT = 5;     // Peer has Exited
  }
}

// Location from GeoIP and OLC information
message Location {
  string state = 1;
  string continent = 2;
  string country = 3;
  double latitude = 4;
  double longitude = 5;
  string minorOlc = 6;
  string majorOlc = 7;
}

// Standard MIME with Additional Extensions
message MIME {
  Type type = 1;      // Type of File
  string subtype = 2; // Extension of File
  string value = 3;   // Type/Subtype i.e. (image/jpeg)

  enum Type {
    OTHER = 0;        // Other File Type - If cannot derive from Subtype
    AUDIO = 1;        // Sound, Audio Files
    IMAGE = 2;        // Image Files
    TEXT = 3;         // Text Based Files
    PDF = 4;          // PDF Format
    PRESENTATION = 5; // PPT type Files
    SPREADSHEET = 6;  // CSV/Excel type files
    VIDEO = 7;        // Video Files
    SNR = 8;          // SNR Files
  }
}

// Payload is type of Data being transferred
enum Payload {
  NONE = 0;         // Not Specified
  CONTACT = 1;      // Sonr Based Contact
  FLAT_CONTACT = 2; // Send File as Flat Exchange Automatically Swaps
  FILE = 3;         // File Transfer
  MULTI_FILES = 4;  // Multiple Files
  URL = 5;          // Link to Site
  MEDIA = 6;
}

// RemoteInfo is for Joining/Creating a New Topic
message RemoteInfo {
  bool isJoin = 1;
  int32 count = 2;
  string display = 3;
  string topic = 4;
  repeated string words = 5;
}

// For Transfer File Payload
message SonrFile {
  // Payload of File
  Payload payload = 1;

  // Total Transfer Count
  int32 count = 2;

  // Total Transfer Size
  int32 size = 3;

  // List of Files as Metadata
  repeated Metadata files = 4;

  // Direction of SonrFile
  Direction direction = 5;

  // Traffic Direction of Data
  enum Direction {
    Default = 0;  // From Memory/Viewing
    Incoming = 1; // Incoming Transfer
    Outgoing = 2; // Outgoing Transfer
  }

  // For Received Transfer File Information
  message Metadata {
    string id = 1;             // Local Asset ID
    string name = 2;           // File Name without Path
    string path = 3;           // File Location
    int32 size = 4;            // File Size in Bytes
    MIME mime = 5;             // Standard Mime Type
    bytes thumbnail = 6;       // Thumbnail Preview of File
    Properties properties = 7; // Media Properties

    message Properties {
      bool isAudio = 1;      // If File is Audio
      bool isImage = 2;      // If File is Image
      bool isVideo = 3;      // If File is Video
      bool hasThumbnail = 4; // If File has thumbnail

      int32 width = 5;    // Media Width
      int32 height = 6;   // Media Height
      int32 duration = 7; // Length of Video - Optional
    }
  }
}

// TransferCard holds data passed between Exchange
message TransferCard {
  int32 id = 1;        // SQL: Id reference
  Payload payload = 2; // SQL: Type of Data received
  int32 received = 3;  // SQL: UnixTime of received Date/Time

  Profile receiver = 4; // PROFILE: General Receiver Info
  Profile owner = 5;    // PROFILE: General Owner Info

  Contact contact = 6; // DATA(Optional): Received Contact Information
  SonrFile file = 7;   // DATA(Optional): Received a File
  URLLink url = 8;     // DATA(Optional): Received a Website Link
}

// URLLink Contains metadata of provided URL
message URLLink {
  string link = 1;                     // Entered URL
  string title = 2;                    // Meta Field for Title
  string type = 3;                     // OG Type
  string url = 4;                      // OG URL Link
  string site = 5;                     // Meta field for site
  string siteName = 6;                 // Meta field for sitename
  string description = 7;              // Meta field for description
  string locale = 8;                   // Meta field for locale
  repeated OpenGraphImage images = 9;  // Images
  repeated OpenGraphVideo videos = 10; // Videos
  repeated OpenGraphAudio audios = 11; // Audios
  TwitterCard twitter = 12;            // Twitter Card
  string content = 13;                 // URL Content

  // OpenGraph Image
  message OpenGraphImage {
    string url = 1;       // `meta:"og:image,og:image:url"`
    string secureUrl = 2; // `meta:"og:image:secure_url"`
    int32 width = 3;      // `meta:"og:image:width"`
    int32 height = 4;     // `meta:"og:image:height"`
    string type = 5;      // `meta:"og:image:type"`
  }

  // OpenGraph Video
  message OpenGraphVideo {
    string url = 1;       // `meta:"og:video,og:video:url"`
    string secureUrl = 2; // `meta:"og:video:secure_url"`
    int32 width = 3;      // `meta:"og:video:width"`
    int32 height = 4;     // `meta:"og:video:height"`
    string type = 5;      // `meta:"og:video:type"`
  }

  // OpenGraph Audio
  message OpenGraphAudio {
    string url = 1;       // `meta:"og:audio,og:audio:url"`
    string secureUrl = 2; // `meta:"og:audio:secure_url"`
    string type = 3;      // `meta:"og:audio:type"`
  }

  // Twitter Card
  message TwitterCard {
    string card = 1;            // `meta:"twitter:card"`
    string site = 2;            // `meta:"twitter:site"`
    string siteId = 3;          // `meta:"twitter:site:id"`
    string creator = 4;         // `meta:"twitter:creator"`
    string creatorId = 5;       // `meta:"twitter:creator:id"`
    string description = 6;     // `meta:"twitter:description"`
    string title = 7;           // `meta:"twitter:title"`
    string image = 8;           // `meta:"twitter:image,twitter:image:src"`
    string imageAlt = 9;        // `meta:"twitter:image:alt"`
    string url = 10;            // `meta:"twitter:url"`
    Player player = 11;         // Twitter Item Player
    IPhone iphone = 12;         // Twitter iPhone Data
    IPad ipad = 13;             // Twitter iPad Data
    GooglePlay googlePlay = 14; // Twitter Android Data

    message Player {
      string url = 1;    // `meta:"twitter:player"`
      int32 width = 2;   // `meta:"twitter:width"`
      int32 height = 3;  // `meta:"twitter:height"`
      string stream = 4; // `meta:"twitter:stream"`
    }

    message IPhone {
      string name = 1; // `meta:"twitter:app:name:iphone"`
      string id = 2;   // `meta:"twitter:app:id:iphone"`
      string url = 3;  // `meta:"twitter:app:url:iphone"`
    }

    message IPad {
      string name = 1; // `meta:"twitter:app:name:ipad"`
      string id = 2;   // `meta:"twitter:app:id:ipad"`
      string url = 3;  // `meta:"twitter:app:url:ipad"`
    }

    message GooglePlay {
      string name = 1; // `meta:"twitter:app:name:googleplay"`
      string id = 2;   // `meta:"twitter:app:id:googleplay"`
      string url = 3;  // `meta:"twitter:app:url:googleplay"`
    }
  }
}
