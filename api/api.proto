syntax = "proto3";

import "data.proto";
import "error.proto";
import "peer.proto";
import "user.proto";

// Require Go Package
option go_package = "/models";

// ----------------------------- //
// -------- Requests ----------- //
// ----------------------------- //

// Message for Signing Request (Hmac Sha256)
message AuthRequest {
  // Value to be signed
  string sName = 1;    // SName combined with Device ID and Hashed
  string mnemonic = 2; // Mnemonic Hashed with private key for fingerprint
}

// First Message Sent with Device and API Keys
message InitializeRequest {
  Device device = 1;     // Users Device
  APIKeys apiKeys = 2;   // Client Keys
  LogLevel logLevel = 3; // Set Logging Config

  // Logging Details
  enum LogLevel {
    FATAL = 0;
    CRITICAL = 1;
    WARNING = 2;
    DEBUG = 3;
    INFO = 4;
    NONE = 5;
  }
}

// Connection Message to Establish Sonr Host/API/Topic
message ConnectionRequest {
  APIKeys apiKeys = 1;               // Client Keys
  Location location = 2;             // Current Runtime Location
  Contact contact = 3;               // Users Contact Card
  InternetType type = 4;             // Internet Connection Type
  HostOptions hostOptions = 5;       // Libp2p Host config
  PubsubOptions pubsubOptions = 6;   // Pubsub Configuration
  TextileOptions textileOptions = 7; // Textile Client Config
  UserStatus status = 8;             // User Status

  // Internet Connection Type
  enum InternetType {
    None = 0;
    Wifi = 1;
    Mobile = 2;
  }

  // Libp2p Host Options
  message HostOptions {
    bool quicTransport = 1;
    bool torTransport = 2;
    bool httpTransport = 3;
    bool mdnsDiscovery = 4;
    bool natPortMap = 5;
  }

  // Pubsub Topic Configuration
  message PubsubOptions {
    bool relay = 1; // Relay Topic Messages
  }

  // Textile Configuration
  message TextileOptions {
    bool enabled = 1;    // Enable Textile Client and Threads
    bool mailbox = 2;    // Enable Mailbox
    bool buckets = 3;    // Enable Buckets
    string threadDB = 4; // Address for Database
  }

  // User is Returning or New
  enum UserStatus {
    RETURNING = 0; // Returning User
    NEW = 1;       // New User no Keys yet
  }
}

// Invitation Message sent on RPC
message InviteRequest {
  Payload payload = 1;   // Type of Transfer
  Peer from = 2;         // Users Peer Data
  Peer to = 3;           // Receivers Peer Data
  Transfer transfer = 4; // Attached Data
  Type type = 5;         // Type of Invite
  string protocol = 6;   // Name of Protocol

  enum Type {
    None = 0;
    Local = 1;
    Flat = 2;
    Remote = 3;
  }
}

// REST API Request over HTTP
message RestRequest {
  Method method = 1;                  // HTTP Method
  string function = 2;                // Sonr Api Function
  map<string, string> parameters = 3; // Parameters for Function

  // User Address to Perform Method on
  oneof address {
    Peer peer = 4;    // Peer Data Reference
    string id = 5;    // Libp2p ID
    string sName = 6; // SonrName which retreives id from DB
  }

  enum Method {
    GET = 0;    // Retreive Resource
    POST = 1;   // Create new subordinate resources
    PUT = 2;    // Update existing resource
    DELETE = 3; // Delete resource
    PATCH = 4;  // Partial Update to Resource
  }
}

// Updated Peer Info Request
message UpdateRequest {
  oneof data {
    Peer.Properties properties = 1; // Updated Peer Properties
    Contact contact = 2;            // Users Updated Contact Card
    Position position = 3;          // Users updated Position
    ConnectionRequest.InternetType connectivity = 4; // Internet Type Changed
  }
}

// Message for Verification Request
message VerifyRequest {
  // Data is the original value
  oneof data {
    bytes bufferValue = 1;
    string textValue = 2;
  }

  // Sig is the value to be verified against data
  oneof sig {
    bytes signedBuffer = 3;
    string signedText = 4;
  }

  Type type = 5; // Either Signing New Mnemonic or Reading Existing

  // Request Type
  enum Type {
    VERIFY = 0;
    READ = 1;
  }
}

// ------------------------------ //
// -------- Responses ----------- //
// ------------------------------ //
// Message for Signing Response (Hmac Sha256)
message AuthResponse {
  bool isSigned = 1; // If Values were Signed

  // Resulting Signed Values
  string signedPrefix = 2;      // Message for List of Bytes
  string signedFingerprint = 3; // Fingerprint Value
  string publicKey = 4;         // Base64 Encoded Public Key
  string givenSName = 5;        // Provided SName
  string givenMnemonic = 6;     // Provided Mnemonic
}

// Response from Connection Request
message ConnectionResponse {
  bool hostActive = 1;
  bool mdnsActive = 2;
  bool textileActive = 3;
  Topic localTopic = 4;
  map<string, TextileThread> threads = 5; // ID, Thread

  // Textile Thread
  message TextileThread {
    string id = 1;        // ThreadID
    string multiaddr = 2; // Thread MultiAddr
    string key = 3;       // Thread Key
    string name = 4;      // Thread Name
  }
}

// Reply Message sent on RPC
message InviteResponse {
  Type type = 1;         // Cancel Reply
  bool decision = 2;     // Users Decision for the Invitation
  Peer from = 3;         // Users Peer Data
  Peer to = 4;           // Receivers Peer Data
  bool flatMode = 5;     // Flat Transfer
  Transfer transfer = 6; // Card contains all Data Info, Transfer Info
  MailInfo mailInfo = 7; // Mail Info for Mailbox Invite
  string protocol = 8;   // Name of Protocol

  message MailInfo {
    int32 createdAt = 1;
    string to = 2;
    bytes body = 3;
    string from = 4;
    int32 readAt = 5;
    bytes signature = 6;
  }

  enum Type {
    None = 0;
    Transfer = 1;
    Contact = 2;
    Mailbox = 3;
  }
}

// REST API Response over HTTP
message RestResponse {
  Method method = 1;            // HTTP Method Type
  string function = 2;          // Function called for Sonr API
  int32 code = 3;               // See https://mzl.la/3gg3lti
  map<string, string> body = 4; // Response Body

  enum Method {
    GET = 0;    // Retreive Resource
    POST = 1;   // Create new subordinate resources
    PUT = 2;    // Update existing resource
    DELETE = 3; // Delete resource
    PATCH = 4;  // Partial Update to Resource
  }
}

// Message for Verification Response
message VerifyResponse {
  bool isVerified = 1;    // Result for Verification
  string publicKey = 2;   // Base64 Encoded Public Key
  ErrorMessage error = 3; // In Case Error Occurred
}

// --------------------------- //
// -------- Events ----------- //
// --------------------------- //
// Message Sent after Completed Transfer
message CompleteEvent {
  Direction direction = 1; // Transfer Direction
  Transfer transfer = 2;   // Transfer Data

  // Traffic Direction of Session
  enum Direction {
    Default = 0;  // From Memory/Viewing
    Incoming = 1; // Incoming Transfer
    Outgoing = 2; // Outgoing Transfer
  }
}
// List of Pending Invites through Mailbox
message MailEvent {
  bool hasNewMail = 1;
  repeated InviteRequest invites = 2; // User Received Invites
}

// Transfer Progress Event
message ProgressEvent {
  int32 current = 1;
  int32 total = 2;
  double progress = 3;
}

// Message for Status Update Event
message StatusEvent {
  Status value = 1;
  User user = 2;
}

// Message Sent when peer messages Local Topic
message TopicEvent {
  Topic topic = 1;     // Event Topic Type
  string id = 2;       // Peer ID
  Peer peer = 3;       // User Information
  Subject subject = 4; // Local Event Subject

  // Local Type Event
  enum Subject {
    JOIN = 0;    // Peer has joined wants Info
    STANDBY = 1; // Peer is taking break from lobby
    RESUME = 2;  // Peer has rejoined Lobby
    UPDATE = 3;  // Peer has changed position
    EXIT = 4;    // Peer has Exited
  }
}

// ------------------------------------------- //
// -------- Callback Generic Types ----------- //
// ------------------------------------------- //
// Generic Request Message
message Request {
  Type type = 1;  // Type of Request
  bytes data = 2; // Data for Request

  enum Type {
    INVITE = 0; // Invite Request
    REST = 1;   // REST API Request
    VERIFY = 2; // Verify Request
  }
}

// Generic Response Message
message Response {
  Type type = 1;  // Type of Response
  bytes data = 2; // Data for Response

  enum Type {
    CONNECTION = 0; // Connection Response
    INVITE = 1;     // Invite Response
    REST = 2;       // REST API Response
  }
}

// Generic Event Message
message Event {
  Type type = 1;  // Type of Event
  bytes data = 2; // Data for Event

  // Type of Event
  enum Type {
    COMPLETE = 0; // Transfer Completed
    MAIL = 1;     // New Mailbox Invite
    PROGRESS = 2; // Transfer Progress
    TOPIC = 3;    // Local Topic Update
  }
}
