syntax = "proto3";

import "data.proto";
import "user.proto";

// Require Go Package
option go_package = ".;models";

// Client Network Connection Status
enum Connectivity {
  None = 0;
  Mobile = 1;
  WiFi = 2;
}

// Status is User Node Situation
enum Status {
  NONE = 0;         // Default Status on Launch
  CONNECTED = 1;    // Status after starting Host
  BOOTSTRAPPED = 2; // After Bootstrapping Host
  AVAILABLE = 3;    // Connected and Visible on Local Lobby
  SEARCHING = 4;    // File has been Processed ready to Invite
  PENDING = 5;      // Awaiting Peer Authorization
  INVITED = 6;      // Has received Invitation
  INPROGRESS = 7;   // In Middle of Transfer
  STANDBY = 8;      // Away from Sonr Application
}

// Message for Status Update
message StatusUpdate { Status value = 1; }

// Initial Connection Message to Establish Sonr
message ConnectionRequest {
  double latitude = 1;           // Geolocation for OLC
  double longitude = 2;          // Geolocation for OLC
  string username = 3;           // General Peer Info
  Device device = 4;             // Users Device
  Directories directories = 5;   // Users Available File Paths
  Contact contact = 6;           // Users Contact Card
  User user = 7;                 // User Saved Data
  Connectivity connectivity = 8; // Client Network Type
}

// RemoteRequest is for Joining/Creating a New Topic
message RemoteRequest {
  bool isJoin = 1;
  int32 count = 2;
  string display = 3;
  string topic = 4;
  repeated string words = 5;
}

// Processes Given File and Invites Specified Peer
message InviteRequest {
  // Properties
  TransferType type = 1; // General Payload Type
  Peer to = 2;           // User thats being Invited
  bool isRemote = 3;     // If Transfer is Remote
  string topic = 4;      // Remote Topic Name

  // Attached Data
  string url = 5;              // URL to be Sent - Optional
  Contact contact = 6;         // Contact Card to be Sent - Optional
  repeated FileInfo files = 7; // Files to be Sent - Optional

  // FileInfo Message for Attached Files
  message FileInfo {
    string path = 1;     // Location of File
    bytes thumbnail = 2; // Provided Thumbnail Data
    int32 duration = 3;  // Duration of Video - Optional
    bool isVideo = 4;    // If File is Video
  }

  // Enum for Type of Transfer
  enum TransferType {
    Unknown = 0;    // Default Value, Would not Transfer
    File = 1;       // Media or Document
    MultiFiles = 2; // Multiple Media or Documents
    Contact = 3;    // Users Contact Card
    URL = 4;        // Website URL Link
  }
}

// Message with Response of Remote Point
message RemoteResponse {
  string first = 1;
  string second = 2;
  string third = 3;
  string display = 4;
}

// Invitation Message sent on RPC
message AuthInvite {
  Payload payload = 1;   // Type of Transfer
  Peer from = 2;         // Users Peer Data
  TransferCard card = 3; // Card contains all Data Info, Transfer Info
}

// Reply Message sent on RPC
message AuthReply {
  Type type = 1;         // Type of Transfer Reply
  Peer from = 2;         // Users Peer Data
  bool decision = 3;     // Users Decision for the Invitation
  TransferCard card = 4; // Card contains all Data Info, Transfer Info

  enum Type {
    None = 0;
    Transfer = 1;
    Contact = 2;
    Cancel = 3;
  }
}

// Error Message returned from Core Library
message ErrorMessage {
  string message = 1; // Generated Error Message
  string method = 2;  // Method Error Occurred
}
