syntax = "proto3";

import "data.proto";
import "user.proto";

// Require Go Package
option go_package = "/models";

// Message for Status Update
message StatusUpdate {
  Status value = 1;
  User user = 2;
}

// Initial Connection Message to Establish Sonr
message ConnectionRequest {
  Type type = 1;         // Connection Request Type
  Location location = 2; // Current Runtime Location
  Device device = 3;     // Users Device
  Contact contact = 4;   // Users Contact Card
  APIKeys apiKeys = 5;   // Client Keys

  // Connection Request Type
  enum Type {
    CONNECT = 0;
    STORJ = 1;
    LINK = 2;
    AUTH = 3;
  }
}

// Response to Connection Request
message ConnectionResponse {
  User user = 1;
  Peer.ID id = 2;
}

// Request to Create or Return Username
message UsernameRequest {
  bool isReturning = 1;
  string mnemonic = 2; // Required Frontend Mnemonic
  string sName = 3;    // Required Frontend SName
}

// Response for Create or Return Username
message UsernameResponse {
  bool isValid = 1;
  string prefix = 2;
  string sName = 3;
  string mnemonic = 4;
}

// Request to Access Storj Data
message StorjRequest {
  // Keys
  string storjApiKey = 1;
  string storjRootPassword = 2;

  // Data for Get/Put
  oneof data {
    string prefix = 3;
    User user = 4;
  }
}

// Response Data for Storj
message StorjResponse {
  // Data for Get/Put
  oneof data {
    bool success = 1;
    User user = 2;
  }
}

// Updated Peer Info Request
message UpdateRequest {
  oneof data {
    Peer.Properties properties = 1; // Updated Peer Properties
    Contact contact = 2;            // Users Updated Contact Card
    Position position = 3;          // Users updated Position
  }
}

// Invitation Message sent on RPC
message InviteRequest {
  Payload payload = 1; // Type of Transfer
  Peer from = 2;       // Users Peer Data
  Peer to = 3;         // Receivers Peer Data
  Transfer data = 4;   // Attached Data
}

// Reply Message sent on RPC
message InviteResponse {
  Type type = 1;     // Cancel Reply
  Peer from = 2;     // Users Peer Data
  Peer to = 3;       // Receivers Peer Data
  bool decision = 4; // Users Decision for the Invitation
  Transfer data = 5; // Card contains all Data Info, Transfer Info

  enum Type {
    None = 0;
    Transfer = 1;
    Contact = 2;
    FlatContact = 3;
    Cancel = 4;
  }
}

// REST API Request over HTTP
message RestRequest {
  RestMethodType type = 1;
  string method = 2;
  map<string, string> parameters = 3;
  oneof host {
    Peer peer = 4;
    string id = 5;
    string sName = 6;
  }
}

// REST API Response over HTTP
message RestResponse {
  RestMethodType type = 1;
  string method = 2;
  int32 code = 3;
  map<string, string> body = 4;
}

enum RestMethodType {
  DEFAULT = 0;
  GET = 1;
  PUT = 2;
  POST = 3;
}

// User is the Saved Data from Client that Passes to Proxy, During ConnRequest
message User {
  Connection connection = 1; // Clients Connection Reference
  Peer peer = 2;             // Clients Peer Reference
  Location location = 3;     // Clients current Location
  Device device = 4;         // Clients Current Device
  Contact contact = 5;       // Clients Contact Card
  Crypto crypto = 6;         // User Cryptographic Data
  Settings settings = 7;

  // User Connection Management - Attached from Node Client
  message Connection {
    APIKeys apiKeys = 1;
    Status status = 2; // Client Node Status
    Router router = 3; // Client Routing Information
  }

  // Crypto Data to Place in DHT
  message Crypto {
    string prefix = 1;   // Created from DeviceID and SName
    string mnemonic = 2; // Used to generate fingerprint
    string sName = 3;    // User Snr Domain
  }

  // Router Manages Peer Routing for Topics/Transfers - Attached from Node
  // Client
  message Router {
    string deviceTopic = 1;
    string localTopic = 2;
    string rendevouz = 3;
    Location location = 4;
  }

  // User Settings
  message Settings {
    Device primary = 1;
    map<string, Device> devices = 2;       // Clients Devices: Name, Device
    map<string, Settings> preferences = 3; // Clients Specified Preferences
  }
}
