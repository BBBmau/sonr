syntax = "proto3";

import "data.proto";
import "user.proto";

// Require Go Package
option go_package = "/models";

// Client Network Connection Status
enum Connectivity {
  None = 0;
  Mobile = 1;
  WiFi = 2;
}

// Status is User Node Situation
enum Status {
  IDLE = 0;         // Default Status on Launch
  CONNECTED = 1;    // Status after starting Host
  BOOTSTRAPPED = 2; // After Bootstrapping Host
  AVAILABLE = 3;    // Connected and Visible on Local Lobby
  SEARCHING = 4;    // File has been Processed ready to Invite
  PENDING = 5;      // Awaiting Peer Authorization
  INVITED = 6;      // Has received Invitation
  INPROGRESS = 7;   // In Middle of Transfer
  STANDBY = 8;      // Away from Sonr Application
}

// Message for Status Update
message StatusUpdate { Status value = 1; }

// Initial Connection Message to Establish Sonr
message ConnectionRequest {
  Location location = 1;         // Runtime IP based calculated GeoLocation
  Location ipLocation = 2;       // Runtime IP based calculated GeoLocation
  Device device = 3;             // Users Device
  Directories directories = 4;   // Users Available File Paths
  Contact contact = 5;           // Users Contact Card
  User user = 6;                 // User Saved Data
  Connectivity connectivity = 7; // Client Network Type
}

// Updated Peer Info Request
message UpdateRequest {
  Type type = 1;                  // Type of Update
  Peer.Properties properties = 2; // Updated Peer Properties
  Contact contact = 3;            // Users Updated Contact Card
  Position position = 4;          // Users updated Position

  enum Type {
    Position = 0;
    Contact = 1;
    Properties = 2;
  }
}

// Message to Peer Request
message MessageRequest {
  Peer to = 1;        // Recipient
  string message = 2; // Message Content
  string topic = 3;   // Topic Name
}

// Processes Given File and Invites Specified Peer
message InviteRequest {
  // Properties
  Payload payload = 1;   // General Payload Type
  Peer to = 2;           // User thats being Invited
  bool isRemote = 3;     // If Transfer is Remote
  RemoteInfo remote = 4; // Remote Topic Name

  // Attached Data
  string url = 6;      // URL to be Sent - Optional
  Contact contact = 7; // Contact Card to be Sent - Optional
  SonrFile file = 8;   // Files to be Sent - Optional
}

message RespondRequest {
  bool decision = 1;     // User Decision
  bool isRemote = 2;     // If Transfer is Remote
  RemoteInfo remote = 3; // Remote Topic Name
}

// Invitation Message sent on RPC
message AuthInvite {
  Payload payload = 1;   // Type of Transfer
  Peer from = 2;         // Users Peer Data
  TransferCard card = 3; // Card contains all Data Info, Transfer Info
  bool isFlat = 4;
  RemoteInfo remote = 5;
}

// Reply Message sent on RPC
message AuthReply {
  Type type = 1;         // Type of Transfer Reply
  Peer from = 2;         // Users Peer Data
  bool decision = 3;     // Users Decision for the Invitation
  TransferCard card = 4; // Card contains all Data Info, Transfer Info
  RemoteInfo remote = 5;

  enum Type {
    None = 0;
    Transfer = 1;
    Contact = 2;
    FlatContact = 3;
    Cancel = 4;
  }
}

// User is the Saved Data from Client that Passes to Proxy, During ConnRequest
message User {
  Contact contact = 1;                // Clients Contact Card
  map<string, Device> devices = 2;    // Clients Devices: Name, Device
  map<string, Settings> settings = 3; // Clients Specified Preferences

  message Settings {
    string key = 1;    // Option as String
    Value value = 2;   // Value for Setting
    Option option = 3; // Type of Setting

    // Available Settings Options
    enum Option {
      None = 0;              // Arbitrary Zero Value
      DefaultVideoCall = 1;  // Default App to be used for Video Calls
      FallbackVideoCall = 2; // Fallback App for Video Calls
      DarkMode = 3;          // Dark Mode Preference
      RunInBackground = 4;   // Sonr Background Run Preference
    }

    // Value of Settings Option
    message Value {
      bool enabled = 1; // If Value is for simple enable/disable
      string value = 2; // If Value is complex
    }
  }
}
