syntax = "proto3";

import "data.proto";
import "user.proto";

// Require Go Package
option go_package = "/models";

// Message for Status Update
message StatusUpdate {
  Status value = 1;
  User user = 2;
}

// Initial Connection Message to Establish Sonr
message ConnectionRequest {
  Location location = 1;              // Runtime IP based calculated GeoLocation
  Device device = 2;                  // Users Device
  Contact contact = 3;                // Users Contact Card
  User.Crypto crypto = 4;             // User Crypto Data
  APIKeys apiKeys = 5;                // Client Keys
  map<string, Device> devices = 6;    // User Devices: Name, Device
  map<string, Settings> settings = 7; // User Specified Preferences

  // Connection Request Type
  enum Type {
    CONNECT = 0;
    STORJ = 1;
    LINK = 2;
    AUTH = 3;
  }
}

// Response to Connection Request
message ConnectionResponse {
  User user = 1;
  Peer.ID id = 2;
}

// Request to Create or Return Username
message UsernameRequest {
  bool isReturning = 1;
  string mnemonic = 2;
  string sName = 3;
}

// Response for Create or Return Username
message UsernameResponse {
  bool isValid = 1;
  string prefix = 2;
  string sName = 3;
  string mnemonic = 4;
}

// Request to Access Storj Data
message StorjRequest {
  // Keys
  string storjApiKey = 1;
  string storjRootPassword = 2;

  // Data for Get/Put
  oneof data {
    string prefix = 3;
    User user = 4;
  }
}

// Response Data for Storj
message StorjResponse {
  // Data for Get/Put
  oneof data {
    bool success = 1;
    User user = 2;
  }
}

// Updated Peer Info Request
message UpdateRequest {
  oneof data {
    Peer.Properties properties = 1; // Updated Peer Properties
    Contact contact = 2;            // Users Updated Contact Card
    Position position = 3;          // Users updated Position
  }
}

// Invitation Message sent on RPC
message InviteRequest {
  Payload payload = 1; // Type of Transfer
  Peer from = 2;       // Users Peer Data
  Peer to = 3;         // Receivers Peer Data
  Transfer data = 4;   // Attached Data
}

// Reply Message sent on RPC
message InviteResponse {
  Type type = 1;     // Cancel Reply
  Peer from = 2;     // Users Peer Data
  Peer to = 3;       // Receivers Peer Data
  bool decision = 4; // Users Decision for the Invitation
  Transfer data = 5; // Card contains all Data Info, Transfer Info

  enum Type {
    None = 0;
    Transfer = 1;
    Contact = 2;
    FlatContact = 3;
    Cancel = 4;
  }
}

// Link Request for Non-Mobile Clients
message LinkRequest {
  Device device = 1;
  string username = 2;
  Location location = 3;
}

// Response After Linking
message LinkResponse {
  User user = 1;
  bool decision = 2;
}

// REST API Request over HTTP
message RestRequest {
  RestMethodType type = 1;
  string method = 2;
  map<string, string> parameters = 3;
  oneof host {
    Peer peer = 4;
    string id = 5;
    string sName = 6;
  }
}

// REST API Response over HTTP
message RestResponse {
  RestMethodType type = 1;
  string method = 2;
  int32 code = 3;
  map<string, string> body = 4;
}

enum RestMethodType {
  DEFAULT = 0;
  GET = 1;
  PUT = 2;
  POST = 3;
}

// Linker Object is used for Temporary host and Linking Devices
message Linker {
  Peer peer = 1;
  Device device = 2;
  string username = 3;
  Router router = 4;
  string userID = 5;

  // Router Manages Peer Routing for Topics/Transfers - Attached from Node
  // Client
  message Router {
    string deviceTopic = 1;
    string localIPTopic = 2;
    string rendevouz = 3;
    Location location = 4;
  }
}

// User is the Saved Data from Client that Passes to Proxy, During ConnRequest
message User {
  string id = 1;                      // User prefix is ID
  Connection connection = 2;          // Clients Connection Reference
  Peer peer = 3;                      // Clients Peer Reference
  Location location = 4;              // Clients current Location
  Device device = 5;                  // Clients Current Device
  Contact contact = 6;                // Clients Contact Card
  map<string, Device> devices = 7;    // Clients Devices: Name, Device
  map<string, Settings> settings = 8; // Clients Specified Preferences
  Crypto crypto = 9;                  // User Cryptographic Data

  // User Connection Management - Attached from Node Client
  message Connection {
    APIKeys apiKeys = 1;
    Status status = 2; // Client Node Status
    Router router = 3; // Client Routing Information
  }

  // Crypto Data to Place in DHT
  message Crypto {
    string prefix = 1;
    string signature = 2;
    string privateKey = 3; // Private Key Reference, Saved as snr-peer.privkey
  }

  // Router Manages Peer Routing for Topics/Transfers - Attached from Node
  // Client
  message Router {
    string deviceTopic = 1;
    string localTopic = 2;
    string rendevouz = 3;
    Location location = 4;
  }
}
