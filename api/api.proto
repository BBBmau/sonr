syntax = "proto3";

import "data.proto";
import "user.proto";

// Require Go Package
option go_package = "/models";

// Message for Status Update
message StatusUpdate {
  Status value = 1;
  User user = 2;
}

// Initial Connection Message to Establish Sonr
message ConnectionRequest {
  Location location = 1;              // Runtime IP based calculated GeoLocation
  Device device = 2;                  // Users Device
  Contact contact = 3;                // Users Contact Card
  Connectivity connectivity = 4;      // Client Network Type
  User.Crypto crypto = 5;             // User Crypto Data
  ClientKeys clientKeys = 6;          // Client Keys
  map<string, Device> devices = 7;    // User Devices: Name, Device
  map<string, Settings> settings = 8; // User Specified Preferences

  // Client Keys for Services
  message ClientKeys {
    string ipKey = 1;
    string rapidApiHost = 2;
    string rapidApiKey = 3;
    string hsKey = 4;
    string hsSecret = 5;
  }
}

// Remote Request to Join/Create Remote Transfer
message RemoteRequest {
  oneof request {
    Create createData = 1;
    Join joinData = 2;
    Reply replyData = 3;
    Leave leaveData = 4;
  }

  message Create { SonrFile file = 1; }

  message Join { repeated string words = 1; }

  message Reply {
    Peer peer = 1;
    bool decision = 2;
  }

  message Leave {
    bool isJoin = 1;
    string topic = 2;
  }
}

// Response from Remote Request
message RemoteResponse {
  bool isJoin = 1;
  int32 count = 2;
  string display = 3;
  string topic = 4;
  repeated string words = 5;
}

// Request to Access Storj Data
message StorjRequest {
  // Keys
  string storjApiKey = 1;
  string storjRootPassword = 2;

  // Data for Get/Put
  oneof data {
    string prefix = 3;
    User user = 4;
  }
}

// Response Data for Storj
message StorjResponse {
  // Data for Get/Put
  oneof data {
    bool success = 1;
    User user = 2;
  }
}

// Updated Peer Info Request
message UpdateRequest {
  oneof data {
    Peer.Properties properties = 1; // Updated Peer Properties
    Contact contact = 2;            // Users Updated Contact Card
    Position position = 3;          // Users updated Position
  }
}

// Invitation Message sent on RPC
message AuthInvite {
  Payload payload = 1; // Type of Transfer
  Peer from = 2;       // Users Peer Data
  Peer to = 3;         // Receivers Peer Data
  Transfer data = 4;   // Attached Data
}

// Reply Message sent on RPC
message AuthReply {
  Type type = 1;     // Cancel Reply
  Peer from = 2;     // Users Peer Data
  Peer to = 3;       // Receivers Peer Data
  bool decision = 4; // Users Decision for the Invitation
  Transfer data = 5; // Card contains all Data Info, Transfer Info

  enum Type {
    None = 0;
    Transfer = 1;
    Contact = 2;
    FlatContact = 3;
    Cancel = 4;
  }
}

// User is the Saved Data from Client that Passes to Proxy, During ConnRequest
message User {
  string id = 1;                      // User prefix is ID
  Connection connection = 2;          // Clients Connection Reference
  Peer peer = 3;                      // Clients Peer Reference
  Location location = 4;              // Clients current Location
  Device device = 5;                  // Clients Current Device
  Contact contact = 6;                // Clients Contact Card
  map<string, Device> devices = 7;    // Clients Devices: Name, Device
  map<string, Settings> settings = 8; // Clients Specified Preferences
  Crypto crypto = 9;                  // User Cryptographic Data

  // User Connection Management - Attached from Node Client
  message Connection {
    bool hasConnected = 1;         // Node Host Started
    bool hasBootstrapped = 2;      // Node Host Bootstrapped
    bool hasJoinedLocal = 3;       // Node Host Joined Local PubSub
    Status status = 4;             // Client Node Status
    Router router = 5;             // Client Routing Information
    Connectivity connectivity = 6; // Client Network Type
  }

  // Crypto Data to Place in DHT
  message Crypto {
    string prefix = 1;
    string signature = 2;
    string privateKey = 3; // Private Key Reference, Saved as snr-peer.privkey
  }

  // Router Manages Peer Routing for Topics/Transfers - Attached from Node
  // Client
  message Router {
    string deviceTopic = 1;
    string localIPTopic = 2;
    string rendevouz = 3;
    Location location = 4;
  }
}
