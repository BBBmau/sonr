syntax = "proto3";

import "peer.proto";
import "data.proto";

// Require Go Package
option go_package = "/models";

// Client Keys for Services
message APIKeys {
  string ipApiKey = 1;
  string rapidApiKey = 2;
  string handshakeKey = 3;
  string handshakeSecret = 4;
  string pushKeyPath = 5;
  string textileKey = 6;
  string textileSecret = 7;
}

// Information about device for User
message Device {
  // Management
  FileSystem fileSystem = 1; // Directories for this Device
  KeyPair keyPair = 2;       // User Public Private Key-Pair

  // Identification
  Platform platform = 3;        // Operating System
  string id = 4;                // Device Identifier
  string localeName = 5;        // The name of the current locale.
  string name = 6;              // User Defined Name
  int32 numberOfProcessors = 7; // The number of machine execution units.
  string model = 8;             // Model of Device
  string operatingSystem = 9;   // Representation of the host OS or platform.
  string operatingSystemVersion = 10; // Version of the host OS or platform.
}

// FileSystem is for Directores Where Data can be stored
message FileSystem {
  Directory downloads = 1; // Downloaded Files
  Directory support = 2;   // Non Exposed Support Files
  Directory temporary = 3; // Temporary Storage

  // Directory in FileSystem
  message Directory {
    string path = 1;
    Type type = 2;
    enum Type {
      Temporary = 0; // Temporary Cache Storage
      Downloads = 1; // Transferred Files - Desktop
      Support = 2;   // Persistent Non Exposed Files - Mobile
      Library = 3;   // Persistent Non Exposed Files - Desktop
      Documents = 4; // Transferred Files - Mobile
    }
  }
}

// KeyPair Encryption Type
enum KeyType {
  RSA = 0;
  Ed25519 = 1;
  Secp256k1 = 2;
  ECDSA = 3;
}

// Private Public Key Pair
message KeyPair {
  Private private = 1; // Private Key Ref
  Public public = 2;   // Public Key Ref
  KeyType type = 3;    // Type of Key Encryption

  // User Private Key Saved to Disk
  message Private {
    string path = 1;  // Private Key Path
    bytes buffer = 2; // Key Buffer
  }

  // Public Key for Thread ID/ Libp2p ID
  message Public {
    string base64 = 1; // Base64 Representation of Keys
    bytes buffer = 2;  // Public Key Buffer
  }

  // Shared Key for Device Linking
  message Shared {
    bytes ephermal = 1; // Public Ephermal Key Generated from "P-256" Curve
  }
}

// Status is User Node Situation
enum Status {
  DEFAULT = 0;   // Default Status on Launch
  IDLE = 1;      // Node has not been Authenticated
  CONNECTED = 2; // Status after starting Host
  AVAILABLE = 3; // Bootstrapped and Visible Locally
  PENDING = 4;   // Awaiting Peer Authorization
  INVITED = 5;   // Has received Invitation
  TRANSFER = 6;  // In Progress of Transfer
  STANDBY = 7;   // Away from Sonr Application
  FAILED = 8;    // Failed to Connect Host
}

// User is the Saved Data from Client that Passes to Proxy, During ConnRequest
message User {
  string sName = 1; // User Snr Domain

  // From InitializeRequest
  APIKeys apiKeys = 2; // App Env Variables for API Keys
  Status status = 3;   // Client Node Status
  Device device = 4;   // Clients Current Device

  // From ConnectionRequest
  Peer peer = 5;         // Clients Peer Reference
  Crypto crypto = 6;     // User Cryptographic Data
  Settings settings = 7; // User Settings
  Contact contact = 8;   // Users Contact Card
  Location location = 9; // Client Location for Routing
  string pushToken = 10; // Push Notification Token

  // Crypto Data to Place in DHT
  message Crypto {
    string prefix = 1;   // Created from DeviceID and SName
    string mnemonic = 2; // Used to generate fingerprint
  }

  // User Settings
  message Settings {
    Device primary = 1;
    map<string, Device> devices = 2;     // Clients Devices: Name, Device
    map<string, Option> preferences = 3; // Clients Specified Preferences

    message Option {
      Type type = 1;  // Type of Option
      string key = 2; // Option as String
      oneof value {
        bool enabled = 3; // If Value is for simple enable/disable
        string text = 4;  // If Value is complex
      }

      // Available Settings Options
      enum Type {
        None = 0;              // Arbitrary Zero Value
        DefaultVideoCall = 1;  // Default App to be used for Video Calls
        FallbackVideoCall = 2; // Fallback App for Video Calls
        DarkMode = 3;          // Dark Mode Preference
        RunInBackground = 4;   // Sonr Background Run Preference
      }
    }
  }
}
