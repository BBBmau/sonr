syntax = "proto3";

import "data.proto";
import "user.proto";

// Require Go Package
option go_package = ".;models";

// Initial Connection Message to Establish Sonr
message ConnectionRequest {
  double latitude = 1;         // Geolocation for OLC
  double longitude = 2;        // Geolocation for OLC
  Profile profile = 3;         // General Peer Info
  Device device = 4;           // Users Device
  Directories directories = 5; // Users Available File Paths
  Contact contact = 6;         // Users Contact Card
  User user = 7;               // User Saved Data
}

// Processes Given File and Invites Specified Peer
message InviteRequest {
  // Properties
  TransferType type = 1; // General Payload Type
  Peer to = 2;           // User thats being Invited

  // Attached Data
  string url = 4;              // URL to be Sent - Optional
  Contact contact = 5;         // Contact Card to be Sent - Optional
  repeated FileInfo files = 6; // Files to be Sent - Optional

  // FileInfo Message for Attached Files
  message FileInfo {
    string path = 1;       // Location of File
    bool hasThumbnail = 2; // Provided File already has thumbnail
    string thumbpath = 3;  // Path of Provided Thumbnail - Optional
    bytes thumbdata = 4;   // Provided Thumbnail Data
    int32 duration = 5;    // Duration of Video - Optional
  }

  // Enum for Type of Transfer
  enum TransferType {
    Unknown = 0;       // Default Value, Would not Transfer
    File = 1;          // Media or Document
    MultiFiles = 2;    // Multiple Media or Documents
    Contact = 3;       // Users Contact Card
    URL = 4;           // Website URL Link
    ExternalMedia = 5; // Shared from Mobile Gallery
  }
}

// Request to Link a Device for Direct Transfer
message LinkRequest {
  Device device = 1; // Device Information
  int32 expiry = 2;  // TimeStamp for Link Expiry
  Peer peer = 3;     // Device Peer Info
}

// Invitation Message sent on RPC
message AuthInvite {
  Payload payload = 1;   // Type of Transfer
  Peer from = 2;         // Users Peer Data
  TransferCard card = 3; // Card contains all Data Info, Transfer Info
  bool isDirect = 4;     // Is Users own Device
}

// Reply Message sent on RPC
message AuthReply {
  Type type = 1;         // Type of Transfer Reply
  Peer from = 2;         // Users Peer Data
  bool decision = 3;     // Users Decision for the Invitation
  TransferCard card = 4; // Card contains all Data Info, Transfer Info

  enum Type {
    Transfer = 0;
    Contact = 1;
    Cancel = 2;
  }
}

// Error Message returned from Core Library
message ErrorMessage {
  string message = 1; // Generated Error Message
  string method = 2;  // Method Error Occurred
}
