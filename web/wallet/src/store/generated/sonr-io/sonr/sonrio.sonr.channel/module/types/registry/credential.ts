/* eslint-disable */
import { Any } from "../google/protobuf/any";
import { Writer, Reader } from "protobufjs/minimal";

export const protobufPackage = "sonrio.sonr.registry";

export interface Credential {
  /** A probabilistically-unique byte sequence identifying a public key credential source and its authentication assertions. */
  i_d: Uint8Array;
  /**
   * The public key portion of a Relying Party-specific credential key pair, generated by an authenticator and returned to
   * a Relying Party at registration time (see also public key credential). The private key portion of the credential key
   * pair is known as the credential private key. Note that in the case of self attestation, the credential key pair is also
   * used as the attestation key pair, see self attestation for details.
   */
  public_key: Uint8Array;
  /** The attestation format used (if any) by the authenticator when creating the credential. */
  attestation_type: string;
  /** The Authenticator information for a given certificate */
  authenticator: Authenticator | undefined;
}

export interface Authenticator {
  /**
   * The AAGUID of the authenticator. An AAGUID is defined as an array containing the globally unique
   * identifier of the authenticator model being sought.
   */
  aaguid: Uint8Array;
  /**
   * SignCount -Upon a new login operation, the Relying Party compares the stored signature counter value
   * with the new sign_count value returned in the assertionâ€™s authenticator data. If this new
   * signCount value is less than or equal to the stored value, a cloned authenticator may
   * exist, or the authenticator may be malfunctioning.
   */
  sign_count: number;
  /**
   * CloneWarning - This is a signal that the authenticator may be cloned, i.e. at least two copies of the
   * credential private key may exist and are being used in parallel. Relying Parties should incorporate
   * this information into their risk scoring. Whether the Relying Party updates the stored signature
   * counter value in this case, or not, or fails the authentication ceremony or not, is Relying Party-specific.
   */
  clone_warning: boolean;
}

export interface DidDocument {
  context: string[];
  ID: string;
  controller: string[];
  verificationMethod: VerificationMethod[];
  authentication: VerificationRelationship[];
  assertionMethod: VerificationRelationship[];
  keyAgreement: VerificationRelationship[];
  capabilityInvocation: VerificationRelationship[];
  capabilityDelegation: VerificationRelationship[];
  service: Service[];
  alsoKnownAs: string[];
}

export interface Metadata {
  created: string;
  updated: string;
}

export interface VerificationMethod {
  ID: string;
  Type: string;
  Controller: string;
  publicKeyMultibase: string;
  publicKeyJWK: { [key: string]: Any };
}

export interface VerificationMethod_PublicKeyJWKEntry {
  key: string;
  value: Any | undefined;
}

export interface VerificationRelationship {
  referenceID: string;
  verificationMethod: VerificationMethod | undefined;
}

export interface Service {
  ID: string;
  type: string;
  serviceEndpoint: string;
}

const baseCredential: object = { attestation_type: "" };

export const Credential = {
  encode(message: Credential, writer: Writer = Writer.create()): Writer {
    if (message.i_d.length !== 0) {
      writer.uint32(10).bytes(message.i_d);
    }
    if (message.public_key.length !== 0) {
      writer.uint32(18).bytes(message.public_key);
    }
    if (message.attestation_type !== "") {
      writer.uint32(26).string(message.attestation_type);
    }
    if (message.authenticator !== undefined) {
      Authenticator.encode(
        message.authenticator,
        writer.uint32(34).fork()
      ).ldelim();
    }
    return writer;
  },

  decode(input: Reader | Uint8Array, length?: number): Credential {
    const reader = input instanceof Uint8Array ? new Reader(input) : input;
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseCredential } as Credential;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.i_d = reader.bytes();
          break;
        case 2:
          message.public_key = reader.bytes();
          break;
        case 3:
          message.attestation_type = reader.string();
          break;
        case 4:
          message.authenticator = Authenticator.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Credential {
    const message = { ...baseCredential } as Credential;
    if (object.i_d !== undefined && object.i_d !== null) {
      message.i_d = bytesFromBase64(object.i_d);
    }
    if (object.public_key !== undefined && object.public_key !== null) {
      message.public_key = bytesFromBase64(object.public_key);
    }
    if (
      object.attestation_type !== undefined &&
      object.attestation_type !== null
    ) {
      message.attestation_type = String(object.attestation_type);
    } else {
      message.attestation_type = "";
    }
    if (object.authenticator !== undefined && object.authenticator !== null) {
      message.authenticator = Authenticator.fromJSON(object.authenticator);
    } else {
      message.authenticator = undefined;
    }
    return message;
  },

  toJSON(message: Credential): unknown {
    const obj: any = {};
    message.i_d !== undefined &&
      (obj.i_d = base64FromBytes(
        message.i_d !== undefined ? message.i_d : new Uint8Array()
      ));
    message.public_key !== undefined &&
      (obj.public_key = base64FromBytes(
        message.public_key !== undefined ? message.public_key : new Uint8Array()
      ));
    message.attestation_type !== undefined &&
      (obj.attestation_type = message.attestation_type);
    message.authenticator !== undefined &&
      (obj.authenticator = message.authenticator
        ? Authenticator.toJSON(message.authenticator)
        : undefined);
    return obj;
  },

  fromPartial(object: DeepPartial<Credential>): Credential {
    const message = { ...baseCredential } as Credential;
    if (object.i_d !== undefined && object.i_d !== null) {
      message.i_d = object.i_d;
    } else {
      message.i_d = new Uint8Array();
    }
    if (object.public_key !== undefined && object.public_key !== null) {
      message.public_key = object.public_key;
    } else {
      message.public_key = new Uint8Array();
    }
    if (
      object.attestation_type !== undefined &&
      object.attestation_type !== null
    ) {
      message.attestation_type = object.attestation_type;
    } else {
      message.attestation_type = "";
    }
    if (object.authenticator !== undefined && object.authenticator !== null) {
      message.authenticator = Authenticator.fromPartial(object.authenticator);
    } else {
      message.authenticator = undefined;
    }
    return message;
  },
};

const baseAuthenticator: object = { sign_count: 0, clone_warning: false };

export const Authenticator = {
  encode(message: Authenticator, writer: Writer = Writer.create()): Writer {
    if (message.aaguid.length !== 0) {
      writer.uint32(10).bytes(message.aaguid);
    }
    if (message.sign_count !== 0) {
      writer.uint32(16).uint32(message.sign_count);
    }
    if (message.clone_warning === true) {
      writer.uint32(24).bool(message.clone_warning);
    }
    return writer;
  },

  decode(input: Reader | Uint8Array, length?: number): Authenticator {
    const reader = input instanceof Uint8Array ? new Reader(input) : input;
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseAuthenticator } as Authenticator;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.aaguid = reader.bytes();
          break;
        case 2:
          message.sign_count = reader.uint32();
          break;
        case 3:
          message.clone_warning = reader.bool();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Authenticator {
    const message = { ...baseAuthenticator } as Authenticator;
    if (object.aaguid !== undefined && object.aaguid !== null) {
      message.aaguid = bytesFromBase64(object.aaguid);
    }
    if (object.sign_count !== undefined && object.sign_count !== null) {
      message.sign_count = Number(object.sign_count);
    } else {
      message.sign_count = 0;
    }
    if (object.clone_warning !== undefined && object.clone_warning !== null) {
      message.clone_warning = Boolean(object.clone_warning);
    } else {
      message.clone_warning = false;
    }
    return message;
  },

  toJSON(message: Authenticator): unknown {
    const obj: any = {};
    message.aaguid !== undefined &&
      (obj.aaguid = base64FromBytes(
        message.aaguid !== undefined ? message.aaguid : new Uint8Array()
      ));
    message.sign_count !== undefined && (obj.sign_count = message.sign_count);
    message.clone_warning !== undefined &&
      (obj.clone_warning = message.clone_warning);
    return obj;
  },

  fromPartial(object: DeepPartial<Authenticator>): Authenticator {
    const message = { ...baseAuthenticator } as Authenticator;
    if (object.aaguid !== undefined && object.aaguid !== null) {
      message.aaguid = object.aaguid;
    } else {
      message.aaguid = new Uint8Array();
    }
    if (object.sign_count !== undefined && object.sign_count !== null) {
      message.sign_count = object.sign_count;
    } else {
      message.sign_count = 0;
    }
    if (object.clone_warning !== undefined && object.clone_warning !== null) {
      message.clone_warning = object.clone_warning;
    } else {
      message.clone_warning = false;
    }
    return message;
  },
};

const baseDidDocument: object = {
  context: "",
  ID: "",
  controller: "",
  alsoKnownAs: "",
};

export const DidDocument = {
  encode(message: DidDocument, writer: Writer = Writer.create()): Writer {
    for (const v of message.context) {
      writer.uint32(10).string(v!);
    }
    if (message.ID !== "") {
      writer.uint32(18).string(message.ID);
    }
    for (const v of message.controller) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.verificationMethod) {
      VerificationMethod.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    for (const v of message.authentication) {
      VerificationRelationship.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    for (const v of message.assertionMethod) {
      VerificationRelationship.encode(v!, writer.uint32(50).fork()).ldelim();
    }
    for (const v of message.keyAgreement) {
      VerificationRelationship.encode(v!, writer.uint32(58).fork()).ldelim();
    }
    for (const v of message.capabilityInvocation) {
      VerificationRelationship.encode(v!, writer.uint32(66).fork()).ldelim();
    }
    for (const v of message.capabilityDelegation) {
      VerificationRelationship.encode(v!, writer.uint32(74).fork()).ldelim();
    }
    for (const v of message.service) {
      Service.encode(v!, writer.uint32(82).fork()).ldelim();
    }
    for (const v of message.alsoKnownAs) {
      writer.uint32(90).string(v!);
    }
    return writer;
  },

  decode(input: Reader | Uint8Array, length?: number): DidDocument {
    const reader = input instanceof Uint8Array ? new Reader(input) : input;
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseDidDocument } as DidDocument;
    message.context = [];
    message.controller = [];
    message.verificationMethod = [];
    message.authentication = [];
    message.assertionMethod = [];
    message.keyAgreement = [];
    message.capabilityInvocation = [];
    message.capabilityDelegation = [];
    message.service = [];
    message.alsoKnownAs = [];
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.context.push(reader.string());
          break;
        case 2:
          message.ID = reader.string();
          break;
        case 3:
          message.controller.push(reader.string());
          break;
        case 4:
          message.verificationMethod.push(
            VerificationMethod.decode(reader, reader.uint32())
          );
          break;
        case 5:
          message.authentication.push(
            VerificationRelationship.decode(reader, reader.uint32())
          );
          break;
        case 6:
          message.assertionMethod.push(
            VerificationRelationship.decode(reader, reader.uint32())
          );
          break;
        case 7:
          message.keyAgreement.push(
            VerificationRelationship.decode(reader, reader.uint32())
          );
          break;
        case 8:
          message.capabilityInvocation.push(
            VerificationRelationship.decode(reader, reader.uint32())
          );
          break;
        case 9:
          message.capabilityDelegation.push(
            VerificationRelationship.decode(reader, reader.uint32())
          );
          break;
        case 10:
          message.service.push(Service.decode(reader, reader.uint32()));
          break;
        case 11:
          message.alsoKnownAs.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): DidDocument {
    const message = { ...baseDidDocument } as DidDocument;
    message.context = [];
    message.controller = [];
    message.verificationMethod = [];
    message.authentication = [];
    message.assertionMethod = [];
    message.keyAgreement = [];
    message.capabilityInvocation = [];
    message.capabilityDelegation = [];
    message.service = [];
    message.alsoKnownAs = [];
    if (object.context !== undefined && object.context !== null) {
      for (const e of object.context) {
        message.context.push(String(e));
      }
    }
    if (object.ID !== undefined && object.ID !== null) {
      message.ID = String(object.ID);
    } else {
      message.ID = "";
    }
    if (object.controller !== undefined && object.controller !== null) {
      for (const e of object.controller) {
        message.controller.push(String(e));
      }
    }
    if (
      object.verificationMethod !== undefined &&
      object.verificationMethod !== null
    ) {
      for (const e of object.verificationMethod) {
        message.verificationMethod.push(VerificationMethod.fromJSON(e));
      }
    }
    if (object.authentication !== undefined && object.authentication !== null) {
      for (const e of object.authentication) {
        message.authentication.push(VerificationRelationship.fromJSON(e));
      }
    }
    if (
      object.assertionMethod !== undefined &&
      object.assertionMethod !== null
    ) {
      for (const e of object.assertionMethod) {
        message.assertionMethod.push(VerificationRelationship.fromJSON(e));
      }
    }
    if (object.keyAgreement !== undefined && object.keyAgreement !== null) {
      for (const e of object.keyAgreement) {
        message.keyAgreement.push(VerificationRelationship.fromJSON(e));
      }
    }
    if (
      object.capabilityInvocation !== undefined &&
      object.capabilityInvocation !== null
    ) {
      for (const e of object.capabilityInvocation) {
        message.capabilityInvocation.push(VerificationRelationship.fromJSON(e));
      }
    }
    if (
      object.capabilityDelegation !== undefined &&
      object.capabilityDelegation !== null
    ) {
      for (const e of object.capabilityDelegation) {
        message.capabilityDelegation.push(VerificationRelationship.fromJSON(e));
      }
    }
    if (object.service !== undefined && object.service !== null) {
      for (const e of object.service) {
        message.service.push(Service.fromJSON(e));
      }
    }
    if (object.alsoKnownAs !== undefined && object.alsoKnownAs !== null) {
      for (const e of object.alsoKnownAs) {
        message.alsoKnownAs.push(String(e));
      }
    }
    return message;
  },

  toJSON(message: DidDocument): unknown {
    const obj: any = {};
    if (message.context) {
      obj.context = message.context.map((e) => e);
    } else {
      obj.context = [];
    }
    message.ID !== undefined && (obj.ID = message.ID);
    if (message.controller) {
      obj.controller = message.controller.map((e) => e);
    } else {
      obj.controller = [];
    }
    if (message.verificationMethod) {
      obj.verificationMethod = message.verificationMethod.map((e) =>
        e ? VerificationMethod.toJSON(e) : undefined
      );
    } else {
      obj.verificationMethod = [];
    }
    if (message.authentication) {
      obj.authentication = message.authentication.map((e) =>
        e ? VerificationRelationship.toJSON(e) : undefined
      );
    } else {
      obj.authentication = [];
    }
    if (message.assertionMethod) {
      obj.assertionMethod = message.assertionMethod.map((e) =>
        e ? VerificationRelationship.toJSON(e) : undefined
      );
    } else {
      obj.assertionMethod = [];
    }
    if (message.keyAgreement) {
      obj.keyAgreement = message.keyAgreement.map((e) =>
        e ? VerificationRelationship.toJSON(e) : undefined
      );
    } else {
      obj.keyAgreement = [];
    }
    if (message.capabilityInvocation) {
      obj.capabilityInvocation = message.capabilityInvocation.map((e) =>
        e ? VerificationRelationship.toJSON(e) : undefined
      );
    } else {
      obj.capabilityInvocation = [];
    }
    if (message.capabilityDelegation) {
      obj.capabilityDelegation = message.capabilityDelegation.map((e) =>
        e ? VerificationRelationship.toJSON(e) : undefined
      );
    } else {
      obj.capabilityDelegation = [];
    }
    if (message.service) {
      obj.service = message.service.map((e) =>
        e ? Service.toJSON(e) : undefined
      );
    } else {
      obj.service = [];
    }
    if (message.alsoKnownAs) {
      obj.alsoKnownAs = message.alsoKnownAs.map((e) => e);
    } else {
      obj.alsoKnownAs = [];
    }
    return obj;
  },

  fromPartial(object: DeepPartial<DidDocument>): DidDocument {
    const message = { ...baseDidDocument } as DidDocument;
    message.context = [];
    message.controller = [];
    message.verificationMethod = [];
    message.authentication = [];
    message.assertionMethod = [];
    message.keyAgreement = [];
    message.capabilityInvocation = [];
    message.capabilityDelegation = [];
    message.service = [];
    message.alsoKnownAs = [];
    if (object.context !== undefined && object.context !== null) {
      for (const e of object.context) {
        message.context.push(e);
      }
    }
    if (object.ID !== undefined && object.ID !== null) {
      message.ID = object.ID;
    } else {
      message.ID = "";
    }
    if (object.controller !== undefined && object.controller !== null) {
      for (const e of object.controller) {
        message.controller.push(e);
      }
    }
    if (
      object.verificationMethod !== undefined &&
      object.verificationMethod !== null
    ) {
      for (const e of object.verificationMethod) {
        message.verificationMethod.push(VerificationMethod.fromPartial(e));
      }
    }
    if (object.authentication !== undefined && object.authentication !== null) {
      for (const e of object.authentication) {
        message.authentication.push(VerificationRelationship.fromPartial(e));
      }
    }
    if (
      object.assertionMethod !== undefined &&
      object.assertionMethod !== null
    ) {
      for (const e of object.assertionMethod) {
        message.assertionMethod.push(VerificationRelationship.fromPartial(e));
      }
    }
    if (object.keyAgreement !== undefined && object.keyAgreement !== null) {
      for (const e of object.keyAgreement) {
        message.keyAgreement.push(VerificationRelationship.fromPartial(e));
      }
    }
    if (
      object.capabilityInvocation !== undefined &&
      object.capabilityInvocation !== null
    ) {
      for (const e of object.capabilityInvocation) {
        message.capabilityInvocation.push(
          VerificationRelationship.fromPartial(e)
        );
      }
    }
    if (
      object.capabilityDelegation !== undefined &&
      object.capabilityDelegation !== null
    ) {
      for (const e of object.capabilityDelegation) {
        message.capabilityDelegation.push(
          VerificationRelationship.fromPartial(e)
        );
      }
    }
    if (object.service !== undefined && object.service !== null) {
      for (const e of object.service) {
        message.service.push(Service.fromPartial(e));
      }
    }
    if (object.alsoKnownAs !== undefined && object.alsoKnownAs !== null) {
      for (const e of object.alsoKnownAs) {
        message.alsoKnownAs.push(e);
      }
    }
    return message;
  },
};

const baseMetadata: object = { created: "", updated: "" };

export const Metadata = {
  encode(message: Metadata, writer: Writer = Writer.create()): Writer {
    if (message.created !== "") {
      writer.uint32(10).string(message.created);
    }
    if (message.updated !== "") {
      writer.uint32(18).string(message.updated);
    }
    return writer;
  },

  decode(input: Reader | Uint8Array, length?: number): Metadata {
    const reader = input instanceof Uint8Array ? new Reader(input) : input;
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseMetadata } as Metadata;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.created = reader.string();
          break;
        case 2:
          message.updated = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Metadata {
    const message = { ...baseMetadata } as Metadata;
    if (object.created !== undefined && object.created !== null) {
      message.created = String(object.created);
    } else {
      message.created = "";
    }
    if (object.updated !== undefined && object.updated !== null) {
      message.updated = String(object.updated);
    } else {
      message.updated = "";
    }
    return message;
  },

  toJSON(message: Metadata): unknown {
    const obj: any = {};
    message.created !== undefined && (obj.created = message.created);
    message.updated !== undefined && (obj.updated = message.updated);
    return obj;
  },

  fromPartial(object: DeepPartial<Metadata>): Metadata {
    const message = { ...baseMetadata } as Metadata;
    if (object.created !== undefined && object.created !== null) {
      message.created = object.created;
    } else {
      message.created = "";
    }
    if (object.updated !== undefined && object.updated !== null) {
      message.updated = object.updated;
    } else {
      message.updated = "";
    }
    return message;
  },
};

const baseVerificationMethod: object = {
  ID: "",
  Type: "",
  Controller: "",
  publicKeyMultibase: "",
};

export const VerificationMethod = {
  encode(
    message: VerificationMethod,
    writer: Writer = Writer.create()
  ): Writer {
    if (message.ID !== "") {
      writer.uint32(10).string(message.ID);
    }
    if (message.Type !== "") {
      writer.uint32(18).string(message.Type);
    }
    if (message.Controller !== "") {
      writer.uint32(26).string(message.Controller);
    }
    if (message.publicKeyMultibase !== "") {
      writer.uint32(34).string(message.publicKeyMultibase);
    }
    Object.entries(message.publicKeyJWK).forEach(([key, value]) => {
      VerificationMethod_PublicKeyJWKEntry.encode(
        { key: key as any, value },
        writer.uint32(42).fork()
      ).ldelim();
    });
    return writer;
  },

  decode(input: Reader | Uint8Array, length?: number): VerificationMethod {
    const reader = input instanceof Uint8Array ? new Reader(input) : input;
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseVerificationMethod } as VerificationMethod;
    message.publicKeyJWK = {};
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.ID = reader.string();
          break;
        case 2:
          message.Type = reader.string();
          break;
        case 3:
          message.Controller = reader.string();
          break;
        case 4:
          message.publicKeyMultibase = reader.string();
          break;
        case 5:
          const entry5 = VerificationMethod_PublicKeyJWKEntry.decode(
            reader,
            reader.uint32()
          );
          if (entry5.value !== undefined) {
            message.publicKeyJWK[entry5.key] = entry5.value;
          }
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): VerificationMethod {
    const message = { ...baseVerificationMethod } as VerificationMethod;
    message.publicKeyJWK = {};
    if (object.ID !== undefined && object.ID !== null) {
      message.ID = String(object.ID);
    } else {
      message.ID = "";
    }
    if (object.Type !== undefined && object.Type !== null) {
      message.Type = String(object.Type);
    } else {
      message.Type = "";
    }
    if (object.Controller !== undefined && object.Controller !== null) {
      message.Controller = String(object.Controller);
    } else {
      message.Controller = "";
    }
    if (
      object.publicKeyMultibase !== undefined &&
      object.publicKeyMultibase !== null
    ) {
      message.publicKeyMultibase = String(object.publicKeyMultibase);
    } else {
      message.publicKeyMultibase = "";
    }
    if (object.publicKeyJWK !== undefined && object.publicKeyJWK !== null) {
      Object.entries(object.publicKeyJWK).forEach(([key, value]) => {
        message.publicKeyJWK[key] = Any.fromJSON(value);
      });
    }
    return message;
  },

  toJSON(message: VerificationMethod): unknown {
    const obj: any = {};
    message.ID !== undefined && (obj.ID = message.ID);
    message.Type !== undefined && (obj.Type = message.Type);
    message.Controller !== undefined && (obj.Controller = message.Controller);
    message.publicKeyMultibase !== undefined &&
      (obj.publicKeyMultibase = message.publicKeyMultibase);
    obj.publicKeyJWK = {};
    if (message.publicKeyJWK) {
      Object.entries(message.publicKeyJWK).forEach(([k, v]) => {
        obj.publicKeyJWK[k] = Any.toJSON(v);
      });
    }
    return obj;
  },

  fromPartial(object: DeepPartial<VerificationMethod>): VerificationMethod {
    const message = { ...baseVerificationMethod } as VerificationMethod;
    message.publicKeyJWK = {};
    if (object.ID !== undefined && object.ID !== null) {
      message.ID = object.ID;
    } else {
      message.ID = "";
    }
    if (object.Type !== undefined && object.Type !== null) {
      message.Type = object.Type;
    } else {
      message.Type = "";
    }
    if (object.Controller !== undefined && object.Controller !== null) {
      message.Controller = object.Controller;
    } else {
      message.Controller = "";
    }
    if (
      object.publicKeyMultibase !== undefined &&
      object.publicKeyMultibase !== null
    ) {
      message.publicKeyMultibase = object.publicKeyMultibase;
    } else {
      message.publicKeyMultibase = "";
    }
    if (object.publicKeyJWK !== undefined && object.publicKeyJWK !== null) {
      Object.entries(object.publicKeyJWK).forEach(([key, value]) => {
        if (value !== undefined) {
          message.publicKeyJWK[key] = Any.fromPartial(value);
        }
      });
    }
    return message;
  },
};

const baseVerificationMethod_PublicKeyJWKEntry: object = { key: "" };

export const VerificationMethod_PublicKeyJWKEntry = {
  encode(
    message: VerificationMethod_PublicKeyJWKEntry,
    writer: Writer = Writer.create()
  ): Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Any.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: Reader | Uint8Array,
    length?: number
  ): VerificationMethod_PublicKeyJWKEntry {
    const reader = input instanceof Uint8Array ? new Reader(input) : input;
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = {
      ...baseVerificationMethod_PublicKeyJWKEntry,
    } as VerificationMethod_PublicKeyJWKEntry;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.key = reader.string();
          break;
        case 2:
          message.value = Any.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): VerificationMethod_PublicKeyJWKEntry {
    const message = {
      ...baseVerificationMethod_PublicKeyJWKEntry,
    } as VerificationMethod_PublicKeyJWKEntry;
    if (object.key !== undefined && object.key !== null) {
      message.key = String(object.key);
    } else {
      message.key = "";
    }
    if (object.value !== undefined && object.value !== null) {
      message.value = Any.fromJSON(object.value);
    } else {
      message.value = undefined;
    }
    return message;
  },

  toJSON(message: VerificationMethod_PublicKeyJWKEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined &&
      (obj.value = message.value ? Any.toJSON(message.value) : undefined);
    return obj;
  },

  fromPartial(
    object: DeepPartial<VerificationMethod_PublicKeyJWKEntry>
  ): VerificationMethod_PublicKeyJWKEntry {
    const message = {
      ...baseVerificationMethod_PublicKeyJWKEntry,
    } as VerificationMethod_PublicKeyJWKEntry;
    if (object.key !== undefined && object.key !== null) {
      message.key = object.key;
    } else {
      message.key = "";
    }
    if (object.value !== undefined && object.value !== null) {
      message.value = Any.fromPartial(object.value);
    } else {
      message.value = undefined;
    }
    return message;
  },
};

const baseVerificationRelationship: object = { referenceID: "" };

export const VerificationRelationship = {
  encode(
    message: VerificationRelationship,
    writer: Writer = Writer.create()
  ): Writer {
    if (message.referenceID !== "") {
      writer.uint32(10).string(message.referenceID);
    }
    if (message.verificationMethod !== undefined) {
      VerificationMethod.encode(
        message.verificationMethod,
        writer.uint32(18).fork()
      ).ldelim();
    }
    return writer;
  },

  decode(
    input: Reader | Uint8Array,
    length?: number
  ): VerificationRelationship {
    const reader = input instanceof Uint8Array ? new Reader(input) : input;
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = {
      ...baseVerificationRelationship,
    } as VerificationRelationship;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.referenceID = reader.string();
          break;
        case 2:
          message.verificationMethod = VerificationMethod.decode(
            reader,
            reader.uint32()
          );
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): VerificationRelationship {
    const message = {
      ...baseVerificationRelationship,
    } as VerificationRelationship;
    if (object.referenceID !== undefined && object.referenceID !== null) {
      message.referenceID = String(object.referenceID);
    } else {
      message.referenceID = "";
    }
    if (
      object.verificationMethod !== undefined &&
      object.verificationMethod !== null
    ) {
      message.verificationMethod = VerificationMethod.fromJSON(
        object.verificationMethod
      );
    } else {
      message.verificationMethod = undefined;
    }
    return message;
  },

  toJSON(message: VerificationRelationship): unknown {
    const obj: any = {};
    message.referenceID !== undefined &&
      (obj.referenceID = message.referenceID);
    message.verificationMethod !== undefined &&
      (obj.verificationMethod = message.verificationMethod
        ? VerificationMethod.toJSON(message.verificationMethod)
        : undefined);
    return obj;
  },

  fromPartial(
    object: DeepPartial<VerificationRelationship>
  ): VerificationRelationship {
    const message = {
      ...baseVerificationRelationship,
    } as VerificationRelationship;
    if (object.referenceID !== undefined && object.referenceID !== null) {
      message.referenceID = object.referenceID;
    } else {
      message.referenceID = "";
    }
    if (
      object.verificationMethod !== undefined &&
      object.verificationMethod !== null
    ) {
      message.verificationMethod = VerificationMethod.fromPartial(
        object.verificationMethod
      );
    } else {
      message.verificationMethod = undefined;
    }
    return message;
  },
};

const baseService: object = { ID: "", type: "", serviceEndpoint: "" };

export const Service = {
  encode(message: Service, writer: Writer = Writer.create()): Writer {
    if (message.ID !== "") {
      writer.uint32(10).string(message.ID);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.serviceEndpoint !== "") {
      writer.uint32(26).string(message.serviceEndpoint);
    }
    return writer;
  },

  decode(input: Reader | Uint8Array, length?: number): Service {
    const reader = input instanceof Uint8Array ? new Reader(input) : input;
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseService } as Service;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.ID = reader.string();
          break;
        case 2:
          message.type = reader.string();
          break;
        case 3:
          message.serviceEndpoint = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Service {
    const message = { ...baseService } as Service;
    if (object.ID !== undefined && object.ID !== null) {
      message.ID = String(object.ID);
    } else {
      message.ID = "";
    }
    if (object.type !== undefined && object.type !== null) {
      message.type = String(object.type);
    } else {
      message.type = "";
    }
    if (
      object.serviceEndpoint !== undefined &&
      object.serviceEndpoint !== null
    ) {
      message.serviceEndpoint = String(object.serviceEndpoint);
    } else {
      message.serviceEndpoint = "";
    }
    return message;
  },

  toJSON(message: Service): unknown {
    const obj: any = {};
    message.ID !== undefined && (obj.ID = message.ID);
    message.type !== undefined && (obj.type = message.type);
    message.serviceEndpoint !== undefined &&
      (obj.serviceEndpoint = message.serviceEndpoint);
    return obj;
  },

  fromPartial(object: DeepPartial<Service>): Service {
    const message = { ...baseService } as Service;
    if (object.ID !== undefined && object.ID !== null) {
      message.ID = object.ID;
    } else {
      message.ID = "";
    }
    if (object.type !== undefined && object.type !== null) {
      message.type = object.type;
    } else {
      message.type = "";
    }
    if (
      object.serviceEndpoint !== undefined &&
      object.serviceEndpoint !== null
    ) {
      message.serviceEndpoint = object.serviceEndpoint;
    } else {
      message.serviceEndpoint = "";
    }
    return message;
  },
};

declare var self: any | undefined;
declare var window: any | undefined;
var globalThis: any = (() => {
  if (typeof globalThis !== "undefined") return globalThis;
  if (typeof self !== "undefined") return self;
  if (typeof window !== "undefined") return window;
  if (typeof global !== "undefined") return global;
  throw "Unable to locate global object";
})();

const atob: (b64: string) => string =
  globalThis.atob ||
  ((b64) => globalThis.Buffer.from(b64, "base64").toString("binary"));
function bytesFromBase64(b64: string): Uint8Array {
  const bin = atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

const btoa: (bin: string) => string =
  globalThis.btoa ||
  ((bin) => globalThis.Buffer.from(bin, "binary").toString("base64"));
function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  for (let i = 0; i < arr.byteLength; ++i) {
    bin.push(String.fromCharCode(arr[i]));
  }
  return btoa(bin.join(""));
}

type Builtin = Date | Function | Uint8Array | string | number | undefined;
export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Array<infer U>
  ? Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;
